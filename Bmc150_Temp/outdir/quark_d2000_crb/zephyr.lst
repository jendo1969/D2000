
zephyr.elf:     ファイル形式 elf32-iamcu


セクション text の逆アセンブル:

00180000 <__start>:
        mov  %eax, %esi			/* low  value */
        mov  %edx, %edi			/* high value */
#endif

	/* Enable write-back caching by clearing the NW and CD bits */
	movl	%cr0, %eax
  180000:	0f 20 c0             	mov    %cr0,%eax
	andl	$0x9fffffff, %eax
  180003:	25 ff ff ff 9f       	and    $0x9fffffff,%eax
	movl	%eax, %cr0
  180008:	0f 22 c0             	mov    %eax,%cr0
	/*
	 * Ensure interrupts are disabled.  Interrupts are enabled when
	 * the first context switch occurs.
	 */

	cli
  18000b:	fa                   	cli    
	 * booted operating systems to setup their own IDT and GDT.
	 */
#if CONFIG_SET_GDT
	lgdt	_gdt_rom		/* load 32-bit operand size GDT */
#endif
	lidt	_Idt		/* load 32-bit operand size IDT */
  18000c:	0f 01 1d 4c 00 18 00 	lidtl  0x18004c
	/*
	 * Force an #NM exception for floating point instructions
	 * since FP support hasn't been configured
	 */

	movl	%cr0, %eax		/* move CR0 to EAX */
  180013:	0f 20 c0             	mov    %cr0,%eax
	orl	$0x2e, %eax		/* CR0[NE+TS+EM+MP]=1 */
  180016:	83 c8 2e             	or     $0x2e,%eax
	movl	%eax, %cr0		/* move EAX to CR0 */
  180019:	0f 22 c0             	mov    %eax,%cr0
	stack_size_dwords = (CONFIG_ISR_STACK_SIZE / 4)
	movl $stack_size_dwords, %ecx
	rep  stosl
#endif

	movl	$_interrupt_stack, %esp
  18001c:	bc c0 02 28 00       	mov    $0x2802c0,%esp
	addl	$CONFIG_ISR_STACK_SIZE, %esp
  180021:	81 c4 00 01 00 00    	add    $0x100,%esp
	/*
	 * copy DATA section from ROM to RAM region
	 *	 DATA is followed by BSS section.
	 */

	movl	$__data_ram_start, %edi /* DATA in RAM (dest) */
  180027:	bf 00 00 28 00       	mov    $0x280000,%edi
	movl	$__data_rom_start, %esi /* DATA in ROM (src) */
  18002c:	be e8 4e 18 00       	mov    $0x184ee8,%esi
	movl	$__data_num_words, %ecx /* Size of DATA in quad bytes */
  180031:	b9 29 00 00 00       	mov    $0x29,%ecx
dataWords:
	movl	%edx, %ecx	/* restore # quad bytes */
	andl	$0x3, %ecx	/* only need to copy at most 3 quad bytes */
  #endif /* CONFIG_SSE */

	rep
  180036:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

#else /* !CONFIG_SSE */

	/* clear out BSS double words (32-bits at a time) */

	xorl	%eax, %eax		/* fill memory with 0 */
  180038:	31 c0                	xor    %eax,%eax
	movl	$__bss_start, %edi	/* load BSS start address */
  18003a:	bf c0 00 28 00       	mov    $0x2800c0,%edi
	movl	$__bss_num_words, %ecx	/* number of quad bytes */
  18003f:	b9 80 00 00 00       	mov    $0x80,%ecx
	cld
  180044:	fc                   	cld    
	rep
  180045:	f3 ab                	rep stos %eax,%es:(%edi)
	lgdt	%ds:_gdt
#endif

	/* Jump to C portion of kernel initialization and never return */

	jmp	_Cstart
  180047:	e9 dc 2c 00 00       	jmp    182d28 <_Cstart>

0018004c <_Idt>:
  18004c:	ff 01 e8 4c 18 00 66 90 66 90 66 90 66 90 66 90     ...L..f.f.f.f.f.
  18005c:	66 90 66 90                                         f.f.

00180060 <_thread_entry_wrapper>:
  180060:	58                   	pop    %eax
  180061:	5a                   	pop    %edx
  180062:	59                   	pop    %ecx
  180063:	6a 00                	push   $0x0
  180065:	e9 31 39 00 00       	jmp    18399b <_thread_entry>

0018006a <read_temperature>:
#define ACCD_TEMP_REG   0x08

float temp_val = 0.0;

static void read_temperature(struct device *dev)
{
  18006a:	56                   	push   %esi
  18006b:	53                   	push   %ebx
  18006c:	83 ec 10             	sub    $0x10,%esp
  18006f:	89 c3                	mov    %eax,%ebx
	int8_t data;

	data = ACCD_TEMP_REG;
  180071:	c6 44 24 0f 08       	movb   $0x8,0xf(%esp)
			    uint32_t num_bytes, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
	struct i2c_msg msg;

	msg.buf = buf;
  180076:	8d 44 24 0f          	lea    0xf(%esp),%eax
  18007a:	89 04 24             	mov    %eax,(%esp)
	msg.len = num_bytes;
  18007d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  180084:	00 
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  180085:	c6 44 24 08 02       	movb   $0x2,0x8(%esp)

	return api->transfer(dev, &msg, 1, addr);
  18008a:	6a 10                	push   $0x10
  18008c:	b9 01 00 00 00       	mov    $0x1,%ecx
  180091:	8d 54 24 04          	lea    0x4(%esp),%edx
  180095:	89 d8                	mov    %ebx,%eax
  180097:	8b 73 04             	mov    0x4(%ebx),%esi
  18009a:	ff 56 04             	call   *0x4(%esi)
  18009d:	83 c4 04             	add    $0x4,%esp
	if (i2c_write(dev, &data, sizeof(data), BMC150_I2C_ADDR) != 0) {
  1800a0:	85 c0                	test   %eax,%eax
  1800a2:	74 0f                	je     1800b3 <read_temperature+0x49>
		printk("Error on i2c_write()\n");
  1800a4:	68 00 45 18 00       	push   $0x184500
  1800a9:	e8 05 1a 00 00       	call   181ab3 <printk>
  1800ae:	83 c4 04             	add    $0x4,%esp
		return;
  1800b1:	eb 65                	jmp    180118 <read_temperature+0xae>
	}

	data = 0;
  1800b3:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
  1800b8:	8b 73 04             	mov    0x4(%ebx),%esi
	struct i2c_msg msg;

	msg.buf = buf;
  1800bb:	8d 44 24 0f          	lea    0xf(%esp),%eax
  1800bf:	89 04 24             	mov    %eax,(%esp)
	msg.len = num_bytes;
  1800c2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1800c9:	00 
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
  1800ca:	c6 44 24 08 03       	movb   $0x3,0x8(%esp)

	return api->transfer(dev, &msg, 1, addr);
  1800cf:	6a 10                	push   $0x10
  1800d1:	b9 01 00 00 00       	mov    $0x1,%ecx
  1800d6:	8d 54 24 04          	lea    0x4(%esp),%edx
  1800da:	89 d8                	mov    %ebx,%eax
  1800dc:	ff 56 04             	call   *0x4(%esi)
  1800df:	83 c4 04             	add    $0x4,%esp
	if (i2c_read(dev, &data, sizeof(data), BMC150_I2C_ADDR) != 0) {
  1800e2:	85 c0                	test   %eax,%eax
  1800e4:	74 0f                	je     1800f5 <read_temperature+0x8b>
		printk("Error on i2c_read()\n");
  1800e6:	68 16 45 18 00       	push   $0x184516
  1800eb:	e8 c3 19 00 00       	call   181ab3 <printk>
  1800f0:	83 c4 04             	add    $0x4,%esp
		return;
  1800f3:	eb 23                	jmp    180118 <read_temperature+0xae>
	}

	temp_val = ((float)data) / 2 + 23;
  1800f5:	0f be 44 24 0f       	movsbl 0xf(%esp),%eax
  1800fa:	e8 61 41 00 00       	call   184260 <__floatsisf>
  1800ff:	ba 00 00 00 3f       	mov    $0x3f000000,%edx
  180104:	e8 0e 3f 00 00       	call   184017 <__mulsf3>
  180109:	ba 00 00 b8 41       	mov    $0x41b80000,%edx
  18010e:	e8 f3 3a 00 00       	call   183c06 <__addsf3>
  180113:	a3 c0 00 28 00       	mov    %eax,0x2800c0
}
  180118:	83 c4 10             	add    $0x10,%esp
  18011b:	5b                   	pop    %ebx
  18011c:	5e                   	pop    %esi
  18011d:	c3                   	ret    

0018011e <main>:

void main(void)
{
  18011e:	57                   	push   %edi
  18011f:	56                   	push   %esi
  180120:	53                   	push   %ebx
  180121:	83 ec 0c             	sub    $0xc,%esp
	uint8_t buf[10];
	union dev_config cfg;
	struct device *i2c_dev;
	struct device *uart_dev;

	printk("Start I2C BMC150 sample\n");
  180124:	68 2b 45 18 00       	push   $0x18452b
  180129:	e8 85 19 00 00       	call   181ab3 <printk>
  18012e:	83 c4 04             	add    $0x4,%esp
	cfg.raw = 0;
	cfg.bits.use_10_bit_addr = 0;
	cfg.bits.speed = I2C_SPEED_STANDARD;
	cfg.bits.is_master_device = 1;

	i2c_dev = device_get_binding("I2C_0");
  180131:	b8 44 45 18 00       	mov    $0x184544,%eax
  180136:	e8 7b 2a 00 00       	call   182bb6 <device_get_binding>
	if (!i2c_dev) {
  18013b:	85 c0                	test   %eax,%eax
  18013d:	75 0f                	jne    18014e <main+0x30>
		printk("I2C0: Device not found.\n");
  18013f:	68 4a 45 18 00       	push   $0x18454a
  180144:	e8 6a 19 00 00       	call   181ab3 <printk>
  180149:	83 c4 04             	add    $0x4,%esp
		return;
  18014c:	eb 73                	jmp    1801c1 <main+0xa3>
  18014e:	89 c7                	mov    %eax,%edi
 * @retval 0 If successful.
 * @retval -EIO General input / output error, failed to configure device.
 */
static inline int i2c_configure(struct device *dev, uint32_t dev_config)
{
	const struct i2c_driver_api *api = dev->driver_api;
  180150:	8b 48 04             	mov    0x4(%eax),%ecx

	return api->configure(dev, dev_config);
  180153:	ba 12 00 00 00       	mov    $0x12,%edx
  180158:	ff 11                	call   *(%ecx)
	}

	if (i2c_configure(i2c_dev, cfg.raw) != 0) {
  18015a:	85 c0                	test   %eax,%eax
  18015c:	74 0f                	je     18016d <main+0x4f>
		printk("Error on i2c_configure()\n");
  18015e:	68 63 45 18 00       	push   $0x184563
  180163:	e8 4b 19 00 00       	call   181ab3 <printk>
  180168:	83 c4 04             	add    $0x4,%esp
		return;
  18016b:	eb 54                	jmp    1801c1 <main+0xa3>
	}

	uart_dev = device_get_binding("UART_0");
  18016d:	b8 7d 45 18 00       	mov    $0x18457d,%eax
  180172:	e8 3f 2a 00 00       	call   182bb6 <device_get_binding>
  180177:	89 c6                	mov    %eax,%esi

	while (1) {
		read_temperature(i2c_dev);
  180179:	89 f8                	mov    %edi,%eax
  18017b:	e8 ea fe ff ff       	call   18006a <read_temperature>

		sprintf(buf, "temp=%4.1f\n", temp_val);
  180180:	a1 c0 00 28 00       	mov    0x2800c0,%eax
  180185:	e8 8d 41 00 00       	call   184317 <__extendsfdf2>
  18018a:	52                   	push   %edx
  18018b:	50                   	push   %eax
  18018c:	68 84 45 18 00       	push   $0x184584
  180191:	8d 44 24 0e          	lea    0xe(%esp),%eax
  180195:	50                   	push   %eax
  180196:	e8 e8 14 00 00       	call   181683 <sprintf>
  18019b:	83 c4 10             	add    $0x10,%esp
 * @return Number of bytes sent.
 */
static inline int uart_fifo_fill(struct device *dev, const uint8_t *tx_data,
				 int size)
{
	const struct uart_driver_api *api = dev->driver_api;
  18019e:	8b 46 04             	mov    0x4(%esi),%eax

	if (api->fifo_fill) {
  1801a1:	8b 58 0c             	mov    0xc(%eax),%ebx
  1801a4:	85 db                	test   %ebx,%ebx
  1801a6:	74 0d                	je     1801b5 <main+0x97>
		return api->fifo_fill(dev, tx_data, size);
  1801a8:	b9 0a 00 00 00       	mov    $0xa,%ecx
  1801ad:	8d 54 24 02          	lea    0x2(%esp),%edx
  1801b1:	89 f0                	mov    %esi,%eax
  1801b3:	ff d3                	call   *%ebx
		uart_fifo_fill(uart_dev, buf, 10);

		k_sleep(1000);
  1801b5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
  1801ba:	e8 11 2f 00 00       	call   1830d0 <k_sleep>
	}
  1801bf:	eb b8                	jmp    180179 <main+0x5b>
}
  1801c1:	83 c4 0c             	add    $0xc,%esp
  1801c4:	5b                   	pop    %ebx
  1801c5:	5e                   	pop    %esi
  1801c6:	5f                   	pop    %edi
  1801c7:	c3                   	ret    

001801c8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
  1801c8:	53                   	push   %ebx
  1801c9:	89 c3                	mov    %eax,%ebx
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
  1801cb:	83 f8 0a             	cmp    $0xa,%eax
  1801ce:	75 10                	jne    1801e0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
  1801d0:	a1 c4 00 28 00       	mov    0x2800c4,%eax
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
  1801d5:	8b 48 04             	mov    0x4(%eax),%ecx

	return api->poll_out(dev, out_char);
  1801d8:	ba 0d 00 00 00       	mov    $0xd,%edx
  1801dd:	ff 51 04             	call   *0x4(%ecx)
	}
	uart_poll_out(uart_console_dev, c);
  1801e0:	a1 c4 00 28 00       	mov    0x2800c4,%eax
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
  1801e5:	8b 48 04             	mov    0x4(%eax),%ecx

	return api->poll_out(dev, out_char);
  1801e8:	0f b6 d3             	movzbl %bl,%edx
  1801eb:	ff 51 04             	call   *0x4(%ecx)

	return c;
}
  1801ee:	89 d8                	mov    %ebx,%eax
  1801f0:	5b                   	pop    %ebx
  1801f1:	c3                   	ret    

001801f2 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
  1801f2:	b8 c8 01 18 00       	mov    $0x1801c8,%eax
  1801f7:	e8 c4 16 00 00       	call   1818c0 <__printk_hook_install>
  1801fc:	c3                   	ret    

001801fd <uart_console_init>:
static int uart_console_init(struct device *arg)
{

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
  1801fd:	b8 7d 45 18 00       	mov    $0x18457d,%eax
  180202:	e8 af 29 00 00       	call   182bb6 <device_get_binding>
  180207:	a3 c4 00 28 00       	mov    %eax,0x2800c4
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
  18020c:	e8 e1 ff ff ff       	call   1801f2 <uart_console_hook_install>

	return 0;
}
  180211:	b8 00 00 00 00       	mov    $0x0,%eax
  180216:	c3                   	ret    

00180217 <is_tx_fifo_full>:
}

#if CONFIG_UART_INTERRUPT_DRIVEN
static bool is_tx_fifo_full(qm_uart_t instance)
{
	return !!(QM_UART[instance]->lsr & QM_UART_LSR_THRE);
  180217:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
  18021e:	8b 40 14             	mov    0x14(%eax),%eax
  180221:	a8 20                	test   $0x20,%al
  180223:	0f 95 c0             	setne  %al
}
  180226:	c3                   	ret    

00180227 <is_data_ready>:
	return i;
}

static bool is_data_ready(qm_uart_t instance)
{
	return QM_UART[instance]->lsr & QM_UART_LSR_DR;
  180227:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
  18022e:	8b 40 14             	mov    0x14(%eax),%eax
  180231:	83 e0 01             	and    $0x1,%eax
}
  180234:	c3                   	ret    

00180235 <uart_qmsi_irq_tx_enable>:
	return i;
}

static void uart_qmsi_irq_tx_enable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  180235:	8b 00                	mov    (%eax),%eax
  180237:	8b 40 08             	mov    0x8(%eax),%eax
  18023a:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh |= QM_UART_IER_ETBEI;
  18023c:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  180243:	8b 42 04             	mov    0x4(%edx),%eax
  180246:	83 c8 02             	or     $0x2,%eax
  180249:	89 42 04             	mov    %eax,0x4(%edx)
  18024c:	c3                   	ret    

0018024d <uart_qmsi_irq_tx_disable>:
}

static void uart_qmsi_irq_tx_disable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  18024d:	8b 00                	mov    (%eax),%eax
  18024f:	8b 40 08             	mov    0x8(%eax),%eax
  180252:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh &= ~QM_UART_IER_ETBEI;
  180254:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  18025b:	8b 42 04             	mov    0x4(%edx),%eax
  18025e:	83 e0 fd             	and    $0xfffffffd,%eax
  180261:	89 42 04             	mov    %eax,0x4(%edx)
  180264:	c3                   	ret    

00180265 <uart_qmsi_irq_tx_ready>:
}

static int uart_qmsi_irq_tx_ready(struct device *dev)
{
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  180265:	8b 40 08             	mov    0x8(%eax),%eax
	uint32_t id = (drv_data->iir_cache & QM_UART_IIR_IID_MASK);
  180268:	8a 40 04             	mov    0x4(%eax),%al

	return id == QM_UART_IIR_THR_EMPTY;
  18026b:	83 e0 0f             	and    $0xf,%eax
  18026e:	3c 02                	cmp    $0x2,%al
  180270:	0f 94 c0             	sete   %al
  180273:	0f b6 c0             	movzbl %al,%eax
}
  180276:	c3                   	ret    

00180277 <uart_qmsi_irq_tx_empty>:

static int uart_qmsi_irq_tx_empty(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  180277:	8b 00                	mov    (%eax),%eax
  180279:	8b 40 08             	mov    0x8(%eax),%eax
  18027c:	8b 00                	mov    (%eax),%eax
	const uint32_t mask = (QM_UART_LSR_TEMT | QM_UART_LSR_THRE);

	return (QM_UART[instance]->lsr & mask) == mask;
  18027e:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
  180285:	8b 40 14             	mov    0x14(%eax),%eax
  180288:	83 e0 60             	and    $0x60,%eax
  18028b:	83 f8 60             	cmp    $0x60,%eax
  18028e:	0f 94 c0             	sete   %al
  180291:	0f b6 c0             	movzbl %al,%eax
}
  180294:	c3                   	ret    

00180295 <uart_qmsi_irq_rx_enable>:

static void uart_qmsi_irq_rx_enable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  180295:	8b 00                	mov    (%eax),%eax
  180297:	8b 40 08             	mov    0x8(%eax),%eax
  18029a:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh |= QM_UART_IER_ERBFI;
  18029c:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  1802a3:	8b 42 04             	mov    0x4(%edx),%eax
  1802a6:	83 c8 01             	or     $0x1,%eax
  1802a9:	89 42 04             	mov    %eax,0x4(%edx)
  1802ac:	c3                   	ret    

001802ad <uart_qmsi_irq_rx_disable>:
}

static void uart_qmsi_irq_rx_disable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1802ad:	8b 00                	mov    (%eax),%eax
  1802af:	8b 40 08             	mov    0x8(%eax),%eax
  1802b2:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh &= ~QM_UART_IER_ERBFI;
  1802b4:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  1802bb:	8b 42 04             	mov    0x4(%edx),%eax
  1802be:	83 e0 fe             	and    $0xfffffffe,%eax
  1802c1:	89 42 04             	mov    %eax,0x4(%edx)
  1802c4:	c3                   	ret    

001802c5 <uart_qmsi_irq_rx_ready>:
}

static int uart_qmsi_irq_rx_ready(struct device *dev)
{
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  1802c5:	8b 40 08             	mov    0x8(%eax),%eax
	uint32_t id = (drv_data->iir_cache & QM_UART_IIR_IID_MASK);
  1802c8:	8a 50 04             	mov    0x4(%eax),%dl
  1802cb:	83 e2 0f             	and    $0xf,%edx

	return (id == QM_UART_IIR_RECV_DATA_AVAIL) ||
  1802ce:	83 fa 04             	cmp    $0x4,%edx
  1802d1:	0f 94 c1             	sete   %cl
	       (id == QM_UART_IIR_CHAR_TIMEOUT);
  1802d4:	83 fa 0c             	cmp    $0xc,%edx
  1802d7:	0f 94 c0             	sete   %al
static int uart_qmsi_irq_rx_ready(struct device *dev)
{
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
	uint32_t id = (drv_data->iir_cache & QM_UART_IIR_IID_MASK);

	return (id == QM_UART_IIR_RECV_DATA_AVAIL) ||
  1802da:	09 c8                	or     %ecx,%eax
  1802dc:	0f b6 c0             	movzbl %al,%eax
	       (id == QM_UART_IIR_CHAR_TIMEOUT);
}
  1802df:	c3                   	ret    

001802e0 <uart_qmsi_irq_err_enable>:

static void uart_qmsi_irq_err_enable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1802e0:	8b 00                	mov    (%eax),%eax
  1802e2:	8b 40 08             	mov    0x8(%eax),%eax
  1802e5:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh |= QM_UART_IER_ELSI;
  1802e7:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  1802ee:	8b 42 04             	mov    0x4(%edx),%eax
  1802f1:	83 c8 04             	or     $0x4,%eax
  1802f4:	89 42 04             	mov    %eax,0x4(%edx)
  1802f7:	c3                   	ret    

001802f8 <uart_qmsi_irq_err_disable>:
}

static void uart_qmsi_irq_err_disable(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1802f8:	8b 00                	mov    (%eax),%eax
  1802fa:	8b 40 08             	mov    0x8(%eax),%eax
  1802fd:	8b 00                	mov    (%eax),%eax

	QM_UART[instance]->ier_dlh &= ~QM_UART_IER_ELSI;
  1802ff:	8b 14 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%edx
  180306:	8b 42 04             	mov    0x4(%edx),%eax
  180309:	83 e0 fb             	and    $0xfffffffb,%eax
  18030c:	89 42 04             	mov    %eax,0x4(%edx)
  18030f:	c3                   	ret    

00180310 <uart_qmsi_irq_is_pending>:
}

static int uart_qmsi_irq_is_pending(struct device *dev)
{
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  180310:	8b 40 08             	mov    0x8(%eax),%eax
	uint32_t id = (drv_data->iir_cache & QM_UART_IIR_IID_MASK);
  180313:	8a 40 04             	mov    0x4(%eax),%al

	return !(id == IIR_IID_NO_INTERRUPT_PENDING);
  180316:	83 e0 0f             	and    $0xf,%eax
  180319:	3c 01                	cmp    $0x1,%al
  18031b:	0f 95 c0             	setne  %al
  18031e:	0f b6 c0             	movzbl %al,%eax
}
  180321:	c3                   	ret    

00180322 <uart_qmsi_irq_update>:

static int uart_qmsi_irq_update(struct device *dev)
{
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  180322:	8b 10                	mov    (%eax),%edx
  180324:	8b 52 08             	mov    0x8(%edx),%edx
  180327:	8b 12                	mov    (%edx),%edx
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  180329:	8b 40 08             	mov    0x8(%eax),%eax

	drv_data->iir_cache = QM_UART[instance]->iir_fcr;
  18032c:	8b 14 95 1c 00 28 00 	mov    0x28001c(,%edx,4),%edx
  180333:	8b 52 08             	mov    0x8(%edx),%edx
  180336:	88 50 04             	mov    %dl,0x4(%eax)
	return 1;
}
  180339:	b8 01 00 00 00       	mov    $0x1,%eax
  18033e:	c3                   	ret    

0018033f <uart_qmsi_irq_callback_set>:

static void uart_qmsi_irq_callback_set(struct device *dev,
				       uart_irq_callback_t cb)
{
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  18033f:	8b 40 08             	mov    0x8(%eax),%eax

	drv_data->user_cb = cb;
  180342:	89 10                	mov    %edx,(%eax)
  180344:	c3                   	ret    

00180345 <uart_qmsi_isr>:
}

static void uart_qmsi_isr(void *arg)
{
  180345:	53                   	push   %ebx
  180346:	89 c3                	mov    %eax,%ebx
	struct device *dev = arg;
	struct uart_qmsi_drv_data *drv_data = dev->driver_data;
  180348:	8b 40 08             	mov    0x8(%eax),%eax

	if (drv_data->user_cb)
  18034b:	8b 10                	mov    (%eax),%edx
  18034d:	85 d2                	test   %edx,%edx
  18034f:	74 04                	je     180355 <uart_qmsi_isr+0x10>
		drv_data->user_cb(dev);
  180351:	89 d8                	mov    %ebx,%eax
  180353:	ff d2                	call   *%edx

	device_busy_clear(dev);
  180355:	89 d8                	mov    %ebx,%eax
  180357:	e8 92 28 00 00       	call   182bee <device_busy_clear>
}
  18035c:	5b                   	pop    %ebx
  18035d:	c3                   	ret    

0018035e <irq_config_func_0>:
 * @returns: N/A
 */
static inline void _irq_controller_irq_config(unsigned int vector,
					      unsigned int irq, uint32_t flags)
{
	__irq_controller_irq_config(vector, irq, flags);
  18035e:	b9 00 80 00 00       	mov    $0x8000,%ecx
  180363:	ba 08 00 00 00       	mov    $0x8,%edx
  180368:	b8 28 00 00 00       	mov    $0x28,%eax
  18036d:	e8 b1 02 00 00       	call   180623 <__irq_controller_irq_config>
	ARG_UNUSED(dev);

	IRQ_CONNECT(IRQ_GET_NUMBER(QM_IRQ_UART_0_INT),
		    CONFIG_UART_QMSI_0_IRQ_PRI, uart_qmsi_isr,
		    DEVICE_GET(uart_0), UART_IRQ_FLAGS);
	irq_enable(IRQ_GET_NUMBER(QM_IRQ_UART_0_INT));
  180372:	b8 08 00 00 00       	mov    $0x8,%eax
  180377:	e8 82 02 00 00       	call   1805fe <_arch_irq_enable>
	QM_IR_UNMASK_INTERRUPTS(QM_INTERRUPT_ROUTER->uart_0_int_mask);
  18037c:	a1 60 04 80 b0       	mov    0xb0800460,%eax
  180381:	83 e0 fe             	and    $0xfffffffe,%eax
  180384:	a3 60 04 80 b0       	mov    %eax,0xb0800460
  180389:	c3                   	ret    

0018038a <uart_qmsi_isr_irq8_stub>:
#ifdef CONFIG_UART_QMSI_0
static void irq_config_func_0(struct device *dev)
{
	ARG_UNUSED(dev);

	IRQ_CONNECT(IRQ_GET_NUMBER(QM_IRQ_UART_0_INT),
  18038a:	68 5c 00 28 00       	push   $0x28005c
  18038f:	68 45 03 18 00       	push   $0x180345
  180394:	e9 a1 24 00 00       	jmp    18283a <_interrupt_enter>

00180399 <uart_qmsi_isr_irq6_stub>:
#ifdef CONFIG_UART_QMSI_1
static void irq_config_func_1(struct device *dev)
{
	ARG_UNUSED(dev);

	IRQ_CONNECT(IRQ_GET_NUMBER(QM_IRQ_UART_1_INT),
  180399:	68 50 00 28 00       	push   $0x280050
  18039e:	68 45 03 18 00       	push   $0x180345
  1803a3:	e9 92 24 00 00       	jmp    18283a <_interrupt_enter>

001803a8 <_timer_int_handler_irq10_stub>:
  1803a8:	6a 00                	push   $0x0
  1803aa:	68 22 05 18 00       	push   $0x180522
  1803af:	e9 86 24 00 00       	jmp    18283a <_interrupt_enter>

001803b4 <qm_i2c_0_irq_isr_irq4_stub>:
  1803b4:	6a 00                	push   $0x0
  1803b6:	68 8e 22 18 00       	push   $0x18228e
  1803bb:	e9 7a 24 00 00       	jmp    18283a <_interrupt_enter>

001803c0 <irq_config_func_1>:
  1803c0:	b9 00 80 00 00       	mov    $0x8000,%ecx
  1803c5:	ba 06 00 00 00       	mov    $0x6,%edx
  1803ca:	b8 26 00 00 00       	mov    $0x26,%eax
  1803cf:	e8 4f 02 00 00       	call   180623 <__irq_controller_irq_config>
		    CONFIG_UART_QMSI_1_IRQ_PRI, uart_qmsi_isr,
		    DEVICE_GET(uart_1), UART_IRQ_FLAGS);
	irq_enable(IRQ_GET_NUMBER(QM_IRQ_UART_1_INT));
  1803d4:	b8 06 00 00 00       	mov    $0x6,%eax
  1803d9:	e8 20 02 00 00       	call   1805fe <_arch_irq_enable>
	QM_IR_UNMASK_INTERRUPTS(QM_INTERRUPT_ROUTER->uart_1_int_mask);
  1803de:	a1 64 04 80 b0       	mov    0xb0800464,%eax
  1803e3:	83 e0 fe             	and    $0xfffffffe,%eax
  1803e6:	a3 64 04 80 b0       	mov    %eax,0xb0800464
  1803eb:	c3                   	ret    

001803ec <uart_qmsi_init>:
	.drv_cmd = uart_qmsi_drv_cmd,
#endif /* CONFIG_UART_DRV_CMD */
};

static int uart_qmsi_init(struct device *dev)
{
  1803ec:	56                   	push   %esi
  1803ed:	53                   	push   %ebx
  1803ee:	83 ec 0c             	sub    $0xc,%esp
  1803f1:	89 c6                	mov    %eax,%esi
	const struct uart_qmsi_config_info *config = dev->config->config_info;
  1803f3:	8b 00                	mov    (%eax),%eax
  1803f5:	8b 58 08             	mov    0x8(%eax),%ebx
	qm_uart_config_t cfg;

	cfg.line_control = QM_UART_LC_8N1;
  1803f8:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
	cfg.baud_divisor = config->baud_divisor;
  1803ff:	8b 43 08             	mov    0x8(%ebx),%eax
  180402:	89 44 24 04          	mov    %eax,0x4(%esp)
	cfg.hw_fc = config->hw_fc;
  180406:	8a 43 0c             	mov    0xc(%ebx),%al
  180409:	88 44 24 08          	mov    %al,0x8(%esp)

	clk_periph_enable(config->clock_gate);
  18040d:	8b 43 04             	mov    0x4(%ebx),%eax
  180410:	e8 13 17 00 00       	call   181b28 <clk_periph_enable>

	qm_uart_set_config(config->instance, &cfg);
  180415:	89 e2                	mov    %esp,%edx
  180417:	8b 03                	mov    (%ebx),%eax
  180419:	e8 de 20 00 00       	call   1824fc <qm_uart_set_config>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->irq_config_func(dev);
  18041e:	89 f0                	mov    %esi,%eax
  180420:	ff 53 10             	call   *0x10(%ebx)
#endif /* CONFIG_UART_INTERRUPT_DRIVEN */

	dev->driver_api = &api;
  180423:	c7 46 04 c0 45 18 00 	movl   $0x1845c0,0x4(%esi)
	uart_qmsi_set_power_state(dev, DEVICE_PM_ACTIVE_STATE);

	return 0;
}
  18042a:	b8 00 00 00 00       	mov    $0x0,%eax
  18042f:	83 c4 0c             	add    $0xc,%esp
  180432:	5b                   	pop    %ebx
  180433:	5e                   	pop    %esi
  180434:	c3                   	ret    

00180435 <uart_qmsi_fifo_read>:
	return QM_UART[instance]->lsr & QM_UART_LSR_DR;
}

static int uart_qmsi_fifo_read(struct device *dev, uint8_t *rx_data,
				  const int size)
{
  180435:	55                   	push   %ebp
  180436:	57                   	push   %edi
  180437:	56                   	push   %esi
  180438:	53                   	push   %ebx
  180439:	89 d5                	mov    %edx,%ebp
  18043b:	89 cf                	mov    %ecx,%edi
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  18043d:	8b 10                	mov    (%eax),%edx
  18043f:	8b 52 08             	mov    0x8(%edx),%edx
  180442:	8b 32                	mov    (%edx),%esi
	int i;

	device_busy_set(dev);
  180444:	e8 a4 27 00 00       	call   182bed <device_busy_set>

	for (i = 0; i < size && is_data_ready(instance); i++) {
  180449:	bb 00 00 00 00       	mov    $0x0,%ebx
  18044e:	eb 0e                	jmp    18045e <uart_qmsi_fifo_read+0x29>
		rx_data[i] = QM_UART[instance]->rbr_thr_dll;
  180450:	8b 04 b5 1c 00 28 00 	mov    0x28001c(,%esi,4),%eax
  180457:	8b 00                	mov    (%eax),%eax
  180459:	88 44 1d 00          	mov    %al,0x0(%ebp,%ebx,1)
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
	int i;

	device_busy_set(dev);

	for (i = 0; i < size && is_data_ready(instance); i++) {
  18045d:	43                   	inc    %ebx
  18045e:	39 fb                	cmp    %edi,%ebx
  180460:	7d 0b                	jge    18046d <uart_qmsi_fifo_read+0x38>
  180462:	89 f0                	mov    %esi,%eax
  180464:	e8 be fd ff ff       	call   180227 <is_data_ready>
  180469:	84 c0                	test   %al,%al
  18046b:	75 e3                	jne    180450 <uart_qmsi_fifo_read+0x1b>
		rx_data[i] = QM_UART[instance]->rbr_thr_dll;
	}

	return i;
}
  18046d:	89 d8                	mov    %ebx,%eax
  18046f:	5b                   	pop    %ebx
  180470:	5e                   	pop    %esi
  180471:	5f                   	pop    %edi
  180472:	5d                   	pop    %ebp
  180473:	c3                   	ret    

00180474 <uart_qmsi_fifo_fill>:
	return !!(QM_UART[instance]->lsr & QM_UART_LSR_THRE);
}

static int uart_qmsi_fifo_fill(struct device *dev, const uint8_t *tx_data,
				  int size)
{
  180474:	55                   	push   %ebp
  180475:	57                   	push   %edi
  180476:	56                   	push   %esi
  180477:	53                   	push   %ebx
  180478:	89 d5                	mov    %edx,%ebp
  18047a:	89 cf                	mov    %ecx,%edi
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  18047c:	8b 10                	mov    (%eax),%edx
  18047e:	8b 52 08             	mov    0x8(%edx),%edx
  180481:	8b 32                	mov    (%edx),%esi
	int i;

	device_busy_set(dev);
  180483:	e8 65 27 00 00       	call   182bed <device_busy_set>

	for (i = 0; i < size && !is_tx_fifo_full(instance); i++) {
  180488:	bb 00 00 00 00       	mov    $0x0,%ebx
  18048d:	eb 0f                	jmp    18049e <uart_qmsi_fifo_fill+0x2a>
		QM_UART[instance]->rbr_thr_dll = tx_data[i];
  18048f:	8b 04 b5 1c 00 28 00 	mov    0x28001c(,%esi,4),%eax
  180496:	0f b6 54 1d 00       	movzbl 0x0(%ebp,%ebx,1),%edx
  18049b:	89 10                	mov    %edx,(%eax)
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
	int i;

	device_busy_set(dev);

	for (i = 0; i < size && !is_tx_fifo_full(instance); i++) {
  18049d:	43                   	inc    %ebx
  18049e:	39 fb                	cmp    %edi,%ebx
  1804a0:	7d 0b                	jge    1804ad <uart_qmsi_fifo_fill+0x39>
  1804a2:	89 f0                	mov    %esi,%eax
  1804a4:	e8 6e fd ff ff       	call   180217 <is_tx_fifo_full>
  1804a9:	84 c0                	test   %al,%al
  1804ab:	74 e2                	je     18048f <uart_qmsi_fifo_fill+0x1b>
		QM_UART[instance]->rbr_thr_dll = tx_data[i];
	}

	return i;
}
  1804ad:	89 d8                	mov    %ebx,%eax
  1804af:	5b                   	pop    %ebx
  1804b0:	5e                   	pop    %esi
  1804b1:	5f                   	pop    %edi
  1804b2:	5d                   	pop    %ebp
  1804b3:	c3                   	ret    

001804b4 <uart_qmsi_err_check>:
	qm_uart_write(instance, data);
	return data;
}

static int uart_qmsi_err_check(struct device *dev)
{
  1804b4:	83 ec 04             	sub    $0x4,%esp
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1804b7:	8b 00                	mov    (%eax),%eax
  1804b9:	8b 40 08             	mov    0x8(%eax),%eax
  1804bc:	8b 00                	mov    (%eax),%eax

	/* QMSI and Zephyr use the same bits to represent UART errors
	 * so we don't need to translate each error bit from QMSI API
	 * to Zephyr API.
	 */
	qm_uart_get_status(instance, &status);
  1804be:	89 e2                	mov    %esp,%edx
  1804c0:	e8 aa 20 00 00       	call   18256f <qm_uart_get_status>
	return (status & QM_UART_LSR_ERROR_BITS);
  1804c5:	8b 04 24             	mov    (%esp),%eax
  1804c8:	83 e0 1e             	and    $0x1e,%eax
}
  1804cb:	83 c4 04             	add    $0x4,%esp
  1804ce:	c3                   	ret    

001804cf <uart_qmsi_poll_out>:
	return 0;
}

static unsigned char uart_qmsi_poll_out(struct device *dev,
					unsigned char data)
{
  1804cf:	53                   	push   %ebx
  1804d0:	89 d3                	mov    %edx,%ebx
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1804d2:	8b 00                	mov    (%eax),%eax
  1804d4:	8b 40 08             	mov    0x8(%eax),%eax
  1804d7:	8b 00                	mov    (%eax),%eax

	qm_uart_write(instance, data);
  1804d9:	0f b6 d2             	movzbl %dl,%edx
  1804dc:	e8 d1 20 00 00       	call   1825b2 <qm_uart_write>
	return data;
}
  1804e1:	88 d8                	mov    %bl,%al
  1804e3:	5b                   	pop    %ebx
  1804e4:	c3                   	ret    

001804e5 <uart_qmsi_poll_in>:
	      uart_qmsi_device_ctrl, &drv_data_1, &config_info_1, PRE_KERNEL_1,
	      CONFIG_KERNEL_INIT_PRIORITY_DEVICE, NULL);
#endif /* CONFIG_UART_QMSI_1 */

static int uart_qmsi_poll_in(struct device *dev, unsigned char *data)
{
  1804e5:	56                   	push   %esi
  1804e6:	53                   	push   %ebx
  1804e7:	83 ec 04             	sub    $0x4,%esp
  1804ea:	89 d6                	mov    %edx,%esi
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1804ec:	8b 00                	mov    (%eax),%eax
  1804ee:	8b 40 08             	mov    0x8(%eax),%eax
  1804f1:	8b 18                	mov    (%eax),%ebx
	qm_uart_status_t status;

	qm_uart_get_status(instance, &status);
  1804f3:	89 e2                	mov    %esp,%edx
  1804f5:	89 d8                	mov    %ebx,%eax
  1804f7:	e8 73 20 00 00       	call   18256f <qm_uart_get_status>
	/* In order to check if there is any data to read from UART
	 * controller we should check if the QM_UART_RX_BUSY bit from
	 * 'status' is not set. This bit is set only if there is any
	 * pending character to read.
	 */
	if (!(status & QM_UART_RX_BUSY))
  1804fc:	f6 04 24 40          	testb  $0x40,(%esp)
  180500:	74 15                	je     180517 <uart_qmsi_poll_in+0x32>
		return -1;

	qm_uart_read(instance, data, NULL);
  180502:	b9 00 00 00 00       	mov    $0x0,%ecx
  180507:	89 f2                	mov    %esi,%edx
  180509:	89 d8                	mov    %ebx,%eax
  18050b:	e8 c4 20 00 00       	call   1825d4 <qm_uart_read>
	return 0;
  180510:	b8 00 00 00 00       	mov    $0x0,%eax
  180515:	eb 05                	jmp    18051c <uart_qmsi_poll_in+0x37>
	 * controller we should check if the QM_UART_RX_BUSY bit from
	 * 'status' is not set. This bit is set only if there is any
	 * pending character to read.
	 */
	if (!(status & QM_UART_RX_BUSY))
		return -1;
  180517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

	qm_uart_read(instance, data, NULL);
	return 0;
}
  18051c:	83 c4 04             	add    $0x4,%esp
  18051f:	5b                   	pop    %ebx
  180520:	5e                   	pop    %esi
  180521:	c3                   	ret    

00180522 <_timer_int_handler>:
		timer_mode = TIMER_MODE_PERIODIC;
	}

	_sys_clock_final_tick_announce();
#else
	_sys_clock_tick_announce();
  180522:	a1 24 00 28 00       	mov    0x280024,%eax
  180527:	e8 ac 30 00 00       	call   1835d8 <_nano_sys_clock_tick_announce>
  18052c:	c3                   	ret    

0018052d <_sys_clock_driver_init>:
	tickless_idle_init();

#ifndef CONFIG_MVIC
	divide_configuration_register_set();
#endif
	initial_count_register_set(cycles_per_tick - 1);
  18052d:	a1 28 00 28 00       	mov    0x280028,%eax
  180532:	48                   	dec    %eax
 * @param count Count from which timer is to count down
 * @return N/A
 */
static inline void initial_count_register_set(uint32_t count)
{
	*_REG_TIMER_ICR = count;
  180533:	a3 80 03 e0 fe       	mov    %eax,0xfee00380
 *
 * @return N/A
 */
static inline void periodic_mode_set(void)
{
	*_REG_TIMER |= LOAPIC_TIMER_PERIODIC;
  180538:	a1 20 03 e0 fe       	mov    0xfee00320,%eax
  18053d:	0d 00 00 02 00       	or     $0x20000,%eax
  180542:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
  180547:	b9 00 00 00 00       	mov    $0x0,%ecx
  18054c:	ba 0a 00 00 00       	mov    $0xa,%edx
  180551:	b8 2a 00 00 00       	mov    $0x2a,%eax
  180556:	e8 c8 00 00 00       	call   180623 <__irq_controller_irq_config>
	IRQ_CONNECT(TIMER_IRQ, TIMER_IRQ_PRIORITY, _timer_int_handler, 0, 0);

	/* Everything has been configured. It is now safe to enable the
	 * interrupt
	 */
	irq_enable(TIMER_IRQ);
  18055b:	b8 0a 00 00 00       	mov    $0xa,%eax
  180560:	e8 99 00 00 00       	call   1805fe <_arch_irq_enable>

	return 0;
}
  180565:	b8 00 00 00 00       	mov    $0x0,%eax
  18056a:	c3                   	ret    

0018056b <_mvic_rte_set>:
	unsigned int low_nibble;
	unsigned int high_nibble;

	__ASSERT(irq < MVIC_NUM_RTES, "invalid irq line %d", irq);

	low_nibble = ((irq & MVIC_LOW_NIBBLE_MASK) << 0x1);
  18056b:	89 c1                	mov    %eax,%ecx
  18056d:	83 e1 07             	and    $0x7,%ecx
  180570:	01 c9                	add    %ecx,%ecx
	high_nibble = ((irq & MVIC_HIGH_NIBBLE_MASK) << 0x2);
  180572:	83 e0 18             	and    $0x18,%eax
  180575:	c1 e0 02             	shl    $0x2,%eax
	return low_nibble | high_nibble;
  180578:	09 c8                	or     %ecx,%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  18057a:	9c                   	pushf  
  18057b:	fa                   	cli    
  18057c:	59                   	pop    %ecx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  18057d:	a3 00 00 c0 fe       	mov    %eax,0xfec00000
  180582:	89 15 10 00 c0 fe    	mov    %edx,0xfec00010
 *
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	if (!(key & 0x200)) {
  180588:	f6 c5 02             	test   $0x2,%ch
  18058b:	74 01                	je     18058e <_mvic_rte_set+0x23>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  18058d:	fb                   	sti    
  18058e:	c3                   	ret    

0018058f <_mvic_rte_update>:
 * @param mask of bits to be modified
 *
 * @returns N/A
 */
static void _mvic_rte_update(unsigned int irq, uint32_t value, uint32_t mask)
{
  18058f:	53                   	push   %ebx
	unsigned int low_nibble;
	unsigned int high_nibble;

	__ASSERT(irq < MVIC_NUM_RTES, "invalid irq line %d", irq);

	low_nibble = ((irq & MVIC_LOW_NIBBLE_MASK) << 0x1);
  180590:	89 c3                	mov    %eax,%ebx
  180592:	83 e3 07             	and    $0x7,%ebx
  180595:	01 db                	add    %ebx,%ebx
	high_nibble = ((irq & MVIC_HIGH_NIBBLE_MASK) << 0x2);
  180597:	83 e0 18             	and    $0x18,%eax
  18059a:	c1 e0 02             	shl    $0x2,%eax
	return low_nibble | high_nibble;
  18059d:	09 d8                	or     %ebx,%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  18059f:	9c                   	pushf  
  1805a0:	fa                   	cli    
  1805a1:	5b                   	pop    %ebx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1805a2:	a3 00 00 c0 fe       	mov    %eax,0xfec00000
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  1805a7:	a1 10 00 c0 fe       	mov    0xfec00010,%eax
	key = irq_lock();

	sys_write32(regsel, MVIC_IOREGSEL);

	old_value = sys_read32(MVIC_IOWIN);
	updated_value = (old_value & ~mask) | (value & mask);
  1805ac:	31 c2                	xor    %eax,%edx
  1805ae:	21 d1                	and    %edx,%ecx
  1805b0:	31 c8                	xor    %ecx,%eax
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1805b2:	a3 10 00 c0 fe       	mov    %eax,0xfec00010
  1805b7:	f6 c7 02             	test   $0x2,%bh
  1805ba:	74 01                	je     1805bd <_mvic_rte_update+0x2e>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1805bc:	fb                   	sti    
	sys_write32(updated_value, MVIC_IOWIN);

	irq_unlock(key);
}
  1805bd:	5b                   	pop    %ebx
  1805be:	c3                   	ret    

001805bf <_mvic_init>:
 * This routine replaces the standard Local APIC / IO APIC init routines.
 *
 * @returns: N/A
 */
static int _mvic_init(struct device *unused)
{
  1805bf:	53                   	push   %ebx
	ARG_UNUSED(unused);
	int i;

	/* By default mask all interrupt lines */
	for (i = 0; i < MVIC_NUM_RTES; i++) {
  1805c0:	bb 00 00 00 00       	mov    $0x0,%ebx
  1805c5:	eb 0d                	jmp    1805d4 <_mvic_init+0x15>
		_mvic_rte_set(i, MVIC_IOWIN_MASK);
  1805c7:	ba 00 00 01 00       	mov    $0x10000,%edx
  1805cc:	89 d8                	mov    %ebx,%eax
  1805ce:	e8 98 ff ff ff       	call   18056b <_mvic_rte_set>
{
	ARG_UNUSED(unused);
	int i;

	/* By default mask all interrupt lines */
	for (i = 0; i < MVIC_NUM_RTES; i++) {
  1805d3:	43                   	inc    %ebx
  1805d4:	83 fb 1f             	cmp    $0x1f,%ebx
  1805d7:	7e ee                	jle    1805c7 <_mvic_init+0x8>
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1805d9:	b8 00 00 00 00       	mov    $0x0,%eax
  1805de:	a3 80 00 e0 fe       	mov    %eax,0xfee00080
  1805e3:	a3 80 03 e0 fe       	mov    %eax,0xfee00380
  1805e8:	b8 0a 00 01 00       	mov    $0x1000a,%eax
  1805ed:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
  1805f2:	b8 00 00 00 00       	mov    $0x0,%eax
  1805f7:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
	/* discard a pending interrupt if any */
	sys_write32(0, MVIC_EOI);

	return 0;

}
  1805fc:	5b                   	pop    %ebx
  1805fd:	c3                   	ret    

001805fe <_arch_irq_enable>:
SYS_INIT(_mvic_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);


void _arch_irq_enable(unsigned int irq)
{
	if (irq == CONFIG_MVIC_TIMER_IRQ) {
  1805fe:	83 f8 0a             	cmp    $0xa,%eax
  180601:	75 10                	jne    180613 <_arch_irq_enable+0x15>
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  180603:	a1 20 03 e0 fe       	mov    0xfee00320,%eax
		sys_write32(sys_read32(MVIC_LVTTIMER) & ~MVIC_LVTTIMER_MASK,
  180608:	25 ff ff fe ff       	and    $0xfffeffff,%eax
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  18060d:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
  180612:	c3                   	ret    
			    MVIC_LVTTIMER);
	} else {
		_mvic_rte_update(irq, 0, MVIC_IOWIN_MASK);
  180613:	b9 00 00 01 00       	mov    $0x10000,%ecx
  180618:	ba 00 00 00 00       	mov    $0x0,%edx
  18061d:	e8 6d ff ff ff       	call   18058f <_mvic_rte_update>
  180622:	c3                   	ret    

00180623 <__irq_controller_irq_config>:

	/* Vector argument always ignored. There are no triggering options
	 * for the timer, so nothing to do at all for that case. Other I/O
	 * interrupts need their triggering set
	 */
	if (irq != CONFIG_MVIC_TIMER_IRQ) {
  180623:	83 fa 0a             	cmp    $0xa,%edx
  180626:	74 0f                	je     180637 <__irq_controller_irq_config+0x14>
  180628:	89 d0                	mov    %edx,%eax
		_mvic_rte_set(irq, MVIC_IOWIN_MASK | flags);
  18062a:	81 c9 00 00 01 00    	or     $0x10000,%ecx
  180630:	89 ca                	mov    %ecx,%edx
  180632:	e8 34 ff ff ff       	call   18056b <_mvic_rte_set>
  180637:	c3                   	ret    

00180638 <__irq_controller_isr_vector_get>:
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  180638:	a1 10 01 e0 fe       	mov    0xfee00110,%eax
{
	/* In-service register value */
	int isr;

	isr = sys_read32(MVIC_ISR);
	if (unlikely(!isr)) {
  18063d:	85 c0                	test   %eax,%eax
  18063f:	74 0e                	je     18064f <__irq_controller_isr_vector_get+0x17>

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	unsigned int bitpos;

	__asm__ volatile (
  180641:	0f bd c0             	bsr    %eax,%eax
  180644:	75 05                	jne    18064b <__irq_controller_isr_vector_get+0x13>
  180646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		return -1;
	}
	return 32 + (find_msb_set(isr) - 1);
  18064b:	83 c0 20             	add    $0x20,%eax
  18064e:	c3                   	ret    
	/* In-service register value */
	int isr;

	isr = sys_read32(MVIC_ISR);
	if (unlikely(!isr)) {
		return -1;
  18064f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
	return 32 + (find_msb_set(isr) - 1);
}
  180654:	c3                   	ret    

00180655 <transfer_complete>:
			 uint32_t len)
{
	struct device *dev = (struct device *) data;
	struct i2c_qmsi_driver_data *driver_data;

	driver_data = GET_DRIVER_DATA(dev);
  180655:	8b 40 08             	mov    0x8(%eax),%eax
	driver_data->transfer_status = rc;
  180658:	89 50 14             	mov    %edx,0x14(%eax)
	k_sem_give(&driver_data->device_sync_sem);
  18065b:	e8 b6 2e 00 00       	call   183516 <k_sem_give>
  180660:	c3                   	ret    

00180661 <i2c_qmsi_transfer>:
}

static int i2c_qmsi_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
  180661:	55                   	push   %ebp
  180662:	57                   	push   %edi
  180663:	56                   	push   %esi
  180664:	53                   	push   %ebx
  180665:	83 ec 2c             	sub    $0x2c,%esp
  180668:	88 4c 24 05          	mov    %cl,0x5(%esp)
  18066c:	8b 7c 24 40          	mov    0x40(%esp),%edi
  180670:	66 89 7c 24 06       	mov    %di,0x6(%esp)
	struct i2c_qmsi_driver_data *driver_data = GET_DRIVER_DATA(dev);
  180675:	8b 70 08             	mov    0x8(%eax),%esi
	qm_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
  180678:	8b 18                	mov    (%eax),%ebx
  18067a:	8b 5b 08             	mov    0x8(%ebx),%ebx
  18067d:	8b 1b                	mov    (%ebx),%ebx
  18067f:	89 1c 24             	mov    %ebx,(%esp)
	int rc;

	__ASSERT_NO_MSG(msgs);
	if (!num_msgs) {
  180682:	84 c9                	test   %cl,%cl
  180684:	0f 84 f5 00 00 00    	je     18077f <i2c_qmsi_transfer+0x11e>
  18068a:	89 54 24 0c          	mov    %edx,0xc(%esp)
  18068e:	89 44 24 08          	mov    %eax,0x8(%esp)
		return 0;
	}

	device_busy_set(dev);
  180692:	e8 56 25 00 00       	call   182bed <device_busy_set>

	for (int i = 0; i < num_msgs; i++) {
  180697:	bb 00 00 00 00       	mov    $0x0,%ebx
  18069c:	89 f5                	mov    %esi,%ebp
  18069e:	e9 bf 00 00 00       	jmp    180762 <i2c_qmsi_transfer+0x101>
		uint8_t op =  msgs[i].flags & I2C_MSG_RW_MASK;
  1806a3:	8d 04 5b             	lea    (%ebx,%ebx,2),%eax
  1806a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1806ad:	03 54 24 0c          	add    0xc(%esp),%edx
		bool stop = (msgs[i].flags & I2C_MSG_STOP) == I2C_MSG_STOP;
  1806b1:	8a 42 08             	mov    0x8(%edx),%al
  1806b4:	d0 e8                	shr    %al
  1806b6:	83 e0 01             	and    $0x1,%eax
  1806b9:	89 c6                	mov    %eax,%esi
		qm_i2c_transfer_t xfer = { 0 };
  1806bb:	8d 7c 24 10          	lea    0x10(%esp),%edi
  1806bf:	b9 07 00 00 00       	mov    $0x7,%ecx
  1806c4:	b8 00 00 00 00       	mov    $0x0,%eax
  1806c9:	f3 ab                	rep stos %eax,%es:(%edi)
		if (op == I2C_MSG_WRITE) {
  1806cb:	f6 42 08 01          	testb  $0x1,0x8(%edx)
  1806cf:	75 0f                	jne    1806e0 <i2c_qmsi_transfer+0x7f>
			xfer.tx = msgs[i].buf;
  1806d1:	8b 02                	mov    (%edx),%eax
  1806d3:	89 44 24 10          	mov    %eax,0x10(%esp)
			xfer.tx_len = msgs[i].len;
  1806d7:	8b 42 04             	mov    0x4(%edx),%eax
  1806da:	89 44 24 14          	mov    %eax,0x14(%esp)
  1806de:	eb 0d                	jmp    1806ed <i2c_qmsi_transfer+0x8c>
		} else {
			xfer.rx = msgs[i].buf;
  1806e0:	8b 02                	mov    (%edx),%eax
  1806e2:	89 44 24 18          	mov    %eax,0x18(%esp)
			xfer.rx_len = msgs[i].len;
  1806e6:	8b 42 04             	mov    0x4(%edx),%eax
  1806e9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		}

		xfer.callback = transfer_complete;
  1806ed:	c7 44 24 24 55 06 18 	movl   $0x180655,0x24(%esp)
  1806f4:	00 
		xfer.callback_data = dev;
  1806f5:	8b 44 24 08          	mov    0x8(%esp),%eax
  1806f9:	89 44 24 28          	mov    %eax,0x28(%esp)
		xfer.stop = stop;
  1806fd:	89 f0                	mov    %esi,%eax
  1806ff:	88 44 24 20          	mov    %al,0x20(%esp)

		k_sem_take(&driver_data->sem, K_FOREVER);
  180703:	8d 75 18             	lea    0x18(%ebp),%esi
  180706:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  18070b:	89 f0                	mov    %esi,%eax
  18070d:	e8 22 2e 00 00       	call   183534 <k_sem_take>
		rc = qm_i2c_master_irq_transfer(instance, &xfer, addr);
  180712:	0f b7 4c 24 06       	movzwl 0x6(%esp),%ecx
  180717:	8d 54 24 10          	lea    0x10(%esp),%edx
  18071b:	8b 04 24             	mov    (%esp),%eax
  18071e:	e8 47 1d 00 00       	call   18246a <qm_i2c_master_irq_transfer>
  180723:	89 c7                	mov    %eax,%edi
		k_sem_give(&driver_data->sem);
  180725:	89 f0                	mov    %esi,%eax
  180727:	e8 ea 2d 00 00       	call   183516 <k_sem_give>

		if (rc != 0) {
  18072c:	85 ff                	test   %edi,%edi
  18072e:	74 0b                	je     18073b <i2c_qmsi_transfer+0xda>
			device_busy_clear(dev);
  180730:	8b 44 24 08          	mov    0x8(%esp),%eax
  180734:	e8 b5 24 00 00       	call   182bee <device_busy_clear>
			return -EIO;
  180739:	eb 20                	jmp    18075b <i2c_qmsi_transfer+0xfa>
		}

		/* Block current thread until the I2C transfer completes. */
		k_sem_take(&driver_data->device_sync_sem, K_FOREVER);
  18073b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  180740:	89 e8                	mov    %ebp,%eax
  180742:	e8 ed 2d 00 00       	call   183534 <k_sem_take>

		if (driver_data->transfer_status != 0) {
  180747:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  18074b:	74 0b                	je     180758 <i2c_qmsi_transfer+0xf7>
			device_busy_clear(dev);
  18074d:	8b 44 24 08          	mov    0x8(%esp),%eax
  180751:	e8 98 24 00 00       	call   182bee <device_busy_clear>
			return -EIO;
  180756:	eb 03                	jmp    18075b <i2c_qmsi_transfer+0xfa>
		return 0;
	}

	device_busy_set(dev);

	for (int i = 0; i < num_msgs; i++) {
  180758:	43                   	inc    %ebx
  180759:	eb 07                	jmp    180762 <i2c_qmsi_transfer+0x101>
		rc = qm_i2c_master_irq_transfer(instance, &xfer, addr);
		k_sem_give(&driver_data->sem);

		if (rc != 0) {
			device_busy_clear(dev);
			return -EIO;
  18075b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  180760:	eb 22                	jmp    180784 <i2c_qmsi_transfer+0x123>
		return 0;
	}

	device_busy_set(dev);

	for (int i = 0; i < num_msgs; i++) {
  180762:	0f b6 44 24 05       	movzbl 0x5(%esp),%eax
  180767:	39 c3                	cmp    %eax,%ebx
  180769:	0f 8c 34 ff ff ff    	jl     1806a3 <i2c_qmsi_transfer+0x42>
			device_busy_clear(dev);
			return -EIO;
		}
	}

	device_busy_clear(dev);
  18076f:	8b 44 24 08          	mov    0x8(%esp),%eax
  180773:	e8 76 24 00 00       	call   182bee <device_busy_clear>

	return 0;
  180778:	b8 00 00 00 00       	mov    $0x0,%eax
  18077d:	eb 05                	jmp    180784 <i2c_qmsi_transfer+0x123>
	qm_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
	int rc;

	__ASSERT_NO_MSG(msgs);
	if (!num_msgs) {
		return 0;
  18077f:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	device_busy_clear(dev);

	return 0;
}
  180784:	83 c4 2c             	add    $0x2c,%esp
  180787:	5b                   	pop    %ebx
  180788:	5e                   	pop    %esi
  180789:	5f                   	pop    %edi
  18078a:	5d                   	pop    %ebp
  18078b:	c3                   	ret    

0018078c <i2c_qmsi_configure>:
	      CONFIG_KERNEL_INIT_PRIORITY_DEVICE, NULL);

#endif /* CONFIG_I2C_1 */

static int i2c_qmsi_configure(struct device *dev, uint32_t config)
{
  18078c:	57                   	push   %edi
  18078d:	56                   	push   %esi
  18078e:	53                   	push   %ebx
  18078f:	83 ec 14             	sub    $0x14,%esp
	qm_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
  180792:	8b 08                	mov    (%eax),%ecx
  180794:	8b 49 08             	mov    0x8(%ecx),%ecx
  180797:	8b 19                	mov    (%ecx),%ebx
	struct i2c_qmsi_driver_data *driver_data = GET_DRIVER_DATA(dev);
  180799:	8b 78 08             	mov    0x8(%eax),%edi
	qm_i2c_reg_t *const controller = QM_I2C[instance];
  18079c:	8b 34 9d 18 00 28 00 	mov    0x280018(,%ebx,4),%esi
	qm_i2c_config_t qm_cfg;

	cfg.raw = config;

	/* This driver only supports master mode. */
	if (!cfg.bits.is_master_device)
  1807a3:	f6 c2 10             	test   $0x10,%dl
  1807a6:	74 74                	je     18081c <i2c_qmsi_configure+0x90>
		return -EINVAL;

	qm_cfg.mode = QM_I2C_MASTER;
  1807a8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1807af:	00 
	qm_cfg.address_mode = (cfg.bits.use_10_bit_addr) ? QM_I2C_10_BIT :
  1807b0:	89 d0                	mov    %edx,%eax
  1807b2:	83 e0 01             	and    $0x1,%eax
  1807b5:	89 44 24 04          	mov    %eax,0x4(%esp)
							   QM_I2C_7_BIT;

	switch (cfg.bits.speed) {
  1807b9:	d1 ea                	shr    %edx
  1807bb:	83 e2 07             	and    $0x7,%edx
  1807be:	80 fa 02             	cmp    $0x2,%dl
  1807c1:	74 13                	je     1807d6 <i2c_qmsi_configure+0x4a>
  1807c3:	80 fa 03             	cmp    $0x3,%dl
  1807c6:	74 17                	je     1807df <i2c_qmsi_configure+0x53>
  1807c8:	80 fa 01             	cmp    $0x1,%dl
  1807cb:	75 56                	jne    180823 <i2c_qmsi_configure+0x97>
	case I2C_SPEED_STANDARD:
		qm_cfg.speed = QM_I2C_SPEED_STD;
  1807cd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
		break;
  1807d4:	eb 10                	jmp    1807e6 <i2c_qmsi_configure+0x5a>
	case I2C_SPEED_FAST:
		qm_cfg.speed = QM_I2C_SPEED_FAST;
  1807d6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
		break;
  1807dd:	eb 07                	jmp    1807e6 <i2c_qmsi_configure+0x5a>
	case I2C_SPEED_FAST_PLUS:
		qm_cfg.speed = QM_I2C_SPEED_FAST_PLUS;
  1807df:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
		break;
	default:
		return -EINVAL;
	}

	k_sem_take(&driver_data->sem, K_FOREVER);
  1807e6:	83 c7 18             	add    $0x18,%edi
  1807e9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1807ee:	89 f8                	mov    %edi,%eax
  1807f0:	e8 3f 2d 00 00       	call   183534 <k_sem_take>
	rc = qm_i2c_set_config(instance, &qm_cfg);
  1807f5:	89 e2                	mov    %esp,%edx
  1807f7:	89 d8                	mov    %ebx,%eax
  1807f9:	e8 9b 1a 00 00       	call   182299 <qm_i2c_set_config>
  1807fe:	89 c3                	mov    %eax,%ebx
	k_sem_give(&driver_data->sem);
  180800:	89 f8                	mov    %edi,%eax
  180802:	e8 0f 2d 00 00       	call   183516 <k_sem_give>

	controller->ic_sda_hold = (CONFIG_I2C_SDA_RX_HOLD << 16) +
  180807:	c7 46 7c 10 00 18 00 	movl   $0x180010,0x7c(%esi)
				   CONFIG_I2C_SDA_TX_HOLD;

	controller->ic_sda_setup = CONFIG_I2C_SDA_SETUP;
  18080e:	c7 86 94 00 00 00 02 	movl   $0x2,0x94(%esi)
  180815:	00 00 00 

	return rc;
  180818:	89 d8                	mov    %ebx,%eax
  18081a:	eb 0c                	jmp    180828 <i2c_qmsi_configure+0x9c>

	cfg.raw = config;

	/* This driver only supports master mode. */
	if (!cfg.bits.is_master_device)
		return -EINVAL;
  18081c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  180821:	eb 05                	jmp    180828 <i2c_qmsi_configure+0x9c>
		break;
	case I2C_SPEED_FAST_PLUS:
		qm_cfg.speed = QM_I2C_SPEED_FAST_PLUS;
		break;
	default:
		return -EINVAL;
  180823:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
				   CONFIG_I2C_SDA_TX_HOLD;

	controller->ic_sda_setup = CONFIG_I2C_SDA_SETUP;

	return rc;
}
  180828:	83 c4 14             	add    $0x14,%esp
  18082b:	5b                   	pop    %ebx
  18082c:	5e                   	pop    %esi
  18082d:	5f                   	pop    %edi
  18082e:	c3                   	ret    

0018082f <i2c_qmsi_init>:
	.configure = i2c_qmsi_configure,
	.transfer = i2c_qmsi_transfer,
};

static int i2c_qmsi_init(struct device *dev)
{
  18082f:	55                   	push   %ebp
  180830:	57                   	push   %edi
  180831:	56                   	push   %esi
  180832:	53                   	push   %ebx
  180833:	89 c6                	mov    %eax,%esi
	struct i2c_qmsi_driver_data *driver_data = GET_DRIVER_DATA(dev);
  180835:	8b 58 08             	mov    0x8(%eax),%ebx
	const struct i2c_qmsi_config_info *config = dev->config->config_info;
  180838:	8b 00                	mov    (%eax),%eax
  18083a:	8b 78 08             	mov    0x8(%eax),%edi
	qm_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
  18083d:	8b 2f                	mov    (%edi),%ebp
	int err;

	k_sem_init(&driver_data->device_sync_sem, 0, UINT_MAX);
  18083f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  180844:	ba 00 00 00 00       	mov    $0x0,%edx
  180849:	89 d8                	mov    %ebx,%eax
  18084b:	e8 a3 2c 00 00       	call   1834f3 <k_sem_init>
	k_sem_init(&driver_data->sem, 0, UINT_MAX);
  180850:	83 c3 18             	add    $0x18,%ebx
  180853:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  180858:	ba 00 00 00 00       	mov    $0x0,%edx
  18085d:	89 d8                	mov    %ebx,%eax
  18085f:	e8 8f 2c 00 00       	call   1834f3 <k_sem_init>
	k_sem_give(&driver_data->sem);
  180864:	89 d8                	mov    %ebx,%eax
  180866:	e8 ab 2c 00 00       	call   183516 <k_sem_give>

	switch (instance) {
  18086b:	85 ed                	test   %ebp,%ebp
  18086d:	75 4f                	jne    1808be <i2c_qmsi_init+0x8f>
  18086f:	b9 00 80 00 00       	mov    $0x8000,%ecx
  180874:	ba 04 00 00 00       	mov    $0x4,%edx
  180879:	b8 24 00 00 00       	mov    $0x24,%eax
  18087e:	e8 a0 fd ff ff       	call   180623 <__irq_controller_irq_config>
		 * to Lakemont core.
		 */
		IRQ_CONNECT(IRQ_GET_NUMBER(QM_IRQ_I2C_0_INT),
			    CONFIG_I2C_0_IRQ_PRI, qm_i2c_0_irq_isr, NULL,
			    (IOAPIC_LEVEL | IOAPIC_HIGH));
		irq_enable(IRQ_GET_NUMBER(QM_IRQ_I2C_0_INT));
  180883:	b8 04 00 00 00       	mov    $0x4,%eax
  180888:	e8 71 fd ff ff       	call   1805fe <_arch_irq_enable>
		QM_IR_UNMASK_INTERRUPTS(
  18088d:	a1 48 04 80 b0       	mov    0xb0800448,%eax
  180892:	83 e0 fe             	and    $0xfffffffe,%eax
  180895:	a3 48 04 80 b0       	mov    %eax,0xb0800448

	default:
		return -EIO;
	}

	clk_periph_enable(config->clock_gate);
  18089a:	8b 47 08             	mov    0x8(%edi),%eax
  18089d:	e8 86 12 00 00       	call   181b28 <clk_periph_enable>

	err = i2c_qmsi_configure(dev, config->default_cfg.raw);
  1808a2:	8b 57 04             	mov    0x4(%edi),%edx
  1808a5:	89 f0                	mov    %esi,%eax
  1808a7:	e8 e0 fe ff ff       	call   18078c <i2c_qmsi_configure>
	if (err < 0) {
  1808ac:	85 c0                	test   %eax,%eax
  1808ae:	78 13                	js     1808c3 <i2c_qmsi_init+0x94>
		return err;
	}

	dev->driver_api = &api;
  1808b0:	c7 46 04 04 46 18 00 	movl   $0x184604,0x4(%esi)

	i2c_qmsi_set_power_state(dev, DEVICE_PM_ACTIVE_STATE);

	return 0;
  1808b7:	b8 00 00 00 00       	mov    $0x0,%eax
  1808bc:	eb 05                	jmp    1808c3 <i2c_qmsi_init+0x94>
				QM_INTERRUPT_ROUTER->i2c_master_1_int_mask);
		break;
#endif /* CONFIG_I2C_1 */

	default:
		return -EIO;
  1808be:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	dev->driver_api = &api;

	i2c_qmsi_set_power_state(dev, DEVICE_PM_ACTIVE_STATE);

	return 0;
}
  1808c3:	5b                   	pop    %ebx
  1808c4:	5e                   	pop    %esi
  1808c5:	5f                   	pop    %edi
  1808c6:	5d                   	pop    %ebp
  1808c7:	c3                   	ret    

001808c8 <pinmux_get>:
	return qm_pmux_select(pin, func) == 0 ? 0 : -EIO;
}

static int pinmux_get(struct device *dev, uint32_t pin,
			  uint32_t *func)
{
  1808c8:	56                   	push   %esi
  1808c9:	53                   	push   %ebx
  1808ca:	89 cb                	mov    %ecx,%ebx
	/*
	 * pinmux control registers are 32-bit wide, but each pin requires
	 * 2 bits to set the mode (A, B, C, or D).  As such we only get 16
	 * pins per register.
	 */
	uint32_t reg_offset = pin >> 4;
  1808cc:	89 d6                	mov    %edx,%esi
  1808ce:	c1 ee 04             	shr    $0x4,%esi

	/* The pin offset within the register */
	uint32_t pin_no = pin % 16;
  1808d1:	83 e2 0f             	and    $0xf,%edx

	/*
	 * MASK_2_BITS (the value of which is 3) is used because there are
	 * 2 bits for the mode of each pin.
	 */
	uint32_t pin_mask = MASK_2_BITS << (pin_no << 1);
  1808d4:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
  1808d7:	b8 03 00 00 00       	mov    $0x3,%eax
  1808dc:	d3 e0                	shl    %cl,%eax
	uint32_t mode_mask = *mux_register & pin_mask;
  1808de:	8b 14 b5 30 09 80 b0 	mov    -0x4f7ff6d0(,%esi,4),%edx
  1808e5:	21 d0                	and    %edx,%eax
	uint32_t mode = mode_mask >> (pin_no << 1);
  1808e7:	d3 e8                	shr    %cl,%eax

	*func = mode;
  1808e9:	89 03                	mov    %eax,(%ebx)

	return 0;
}
  1808eb:	b8 00 00 00 00       	mov    $0x0,%eax
  1808f0:	5b                   	pop    %ebx
  1808f1:	5e                   	pop    %esi
  1808f2:	c3                   	ret    

001808f3 <pinmux_initialize>:
};

static int pinmux_initialize(struct device *port)
{
	return 0;
}
  1808f3:	b8 00 00 00 00       	mov    $0x0,%eax
  1808f8:	c3                   	ret    

001808f9 <pinmux_input>:
	return qm_pmux_pullup_en(pin, func) == 0 ? 0 : -EIO;
}

static int pinmux_input(struct device *dev, uint32_t pin,
			    uint8_t func)
{
  1808f9:	89 d0                	mov    %edx,%eax
	ARG_UNUSED(dev);

	return qm_pmux_input_en(pin, func) == 0 ? 0 : -EIO;
  1808fb:	84 c9                	test   %cl,%cl
  1808fd:	0f 95 c2             	setne  %dl
  180900:	0f b6 d2             	movzbl %dl,%edx
  180903:	e8 a1 1d 00 00       	call   1826a9 <qm_pmux_input_en>
  180908:	85 c0                	test   %eax,%eax
  18090a:	74 05                	je     180911 <pinmux_input+0x18>
  18090c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  180911:	c3                   	ret    

00180912 <pinmux_pullup>:
	return 0;
}

static int pinmux_pullup(struct device *dev, uint32_t pin,
			     uint8_t func)
{
  180912:	89 d0                	mov    %edx,%eax
	ARG_UNUSED(dev);

	return qm_pmux_pullup_en(pin, func) == 0 ? 0 : -EIO;
  180914:	84 c9                	test   %cl,%cl
  180916:	0f 95 c2             	setne  %dl
  180919:	0f b6 d2             	movzbl %dl,%edx
  18091c:	e8 e9 1d 00 00       	call   18270a <qm_pmux_pullup_en>
  180921:	85 c0                	test   %eax,%eax
  180923:	74 05                	je     18092a <pinmux_pullup+0x18>
  180925:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  18092a:	c3                   	ret    

0018092b <pinmux_set>:

#define MASK_2_BITS	0x3

static int pinmux_set(struct device *dev, uint32_t pin,
			  uint32_t func)
{
  18092b:	89 d0                	mov    %edx,%eax
  18092d:	89 ca                	mov    %ecx,%edx
	ARG_UNUSED(dev);

	return qm_pmux_select(pin, func) == 0 ? 0 : -EIO;
  18092f:	e8 1d 1d 00 00       	call   182651 <qm_pmux_select>
  180934:	85 c0                	test   %eax,%eax
  180936:	74 05                	je     18093d <pinmux_set+0x12>
  180938:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  18093d:	c3                   	ret    

0018093e <_uc>:
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
  18093e:	eb 0e                	jmp    18094e <_uc+0x10>
		if (*buf >= 'a' && *buf <= 'z') {
  180940:	8d 4a 9f             	lea    -0x61(%edx),%ecx
  180943:	80 f9 19             	cmp    $0x19,%cl
  180946:	77 05                	ja     18094d <_uc+0xf>
			*buf += 'A' - 'a';
  180948:	83 ea 20             	sub    $0x20,%edx
  18094b:	88 10                	mov    %dl,(%eax)
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
  18094d:	40                   	inc    %eax
  18094e:	8a 10                	mov    (%eax),%dl
  180950:	84 d2                	test   %dl,%dl
  180952:	75 ec                	jne    180940 <_uc+0x2>
		if (*buf >= 'a' && *buf <= 'z') {
			*buf += 'A' - 'a';
		}
	}
}
  180954:	c3                   	ret    

00180955 <_reverse_and_pad>:

/* Convention note: "end" as passed in is the standard "byte after
 * last character" style, but...
 */
static int _reverse_and_pad(char *start, char *end, int minlen)
{
  180955:	56                   	push   %esi
  180956:	53                   	push   %ebx
	int len;

	while (end - start < minlen) {
  180957:	eb 06                	jmp    18095f <_reverse_and_pad+0xa>
		*end++ = '0';
  180959:	c6 02 30             	movb   $0x30,(%edx)
  18095c:	8d 52 01             	lea    0x1(%edx),%edx
 */
static int _reverse_and_pad(char *start, char *end, int minlen)
{
	int len;

	while (end - start < minlen) {
  18095f:	89 d3                	mov    %edx,%ebx
  180961:	29 c3                	sub    %eax,%ebx
  180963:	39 cb                	cmp    %ecx,%ebx
  180965:	7c f2                	jl     180959 <_reverse_and_pad+0x4>
		*end++ = '0';
	}

	*end = 0;
  180967:	c6 02 00             	movb   $0x0,(%edx)
	len = end - start;
	for (end--; end > start; end--, start++) {
  18096a:	4a                   	dec    %edx
  18096b:	eb 0d                	jmp    18097a <_reverse_and_pad+0x25>
		char tmp = *end;
  18096d:	0f b6 32             	movzbl (%edx),%esi
		*end = *start;
  180970:	8a 08                	mov    (%eax),%cl
  180972:	88 0a                	mov    %cl,(%edx)
		*start = tmp;
  180974:	89 f1                	mov    %esi,%ecx
  180976:	88 08                	mov    %cl,(%eax)
		*end++ = '0';
	}

	*end = 0;
	len = end - start;
	for (end--; end > start; end--, start++) {
  180978:	4a                   	dec    %edx
  180979:	40                   	inc    %eax
  18097a:	39 d0                	cmp    %edx,%eax
  18097c:	72 ef                	jb     18096d <_reverse_and_pad+0x18>
		char tmp = *end;
		*end = *start;
		*start = tmp;
	}
	return len;
}
  18097e:	89 d8                	mov    %ebx,%eax
  180980:	5b                   	pop    %ebx
  180981:	5e                   	pop    %esi
  180982:	c3                   	ret    

00180983 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
  180983:	55                   	push   %ebp
  180984:	57                   	push   %edi
  180985:	56                   	push   %esi
  180986:	53                   	push   %ebx
  180987:	83 ec 04             	sub    $0x4,%esp
  18098a:	89 04 24             	mov    %eax,(%esp)
  18098d:	89 d6                	mov    %edx,%esi
  18098f:	89 c3                	mov    %eax,%ebx
	char *buf0 = buf;

	do {
		int d = n % base;
  180991:	89 f0                	mov    %esi,%eax
  180993:	ba 00 00 00 00       	mov    $0x0,%edx
  180998:	f7 f1                	div    %ecx

		n /= base;
  18099a:	89 c6                	mov    %eax,%esi
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
  18099c:	8d 7b 01             	lea    0x1(%ebx),%edi
  18099f:	83 fa 09             	cmp    $0x9,%edx
  1809a2:	7e 07                	jle    1809ab <_to_x+0x28>
  1809a4:	bd 27 00 00 00       	mov    $0x27,%ebp
  1809a9:	eb 05                	jmp    1809b0 <_to_x+0x2d>
  1809ab:	bd 00 00 00 00       	mov    $0x0,%ebp
  1809b0:	8d 54 15 30          	lea    0x30(%ebp,%edx,1),%edx
  1809b4:	88 13                	mov    %dl,(%ebx)
  1809b6:	89 fb                	mov    %edi,%ebx
	} while (n);
  1809b8:	85 c0                	test   %eax,%eax
  1809ba:	75 d5                	jne    180991 <_to_x+0xe>
	return _reverse_and_pad(buf0, buf, minlen);
  1809bc:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  1809c0:	89 fa                	mov    %edi,%edx
  1809c2:	8b 04 24             	mov    (%esp),%eax
  1809c5:	e8 8b ff ff ff       	call   180955 <_reverse_and_pad>
}
  1809ca:	83 c4 04             	add    $0x4,%esp
  1809cd:	5b                   	pop    %ebx
  1809ce:	5e                   	pop    %esi
  1809cf:	5f                   	pop    %edi
  1809d0:	5d                   	pop    %ebp
  1809d1:	c3                   	ret    

001809d2 <_to_hex>:

static int _to_hex(char *buf, uint32_t value,
		   int alt_form, int precision, int prefix)
{
  1809d2:	57                   	push   %edi
  1809d3:	56                   	push   %esi
  1809d4:	53                   	push   %ebx
  1809d5:	89 c6                	mov    %eax,%esi
	int len;
	char *buf0 = buf;

	if (alt_form) {
  1809d7:	85 c9                	test   %ecx,%ecx
  1809d9:	74 0c                	je     1809e7 <_to_hex+0x15>
		*buf++ = '0';
  1809db:	c6 00 30             	movb   $0x30,(%eax)
		*buf++ = 'x';
  1809de:	8d 58 02             	lea    0x2(%eax),%ebx
  1809e1:	c6 40 01 78          	movb   $0x78,0x1(%eax)
  1809e5:	eb 02                	jmp    1809e9 <_to_hex+0x17>
  1809e7:	89 c3                	mov    %eax,%ebx
	}

	len = _to_x(buf, value, 16, precision);
  1809e9:	ff 74 24 10          	pushl  0x10(%esp)
  1809ed:	b9 10 00 00 00       	mov    $0x10,%ecx
  1809f2:	89 d8                	mov    %ebx,%eax
  1809f4:	e8 8a ff ff ff       	call   180983 <_to_x>
  1809f9:	83 c4 04             	add    $0x4,%esp
  1809fc:	89 c7                	mov    %eax,%edi
	if (prefix == 'X') {
  1809fe:	83 7c 24 14 58       	cmpl   $0x58,0x14(%esp)
  180a03:	75 07                	jne    180a0c <_to_hex+0x3a>
		_uc(buf0);
  180a05:	89 f0                	mov    %esi,%eax
  180a07:	e8 32 ff ff ff       	call   18093e <_uc>
	}

	return len + (buf - buf0);
  180a0c:	29 f3                	sub    %esi,%ebx
  180a0e:	8d 04 1f             	lea    (%edi,%ebx,1),%eax
}
  180a11:	5b                   	pop    %ebx
  180a12:	5e                   	pop    %esi
  180a13:	5f                   	pop    %edi
  180a14:	c3                   	ret    

00180a15 <_to_octal>:

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
  180a15:	53                   	push   %ebx
  180a16:	89 c3                	mov    %eax,%ebx
	char *buf0 = buf;

	if (alt_form) {
  180a18:	85 c9                	test   %ecx,%ecx
  180a1a:	74 15                	je     180a31 <_to_octal+0x1c>
		*buf++ = '0';
  180a1c:	8d 40 01             	lea    0x1(%eax),%eax
  180a1f:	c6 03 30             	movb   $0x30,(%ebx)
		if (!value) {
  180a22:	85 d2                	test   %edx,%edx
  180a24:	75 0b                	jne    180a31 <_to_octal+0x1c>
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
  180a26:	c6 43 01 00          	movb   $0x0,0x1(%ebx)
			return 1;
  180a2a:	b8 01 00 00 00       	mov    $0x1,%eax
  180a2f:	eb 19                	jmp    180a4a <_to_octal+0x35>
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
  180a31:	89 c1                	mov    %eax,%ecx
  180a33:	29 d9                	sub    %ebx,%ecx
  180a35:	89 cb                	mov    %ecx,%ebx
  180a37:	ff 74 24 08          	pushl  0x8(%esp)
  180a3b:	b9 08 00 00 00       	mov    $0x8,%ecx
  180a40:	e8 3e ff ff ff       	call   180983 <_to_x>
  180a45:	83 c4 04             	add    $0x4,%esp
  180a48:	01 d8                	add    %ebx,%eax
}
  180a4a:	5b                   	pop    %ebx
  180a4b:	c3                   	ret    

00180a4c <_to_udec>:

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
  180a4c:	51                   	push   %ecx
  180a4d:	b9 0a 00 00 00       	mov    $0xa,%ecx
  180a52:	e8 2c ff ff ff       	call   180983 <_to_x>
  180a57:	83 c4 04             	add    $0x4,%esp
}
  180a5a:	c3                   	ret    

00180a5b <_to_dec>:

static int _to_dec(char *buf, int32_t value, int fplus, int fspace, int precision)
{
  180a5b:	56                   	push   %esi
  180a5c:	53                   	push   %ebx
  180a5d:	89 c3                	mov    %eax,%ebx

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
  180a5f:	85 d2                	test   %edx,%edx
  180a61:	79 12                	jns    180a75 <_to_dec+0x1a>
		*buf++ = '-';
  180a63:	8d 70 01             	lea    0x1(%eax),%esi
  180a66:	c6 00 2d             	movb   $0x2d,(%eax)
		if (value != 0x80000000)
  180a69:	81 fa 00 00 00 80    	cmp    $0x80000000,%edx
  180a6f:	74 21                	je     180a92 <_to_dec+0x37>
			value = -value;
  180a71:	f7 da                	neg    %edx
  180a73:	eb 1d                	jmp    180a92 <_to_dec+0x37>
	} else if (fplus)
  180a75:	85 c9                	test   %ecx,%ecx
  180a77:	74 08                	je     180a81 <_to_dec+0x26>
		*buf++ = '+';
  180a79:	8d 70 01             	lea    0x1(%eax),%esi
  180a7c:	c6 00 2b             	movb   $0x2b,(%eax)
  180a7f:	eb 11                	jmp    180a92 <_to_dec+0x37>
	else if (fspace)
  180a81:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
  180a86:	74 08                	je     180a90 <_to_dec+0x35>
		*buf++ = ' ';
  180a88:	8d 70 01             	lea    0x1(%eax),%esi
  180a8b:	c6 00 20             	movb   $0x20,(%eax)
  180a8e:	eb 02                	jmp    180a92 <_to_dec+0x37>
  180a90:	89 c6                	mov    %eax,%esi

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
  180a92:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  180a96:	89 f0                	mov    %esi,%eax
  180a98:	e8 af ff ff ff       	call   180a4c <_to_udec>
  180a9d:	01 f0                	add    %esi,%eax
  180a9f:	29 d8                	sub    %ebx,%eax
}
  180aa1:	5b                   	pop    %ebx
  180aa2:	5e                   	pop    %esi
  180aa3:	c3                   	ret    

00180aa4 <_rlrshift>:

static	void _rlrshift(uint64_t *v)
{
  180aa4:	57                   	push   %edi
  180aa5:	56                   	push   %esi
  180aa6:	53                   	push   %ebx
	*v = (*v & 1) + (*v >> 1);
  180aa7:	8b 08                	mov    (%eax),%ecx
  180aa9:	8b 58 04             	mov    0x4(%eax),%ebx
  180aac:	89 ca                	mov    %ecx,%edx
  180aae:	83 e2 01             	and    $0x1,%edx
  180ab1:	bf 00 00 00 00       	mov    $0x0,%edi
  180ab6:	0f ac d9 01          	shrd   $0x1,%ebx,%ecx
  180aba:	d1 eb                	shr    %ebx
  180abc:	01 d1                	add    %edx,%ecx
  180abe:	11 fb                	adc    %edi,%ebx
  180ac0:	89 08                	mov    %ecx,(%eax)
  180ac2:	89 58 04             	mov    %ebx,0x4(%eax)
}
  180ac5:	5b                   	pop    %ebx
  180ac6:	5e                   	pop    %esi
  180ac7:	5f                   	pop    %edi
  180ac8:	c3                   	ret    

00180ac9 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
  180ac9:	55                   	push   %ebp
  180aca:	57                   	push   %edi
  180acb:	56                   	push   %esi
  180acc:	53                   	push   %ebx
  180acd:	83 ec 10             	sub    $0x10,%esp
  180ad0:	89 c5                	mov    %eax,%ebp
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
  180ad2:	8b 00                	mov    (%eax),%eax
  180ad4:	8b 55 04             	mov    0x4(%ebp),%edx
  180ad7:	83 c0 02             	add    $0x2,%eax
  180ada:	83 d2 00             	adc    $0x0,%edx
  180add:	89 04 24             	mov    %eax,(%esp)
  180ae0:	89 54 24 04          	mov    %edx,0x4(%esp)
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
  180ae4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  180aeb:	00 
  180aec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  180af3:	00 
	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
  180af4:	bb 00 00 00 00       	mov    $0x0,%ebx
  180af9:	eb 5d                	jmp    180b58 <_ldiv5+0x8f>
		hi = rem >> shifts[i];
  180afb:	8b 04 24             	mov    (%esp),%eax
  180afe:	8b 54 24 04          	mov    0x4(%esp),%edx
  180b02:	8a 8b f4 48 18 00    	mov    0x1848f4(%ebx),%cl
  180b08:	0f ad d0             	shrd   %cl,%edx,%eax
  180b0b:	d3 ea                	shr    %cl,%edx
  180b0d:	f6 c1 20             	test   $0x20,%cl
  180b10:	74 02                	je     180b14 <_ldiv5+0x4b>
  180b12:	89 d0                	mov    %edx,%eax
		q = (uint64_t)(hi / 5) << shifts[i];
  180b14:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
  180b19:	f7 e1                	mul    %ecx
  180b1b:	c1 ea 02             	shr    $0x2,%edx
  180b1e:	89 d0                	mov    %edx,%eax
  180b20:	ba 00 00 00 00       	mov    $0x0,%edx
  180b25:	8a 8b f4 48 18 00    	mov    0x1848f4(%ebx),%cl
  180b2b:	0f a5 c2             	shld   %cl,%eax,%edx
  180b2e:	d3 e0                	shl    %cl,%eax
  180b30:	f6 c1 20             	test   $0x20,%cl
  180b33:	74 04                	je     180b39 <_ldiv5+0x70>
  180b35:	89 c2                	mov    %eax,%edx
  180b37:	31 c0                	xor    %eax,%eax
		rem -= q * 5;
  180b39:	89 c6                	mov    %eax,%esi
  180b3b:	89 d7                	mov    %edx,%edi
  180b3d:	0f a4 c7 02          	shld   $0x2,%eax,%edi
  180b41:	c1 e6 02             	shl    $0x2,%esi
  180b44:	01 c6                	add    %eax,%esi
  180b46:	11 d7                	adc    %edx,%edi
  180b48:	29 34 24             	sub    %esi,(%esp)
  180b4b:	19 7c 24 04          	sbb    %edi,0x4(%esp)
		quot += q;
  180b4f:	01 44 24 08          	add    %eax,0x8(%esp)
  180b53:	11 54 24 0c          	adc    %edx,0xc(%esp)
	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
  180b57:	43                   	inc    %ebx
  180b58:	83 fb 02             	cmp    $0x2,%ebx
  180b5b:	76 9e                	jbe    180afb <_ldiv5+0x32>
		q = (uint64_t)(hi / 5) << shifts[i];
		rem -= q * 5;
		quot += q;
	}

	*v = quot;
  180b5d:	8b 44 24 08          	mov    0x8(%esp),%eax
  180b61:	8b 54 24 0c          	mov    0xc(%esp),%edx
  180b65:	89 45 00             	mov    %eax,0x0(%ebp)
  180b68:	89 55 04             	mov    %edx,0x4(%ebp)
}
  180b6b:	83 c4 10             	add    $0x10,%esp
  180b6e:	5b                   	pop    %ebx
  180b6f:	5e                   	pop    %esi
  180b70:	5f                   	pop    %edi
  180b71:	5d                   	pop    %ebp
  180b72:	c3                   	ret    

00180b73 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
  180b73:	8b 0a                	mov    (%edx),%ecx
  180b75:	85 c9                	test   %ecx,%ecx
  180b77:	7e 39                	jle    180bb2 <_get_digit+0x3f>

	*v = quot;
}

static	char _get_digit(uint64_t *fr, int *digit_count)
{
  180b79:	57                   	push   %edi
  180b7a:	56                   	push   %esi
  180b7b:	53                   	push   %ebx
	int		rval;

	if (*digit_count > 0) {
		*digit_count -= 1;
  180b7c:	49                   	dec    %ecx
  180b7d:	89 0a                	mov    %ecx,(%edx)
		*fr = *fr * 10;
  180b7f:	8b 30                	mov    (%eax),%esi
  180b81:	8b 78 04             	mov    0x4(%eax),%edi
  180b84:	89 f1                	mov    %esi,%ecx
  180b86:	89 fb                	mov    %edi,%ebx
  180b88:	0f a4 f3 01          	shld   $0x1,%esi,%ebx
  180b8c:	01 f1                	add    %esi,%ecx
  180b8e:	0f a4 f7 03          	shld   $0x3,%esi,%edi
  180b92:	c1 e6 03             	shl    $0x3,%esi
  180b95:	01 f1                	add    %esi,%ecx
  180b97:	11 fb                	adc    %edi,%ebx
  180b99:	89 ce                	mov    %ecx,%esi
  180b9b:	89 da                	mov    %ebx,%edx
		rval = ((*fr >> 60) & 0xF) + '0';
  180b9d:	89 d9                	mov    %ebx,%ecx
  180b9f:	c1 e9 1c             	shr    $0x1c,%ecx
  180ba2:	83 c1 30             	add    $0x30,%ecx
		*fr &= 0x0FFFFFFFFFFFFFFFull;
  180ba5:	89 30                	mov    %esi,(%eax)
  180ba7:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
  180bad:	89 50 04             	mov    %edx,0x4(%eax)
  180bb0:	eb 08                	jmp    180bba <_get_digit+0x47>
	} else
		rval = '0';
  180bb2:	b9 30 00 00 00       	mov    $0x30,%ecx
	return (char) (rval);
}
  180bb7:	88 c8                	mov    %cl,%al
  180bb9:	c3                   	ret    
  180bba:	88 c8                	mov    %cl,%al
  180bbc:	5b                   	pop    %ebx
  180bbd:	5e                   	pop    %esi
  180bbe:	5f                   	pop    %edi
  180bbf:	c3                   	ret    

00180bc0 <_to_float>:
#define	MAXFP1	0xFFFFFFFF	/* Largest # if first fp format */
#define HIGHBIT64 (1ull<<63)

static int _to_float(char *buf, uint64_t double_temp, int c,
					 int falt, int fplus, int fspace, int precision)
{
  180bc0:	55                   	push   %ebp
  180bc1:	57                   	push   %edi
  180bc2:	56                   	push   %esi
  180bc3:	53                   	push   %ebx
  180bc4:	83 ec 24             	sub    $0x24,%esp
  180bc7:	89 c6                	mov    %eax,%esi
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
  180bc9:	89 cb                	mov    %ecx,%ebx
  180bcb:	c1 eb 14             	shr    $0x14,%ebx
  180bce:	81 e3 ff 07 00 00    	and    $0x7ff,%ebx
	fract = (double_temp << 11) & ~HIGHBIT64;
  180bd4:	89 d7                	mov    %edx,%edi
  180bd6:	89 cd                	mov    %ecx,%ebp
  180bd8:	0f a4 d5 0b          	shld   $0xb,%edx,%ebp
  180bdc:	c1 e7 0b             	shl    $0xb,%edi
  180bdf:	89 f8                	mov    %edi,%eax
  180be1:	89 ea                	mov    %ebp,%edx
  180be3:	89 fd                	mov    %edi,%ebp
  180be5:	89 d7                	mov    %edx,%edi
  180be7:	81 e7 ff ff ff 7f    	and    $0x7fffffff,%edi
  180bed:	89 44 24 18          	mov    %eax,0x18(%esp)
  180bf1:	89 7c 24 1c          	mov    %edi,0x1c(%esp)
	sign = !!(double_temp & HIGHBIT64);
  180bf5:	89 c8                	mov    %ecx,%eax
  180bf7:	c1 e9 1f             	shr    $0x1f,%ecx


	if (exp == 0x7ff) {
  180bfa:	81 fb ff 07 00 00    	cmp    $0x7ff,%ebx
  180c00:	75 39                	jne    180c3b <_to_float+0x7b>
		if (!fract) {
  180c02:	09 ef                	or     %ebp,%edi
  180c04:	75 1d                	jne    180c23 <_to_float+0x63>
			*buf++ = sign ? '-' : '+';
  180c06:	85 c0                	test   %eax,%eax
  180c08:	79 04                	jns    180c0e <_to_float+0x4e>
  180c0a:	b0 2d                	mov    $0x2d,%al
  180c0c:	eb 02                	jmp    180c10 <_to_float+0x50>
  180c0e:	b0 2b                	mov    $0x2b,%al
  180c10:	88 06                	mov    %al,(%esi)
			*buf++ = 'I';
  180c12:	c6 46 01 49          	movb   $0x49,0x1(%esi)
			*buf++ = 'N';
  180c16:	c6 46 02 4e          	movb   $0x4e,0x2(%esi)
			*buf++ = 'F';
  180c1a:	8d 46 04             	lea    0x4(%esi),%eax
  180c1d:	c6 46 03 46          	movb   $0x46,0x3(%esi)
  180c21:	eb 0e                	jmp    180c31 <_to_float+0x71>
		} else {
			*buf++ = 'N';
  180c23:	c6 06 4e             	movb   $0x4e,(%esi)
			*buf++ = 'a';
  180c26:	c6 46 01 61          	movb   $0x61,0x1(%esi)
			*buf++ = 'N';
  180c2a:	8d 46 03             	lea    0x3(%esi),%eax
  180c2d:	c6 46 02 4e          	movb   $0x4e,0x2(%esi)
		}
		*buf = 0;
  180c31:	c6 00 00             	movb   $0x0,(%eax)
		return buf - start;
  180c34:	29 f0                	sub    %esi,%eax
  180c36:	e9 ce 03 00 00       	jmp    181009 <_to_float+0x449>
	}

	if ((exp | fract) != 0) {
  180c3b:	89 da                	mov    %ebx,%edx
  180c3d:	c1 fa 1f             	sar    $0x1f,%edx
  180c40:	89 1c 24             	mov    %ebx,(%esp)
  180c43:	89 54 24 04          	mov    %edx,0x4(%esp)
  180c47:	89 d8                	mov    %ebx,%eax
  180c49:	09 e8                	or     %ebp,%eax
  180c4b:	8b 54 24 04          	mov    0x4(%esp),%edx
  180c4f:	09 fa                	or     %edi,%edx
  180c51:	09 c2                	or     %eax,%edx
  180c53:	74 1b                	je     180c70 <_to_float+0xb0>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
  180c55:	81 eb fe 03 00 00    	sub    $0x3fe,%ebx
		fract |= HIGHBIT64;
  180c5b:	89 6c 24 18          	mov    %ebp,0x18(%esp)
  180c5f:	81 cf 00 00 00 80    	or     $0x80000000,%edi
  180c65:	89 7c 24 1c          	mov    %edi,0x1c(%esp)
		decexp = true;		/* Wasn't zero */
  180c69:	b8 01 00 00 00       	mov    $0x1,%eax
  180c6e:	eb 05                	jmp    180c75 <_to_float+0xb5>
	} else
		decexp = false;		/* It was zero */
  180c70:	b8 00 00 00 00       	mov    $0x0,%eax

	if (decexp && sign) {
  180c75:	84 c8                	test   %cl,%al
  180c77:	74 0b                	je     180c84 <_to_float+0xc4>
		*buf++ = '-';
  180c79:	8d 46 01             	lea    0x1(%esi),%eax
  180c7c:	89 04 24             	mov    %eax,(%esp)
  180c7f:	c6 06 2d             	movb   $0x2d,(%esi)
  180c82:	eb 27                	jmp    180cab <_to_float+0xeb>
	} else if (fplus) {
  180c84:	83 7c 24 40 00       	cmpl   $0x0,0x40(%esp)
  180c89:	74 0b                	je     180c96 <_to_float+0xd6>
		*buf++ = '+';
  180c8b:	8d 46 01             	lea    0x1(%esi),%eax
  180c8e:	89 04 24             	mov    %eax,(%esp)
  180c91:	c6 06 2b             	movb   $0x2b,(%esi)
  180c94:	eb 15                	jmp    180cab <_to_float+0xeb>
	} else if (fspace) {
  180c96:	83 7c 24 44 00       	cmpl   $0x0,0x44(%esp)
  180c9b:	74 0b                	je     180ca8 <_to_float+0xe8>
		*buf++ = ' ';
  180c9d:	8d 46 01             	lea    0x1(%esi),%eax
  180ca0:	89 04 24             	mov    %eax,(%esp)
  180ca3:	c6 06 20             	movb   $0x20,(%esi)
  180ca6:	eb 03                	jmp    180cab <_to_float+0xeb>
  180ca8:	89 34 24             	mov    %esi,(%esp)
  180cab:	89 74 24 0c          	mov    %esi,0xc(%esp)
	}

	decexp = 0;
  180caf:	bd 00 00 00 00       	mov    $0x0,%ebp
	while (exp <= -3) {
  180cb4:	eb 54                	jmp    180d0a <_to_float+0x14a>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
  180cb6:	8d 44 24 18          	lea    0x18(%esp),%eax
  180cba:	e8 e5 fd ff ff       	call   180aa4 <_rlrshift>
			exp++;
  180cbf:	43                   	inc    %ebx
		*buf++ = ' ';
	}

	decexp = 0;
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
  180cc0:	8b 44 24 18          	mov    0x18(%esp),%eax
  180cc4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
  180cc8:	81 fa 32 33 33 33    	cmp    $0x33333332,%edx
  180cce:	77 e6                	ja     180cb6 <_to_float+0xf6>
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
  180cd0:	89 c6                	mov    %eax,%esi
  180cd2:	89 d7                	mov    %edx,%edi
  180cd4:	0f a4 c7 02          	shld   $0x2,%eax,%edi
  180cd8:	c1 e6 02             	shl    $0x2,%esi
  180cdb:	01 f0                	add    %esi,%eax
  180cdd:	11 fa                	adc    %edi,%edx
  180cdf:	89 44 24 18          	mov    %eax,0x18(%esp)
  180ce3:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		exp++;
  180ce7:	43                   	inc    %ebx
		decexp--;
  180ce8:	4d                   	dec    %ebp

		while ((fract >> 32) <= (MAXFP1 / 2)) {
  180ce9:	eb 0f                	jmp    180cfa <_to_float+0x13a>
			fract <<= 1;
  180ceb:	0f a4 c2 01          	shld   $0x1,%eax,%edx
  180cef:	01 c0                	add    %eax,%eax
  180cf1:	89 44 24 18          	mov    %eax,0x18(%esp)
  180cf5:	89 54 24 1c          	mov    %edx,0x1c(%esp)
			exp--;
  180cf9:	4b                   	dec    %ebx
		}
		fract *= 5;
		exp++;
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
  180cfa:	8b 44 24 18          	mov    0x18(%esp),%eax
  180cfe:	8b 54 24 1c          	mov    0x1c(%esp),%edx
  180d02:	81 fa ff ff ff 7f    	cmp    $0x7fffffff,%edx
  180d08:	76 e1                	jbe    180ceb <_to_float+0x12b>
	} else if (fspace) {
		*buf++ = ' ';
	}

	decexp = 0;
	while (exp <= -3) {
  180d0a:	83 fb fe             	cmp    $0xfffffffe,%ebx
  180d0d:	7c b1                	jl     180cc0 <_to_float+0x100>
  180d0f:	eb 2c                	jmp    180d3d <_to_float+0x17d>
			exp--;
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
  180d11:	8d 44 24 18          	lea    0x18(%esp),%eax
  180d15:	e8 af fd ff ff       	call   180ac9 <_ldiv5>
		exp--;
  180d1a:	4b                   	dec    %ebx
		decexp++;
  180d1b:	45                   	inc    %ebp
		while ((fract >> 32) <= (MAXFP1 / 2)) {
  180d1c:	eb 0f                	jmp    180d2d <_to_float+0x16d>
			fract <<= 1;
  180d1e:	0f a4 c2 01          	shld   $0x1,%eax,%edx
  180d22:	01 c0                	add    %eax,%eax
  180d24:	89 44 24 18          	mov    %eax,0x18(%esp)
  180d28:	89 54 24 1c          	mov    %edx,0x1c(%esp)
			exp--;
  180d2c:	4b                   	dec    %ebx

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
  180d2d:	8b 44 24 18          	mov    0x18(%esp),%eax
  180d31:	8b 54 24 1c          	mov    0x1c(%esp),%edx
  180d35:	81 fa ff ff ff 7f    	cmp    $0x7fffffff,%edx
  180d3b:	76 e1                	jbe    180d1e <_to_float+0x15e>
			fract <<= 1;
			exp--;
		}
	}

	while (exp > 0) {
  180d3d:	85 db                	test   %ebx,%ebx
  180d3f:	7f d0                	jg     180d11 <_to_float+0x151>
  180d41:	eb 0a                	jmp    180d4d <_to_float+0x18d>
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
  180d43:	8d 44 24 18          	lea    0x18(%esp),%eax
  180d47:	e8 58 fd ff ff       	call   180aa4 <_rlrshift>
		exp++;
  180d4c:	43                   	inc    %ebx
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
  180d4d:	83 fb 03             	cmp    $0x3,%ebx
  180d50:	7e f1                	jle    180d43 <_to_float+0x183>
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
  180d52:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
  180d57:	79 08                	jns    180d61 <_to_float+0x1a1>
		precision = 6;		/* Default precision if none given */
  180d59:	c7 44 24 48 06 00 00 	movl   $0x6,0x48(%esp)
  180d60:	00 
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
  180d61:	83 7c 24 38 67       	cmpl   $0x67,0x38(%esp)
  180d66:	0f 94 c2             	sete   %dl
  180d69:	83 7c 24 38 47       	cmpl   $0x47,0x38(%esp)
  180d6e:	0f 94 c0             	sete   %al
  180d71:	08 c2                	or     %al,%dl
  180d73:	74 45                	je     180dba <_to_float+0x1fa>
		if (!falt && (precision > 0))
  180d75:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
  180d7a:	0f 94 c2             	sete   %dl
  180d7d:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
  180d82:	0f 9f c0             	setg   %al
  180d85:	84 c2                	test   %al,%dl
  180d87:	75 0a                	jne    180d93 <_to_float+0x1d3>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
  180d89:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  180d90:	00 
  180d91:	eb 08                	jmp    180d9b <_to_float+0x1db>
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
  180d93:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  180d9a:	00 
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
  180d9b:	83 fd fd             	cmp    $0xfffffffd,%ebp
  180d9e:	7c 09                	jl     180da9 <_to_float+0x1e9>
  180da0:	8b 44 24 48          	mov    0x48(%esp),%eax
  180da4:	40                   	inc    %eax
  180da5:	39 c5                	cmp    %eax,%ebp
  180da7:	7e 1b                	jle    180dc4 <_to_float+0x204>
			if (c == 'g')
  180da9:	83 7c 24 38 67       	cmpl   $0x67,0x38(%esp)
  180dae:	75 1e                	jne    180dce <_to_float+0x20e>
				c = 'e';
  180db0:	c7 44 24 38 65 00 00 	movl   $0x65,0x38(%esp)
  180db7:	00 
  180db8:	eb 1c                	jmp    180dd6 <_to_float+0x216>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
  180dba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  180dc1:	00 
  180dc2:	eb 12                	jmp    180dd6 <_to_float+0x216>
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
		} else
			c = 'f';
  180dc4:	c7 44 24 38 66 00 00 	movl   $0x66,0x38(%esp)
  180dcb:	00 
  180dcc:	eb 08                	jmp    180dd6 <_to_float+0x216>
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
  180dce:	c7 44 24 38 45 00 00 	movl   $0x45,0x38(%esp)
  180dd5:	00 
		} else
			c = 'f';
	}

	if (c == 'f') {
  180dd6:	83 7c 24 38 66       	cmpl   $0x66,0x38(%esp)
  180ddb:	75 0a                	jne    180de7 <_to_float+0x227>
		exp = precision + decexp;
		if (exp < 0)
  180ddd:	89 e8                	mov    %ebp,%eax
  180ddf:	03 44 24 48          	add    0x48(%esp),%eax
  180de3:	79 0e                	jns    180df3 <_to_float+0x233>
  180de5:	eb 07                	jmp    180dee <_to_float+0x22e>
			exp = 0;
	} else
		exp = precision + 1;
  180de7:	8b 44 24 48          	mov    0x48(%esp),%eax
  180deb:	40                   	inc    %eax
  180dec:	eb 05                	jmp    180df3 <_to_float+0x233>
	}

	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
  180dee:	b8 00 00 00 00       	mov    $0x0,%eax
	} else
		exp = precision + 1;
	digit_count = 16;
  180df3:	c7 44 24 20 10 00 00 	movl   $0x10,0x20(%esp)
  180dfa:	00 
	if (exp > 16)
  180dfb:	83 f8 10             	cmp    $0x10,%eax
  180dfe:	7e 05                	jle    180e05 <_to_float+0x245>
		exp = 16;
  180e00:	b8 10 00 00 00       	mov    $0x10,%eax

	ltemp = 0x0800000000000000;
  180e05:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  180e0c:	00 
  180e0d:	c7 44 24 14 00 00 00 	movl   $0x8000000,0x14(%esp)
  180e14:	08 
	while (exp--) {
  180e15:	eb 14                	jmp    180e2b <_to_float+0x26b>
		_ldiv5(&ltemp);
  180e17:	8d 44 24 10          	lea    0x10(%esp),%eax
  180e1b:	e8 a9 fc ff ff       	call   180ac9 <_ldiv5>
		_rlrshift(&ltemp);
  180e20:	8d 44 24 10          	lea    0x10(%esp),%eax
  180e24:	e8 7b fc ff ff       	call   180aa4 <_rlrshift>
	digit_count = 16;
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
	while (exp--) {
  180e29:	89 d8                	mov    %ebx,%eax
  180e2b:	8d 58 ff             	lea    -0x1(%eax),%ebx
  180e2e:	85 c0                	test   %eax,%eax
  180e30:	75 e5                	jne    180e17 <_to_float+0x257>
		_ldiv5(&ltemp);
		_rlrshift(&ltemp);
	}

	fract += ltemp;
  180e32:	8b 44 24 10          	mov    0x10(%esp),%eax
  180e36:	8b 54 24 14          	mov    0x14(%esp),%edx
  180e3a:	03 44 24 18          	add    0x18(%esp),%eax
  180e3e:	13 54 24 1c          	adc    0x1c(%esp),%edx
  180e42:	89 44 24 18          	mov    %eax,0x18(%esp)
  180e46:	89 54 24 1c          	mov    %edx,0x1c(%esp)
	if ((fract >> 32) & 0xF0000000) {
  180e4a:	89 d0                	mov    %edx,%eax
  180e4c:	a9 00 00 00 f0       	test   $0xf0000000,%eax
  180e51:	74 13                	je     180e66 <_to_float+0x2a6>
		_ldiv5(&fract);
  180e53:	8d 44 24 18          	lea    0x18(%esp),%eax
  180e57:	e8 6d fc ff ff       	call   180ac9 <_ldiv5>
		_rlrshift(&fract);
  180e5c:	8d 44 24 18          	lea    0x18(%esp),%eax
  180e60:	e8 3f fc ff ff       	call   180aa4 <_rlrshift>
		decexp++;
  180e65:	45                   	inc    %ebp
	}

	if (c == 'f') {
  180e66:	83 7c 24 38 66       	cmpl   $0x66,0x38(%esp)
  180e6b:	0f 85 8a 00 00 00    	jne    180efb <_to_float+0x33b>
		if (decexp > 0) {
  180e71:	85 ed                	test   %ebp,%ebp
  180e73:	7f 19                	jg     180e8e <_to_float+0x2ce>
  180e75:	eb 23                	jmp    180e9a <_to_float+0x2da>
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
  180e77:	8d 73 01             	lea    0x1(%ebx),%esi
  180e7a:	8d 54 24 20          	lea    0x20(%esp),%edx
  180e7e:	8d 44 24 18          	lea    0x18(%esp),%eax
  180e82:	e8 ec fc ff ff       	call   180b73 <_get_digit>
  180e87:	88 03                	mov    %al,(%ebx)
				decexp--;
  180e89:	4d                   	dec    %ebp
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
  180e8a:	89 f3                	mov    %esi,%ebx
  180e8c:	eb 03                	jmp    180e91 <_to_float+0x2d1>
  180e8e:	8b 1c 24             	mov    (%esp),%ebx
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
  180e91:	85 ed                	test   %ebp,%ebp
  180e93:	7f e2                	jg     180e77 <_to_float+0x2b7>
  180e95:	89 1c 24             	mov    %ebx,(%esp)
  180e98:	eb 0c                	jmp    180ea6 <_to_float+0x2e6>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
  180e9a:	8b 04 24             	mov    (%esp),%eax
  180e9d:	c6 00 30             	movb   $0x30,(%eax)
  180ea0:	8d 40 01             	lea    0x1(%eax),%eax
  180ea3:	89 04 24             	mov    %eax,(%esp)
		if (falt || (precision > 0))
  180ea6:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
  180eab:	0f 95 c2             	setne  %dl
  180eae:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
  180eb3:	0f 9f c0             	setg   %al
  180eb6:	08 c2                	or     %al,%dl
  180eb8:	74 0c                	je     180ec6 <_to_float+0x306>
			*buf++ = '.';
  180eba:	8b 04 24             	mov    (%esp),%eax
  180ebd:	c6 00 2e             	movb   $0x2e,(%eax)
  180ec0:	8d 40 01             	lea    0x1(%eax),%eax
  180ec3:	89 04 24             	mov    %eax,(%esp)
		while (precision-- > 0) {
			if (decexp < 0) {
				*buf++ = '0';
  180ec6:	8b 1c 24             	mov    (%esp),%ebx
  180ec9:	8b 44 24 48          	mov    0x48(%esp),%eax
  180ecd:	eb 23                	jmp    180ef2 <_to_float+0x332>
		} else
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
			if (decexp < 0) {
  180ecf:	85 ed                	test   %ebp,%ebp
  180ed1:	79 09                	jns    180edc <_to_float+0x31c>
				*buf++ = '0';
  180ed3:	c6 03 30             	movb   $0x30,(%ebx)
				decexp++;
  180ed6:	45                   	inc    %ebp
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
			if (decexp < 0) {
				*buf++ = '0';
  180ed7:	8d 5b 01             	lea    0x1(%ebx),%ebx
  180eda:	eb 14                	jmp    180ef0 <_to_float+0x330>
				decexp++;
			} else
				*buf++ = _get_digit(&fract, &digit_count);
  180edc:	8d 7b 01             	lea    0x1(%ebx),%edi
  180edf:	8d 54 24 20          	lea    0x20(%esp),%edx
  180ee3:	8d 44 24 18          	lea    0x18(%esp),%eax
  180ee7:	e8 87 fc ff ff       	call   180b73 <_get_digit>
  180eec:	88 03                	mov    %al,(%ebx)
  180eee:	89 fb                	mov    %edi,%ebx
  180ef0:	89 f0                	mov    %esi,%eax
			}
		} else
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
  180ef2:	8d 70 ff             	lea    -0x1(%eax),%esi
  180ef5:	85 c0                	test   %eax,%eax
  180ef7:	7f d6                	jg     180ecf <_to_float+0x30f>
  180ef9:	eb 61                	jmp    180f5c <_to_float+0x39c>
				decexp++;
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
  180efb:	8d 54 24 20          	lea    0x20(%esp),%edx
  180eff:	8d 44 24 18          	lea    0x18(%esp),%eax
  180f03:	e8 6b fc ff ff       	call   180b73 <_get_digit>
  180f08:	8b 3c 24             	mov    (%esp),%edi
  180f0b:	88 07                	mov    %al,(%edi)
		if (*buf++ != '0')
  180f0d:	8d 5f 01             	lea    0x1(%edi),%ebx
  180f10:	3c 30                	cmp    $0x30,%al
  180f12:	74 01                	je     180f15 <_to_float+0x355>
			decexp--;
  180f14:	4d                   	dec    %ebp
		if (falt || (precision > 0))
  180f15:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
  180f1a:	0f 95 c2             	setne  %dl
  180f1d:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
  180f22:	0f 9f c0             	setg   %al
  180f25:	08 c2                	or     %al,%dl
  180f27:	74 28                	je     180f51 <_to_float+0x391>
			*buf++ = '.';
  180f29:	8b 04 24             	mov    (%esp),%eax
  180f2c:	8d 58 02             	lea    0x2(%eax),%ebx
  180f2f:	c6 40 01 2e          	movb   $0x2e,0x1(%eax)
  180f33:	8b 44 24 48          	mov    0x48(%esp),%eax
  180f37:	eb 1c                	jmp    180f55 <_to_float+0x395>
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
  180f39:	8d 7b 01             	lea    0x1(%ebx),%edi
  180f3c:	8d 54 24 20          	lea    0x20(%esp),%edx
  180f40:	8d 44 24 18          	lea    0x18(%esp),%eax
  180f44:	e8 2a fc ff ff       	call   180b73 <_get_digit>
  180f49:	88 03                	mov    %al,(%ebx)
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0)
  180f4b:	89 f0                	mov    %esi,%eax
			*buf++ = _get_digit(&fract, &digit_count);
  180f4d:	89 fb                	mov    %edi,%ebx
  180f4f:	eb 04                	jmp    180f55 <_to_float+0x395>
  180f51:	8b 44 24 48          	mov    0x48(%esp),%eax
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0)
  180f55:	8d 70 ff             	lea    -0x1(%eax),%esi
  180f58:	85 c0                	test   %eax,%eax
  180f5a:	7f dd                	jg     180f39 <_to_float+0x379>
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
  180f5c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
  180f61:	74 14                	je     180f77 <_to_float+0x3b7>
  180f63:	eb 02                	jmp    180f67 <_to_float+0x3a7>
		while (*--buf == '0')
  180f65:	89 d3                	mov    %edx,%ebx
  180f67:	8d 53 ff             	lea    -0x1(%ebx),%edx
  180f6a:	8a 43 ff             	mov    -0x1(%ebx),%al
  180f6d:	3c 30                	cmp    $0x30,%al
  180f6f:	74 f4                	je     180f65 <_to_float+0x3a5>
			;
		if (*buf != '.')
  180f71:	3c 2e                	cmp    $0x2e,%al
  180f73:	75 02                	jne    180f77 <_to_float+0x3b7>
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
		while (*--buf == '0')
  180f75:	89 d3                	mov    %edx,%ebx
			;
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
  180f77:	83 7c 24 38 65       	cmpl   $0x65,0x38(%esp)
  180f7c:	0f 94 c2             	sete   %dl
  180f7f:	83 7c 24 38 45       	cmpl   $0x45,0x38(%esp)
  180f84:	0f 94 c0             	sete   %al
  180f87:	08 c2                	or     %al,%dl
  180f89:	74 75                	je     181000 <_to_float+0x440>
		*buf++ = (char) c;
  180f8b:	8a 44 24 38          	mov    0x38(%esp),%al
  180f8f:	88 03                	mov    %al,(%ebx)
		if (decexp < 0) {
  180f91:	85 ed                	test   %ebp,%ebp
  180f93:	79 0b                	jns    180fa0 <_to_float+0x3e0>
			decexp = -decexp;
  180f95:	f7 dd                	neg    %ebp
			*buf++ = '-';
  180f97:	8d 4b 02             	lea    0x2(%ebx),%ecx
  180f9a:	c6 43 01 2d          	movb   $0x2d,0x1(%ebx)
  180f9e:	eb 07                	jmp    180fa7 <_to_float+0x3e7>
		} else
			*buf++ = '+';
  180fa0:	8d 4b 02             	lea    0x2(%ebx),%ecx
  180fa3:	c6 43 01 2b          	movb   $0x2b,0x1(%ebx)
		*buf++ = (char) ((decexp / 100) + '0');
  180fa7:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  180fac:	89 e8                	mov    %ebp,%eax
  180fae:	f7 ea                	imul   %edx
  180fb0:	89 d0                	mov    %edx,%eax
  180fb2:	c1 f8 05             	sar    $0x5,%eax
  180fb5:	89 ea                	mov    %ebp,%edx
  180fb7:	c1 fa 1f             	sar    $0x1f,%edx
  180fba:	29 d0                	sub    %edx,%eax
  180fbc:	8d 50 30             	lea    0x30(%eax),%edx
  180fbf:	88 11                	mov    %dl,(%ecx)
		decexp %= 100;
  180fc1:	8d 04 80             	lea    (%eax,%eax,4),%eax
  180fc4:	8d 14 80             	lea    (%eax,%eax,4),%edx
  180fc7:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
  180fce:	89 eb                	mov    %ebp,%ebx
  180fd0:	29 c3                	sub    %eax,%ebx
		*buf++ = (char) ((decexp / 10) + '0');
  180fd2:	ba 67 66 66 66       	mov    $0x66666667,%edx
  180fd7:	89 d8                	mov    %ebx,%eax
  180fd9:	f7 ea                	imul   %edx
  180fdb:	89 d0                	mov    %edx,%eax
  180fdd:	c1 f8 02             	sar    $0x2,%eax
  180fe0:	89 da                	mov    %ebx,%edx
  180fe2:	c1 fa 1f             	sar    $0x1f,%edx
  180fe5:	29 d0                	sub    %edx,%eax
  180fe7:	8d 50 30             	lea    0x30(%eax),%edx
  180fea:	88 51 01             	mov    %dl,0x1(%ecx)
		decexp %= 10;
  180fed:	8d 14 80             	lea    (%eax,%eax,4),%edx
  180ff0:	8d 04 12             	lea    (%edx,%edx,1),%eax
  180ff3:	89 da                	mov    %ebx,%edx
  180ff5:	29 c2                	sub    %eax,%edx
		*buf++ = (char) (decexp + '0');
  180ff7:	8d 59 03             	lea    0x3(%ecx),%ebx
  180ffa:	83 c2 30             	add    $0x30,%edx
  180ffd:	88 51 02             	mov    %dl,0x2(%ecx)
	}
	*buf = 0;
  181000:	c6 03 00             	movb   $0x0,(%ebx)

	return buf - start;
  181003:	89 d8                	mov    %ebx,%eax
  181005:	2b 44 24 0c          	sub    0xc(%esp),%eax
}
  181009:	83 c4 24             	add    $0x24,%esp
  18100c:	5b                   	pop    %ebx
  18100d:	5e                   	pop    %esi
  18100e:	5f                   	pop    %edi
  18100f:	5d                   	pop    %ebp
  181010:	c3                   	ret    

00181011 <_atoi>:

static int _atoi(char **sptr)
{
  181011:	56                   	push   %esi
  181012:	53                   	push   %ebx
	register char *p;
	register int   i;

	i = 0;
	p = *sptr;
	p--;
  181013:	8b 18                	mov    (%eax),%ebx
  181015:	4b                   	dec    %ebx
static int _atoi(char **sptr)
{
	register char *p;
	register int   i;

	i = 0;
  181016:	be 00 00 00 00       	mov    $0x0,%esi
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
  18101b:	eb 0e                	jmp    18102b <_atoi+0x1a>
		i = 10 * i + *p++ - '0';
  18101d:	8d 34 b6             	lea    (%esi,%esi,4),%esi
  181020:	8d 0c 36             	lea    (%esi,%esi,1),%ecx
  181023:	43                   	inc    %ebx
  181024:	0f be d2             	movsbl %dl,%edx
  181027:	8d 74 11 d0          	lea    -0x30(%ecx,%edx,1),%esi
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
  18102b:	8a 13                	mov    (%ebx),%dl
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
  18102d:	0f be ca             	movsbl %dl,%ecx
  181030:	83 e9 30             	sub    $0x30,%ecx
  181033:	83 f9 09             	cmp    $0x9,%ecx
  181036:	76 e5                	jbe    18101d <_atoi+0xc>
		i = 10 * i + *p++ - '0';
	*sptr = p;
  181038:	89 18                	mov    %ebx,(%eax)
	return i;
}
  18103a:	89 f0                	mov    %esi,%eax
  18103c:	5b                   	pop    %ebx
  18103d:	5e                   	pop    %esi
  18103e:	c3                   	ret    

0018103f <_prf>:

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
  18103f:	55                   	push   %ebp
  181040:	57                   	push   %edi
  181041:	56                   	push   %esi
  181042:	53                   	push   %ebx
  181043:	81 ec f0 00 00 00    	sub    $0xf0,%esp
  181049:	89 c5                	mov    %eax,%ebp
  18104b:	89 14 24             	mov    %edx,(%esp)
  18104e:	89 4c 24 20          	mov    %ecx,0x20(%esp)
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
  181052:	bf 00 00 00 00       	mov    $0x0,%edi

	while ((c = *format++)) {
  181057:	e9 e0 05 00 00       	jmp    18163c <_prf+0x5fd>
		if (c != '%') {
  18105c:	83 f8 25             	cmp    $0x25,%eax
  18105f:	74 52                	je     1810b3 <_prf+0x74>
			if ((*func) (c, dest) == EOF) {
  181061:	8b 14 24             	mov    (%esp),%edx
  181064:	ff d5                	call   *%ebp
  181066:	83 f8 ff             	cmp    $0xffffffff,%eax
  181069:	0f 84 f4 05 00 00    	je     181663 <_prf+0x624>
				return EOF;
			}

			count++;
  18106f:	47                   	inc    %edi
  181070:	e9 c7 05 00 00       	jmp    18163c <_prf+0x5fd>
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
				switch (c) {
  181075:	80 fb 30             	cmp    $0x30,%bl
  181078:	77 5e                	ja     1810d8 <_prf+0x99>
  18107a:	0f b6 db             	movzbl %bl,%ebx
  18107d:	ff 24 9d 4c 46 18 00 	jmp    *0x18464c(,%ebx,4)
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
  181084:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  18108b:	00 
					break;
  18108c:	eb 4a                	jmp    1810d8 <_prf+0x99>

				case ' ':
					fspace = true;
  18108e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
  181095:	00 
					break;
  181096:	eb 40                	jmp    1810d8 <_prf+0x99>

				case '#':
					falt = true;
  181098:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  18109f:	00 
					break;
  1810a0:	eb 36                	jmp    1810d8 <_prf+0x99>

				case '0':
					pad = '0';
  1810a2:	c6 44 24 0b 30       	movb   $0x30,0xb(%esp)
					break;
  1810a7:	eb 2f                	jmp    1810d8 <_prf+0x99>
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
				switch (c) {
				case '-':
					fminus = true;
  1810a9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1810b0:	00 
  1810b1:	eb 25                	jmp    1810d8 <_prf+0x99>
  1810b3:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
  1810b8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  1810bf:	00 
  1810c0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1810c7:	00 
  1810c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1810cf:	00 
  1810d0:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  1810d7:	00 
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
  1810d8:	8b 44 24 20          	mov    0x20(%esp),%eax
  1810dc:	8d 50 01             	lea    0x1(%eax),%edx
  1810df:	89 54 24 20          	mov    %edx,0x20(%esp)
  1810e3:	8a 18                	mov    (%eax),%bl
  1810e5:	0f be f3             	movsbl %bl,%esi
  1810e8:	89 f2                	mov    %esi,%edx
  1810ea:	b8 40 46 18 00       	mov    $0x184640,%eax
  1810ef:	e8 c3 05 00 00       	call   1816b7 <strchr>
  1810f4:	85 c0                	test   %eax,%eax
  1810f6:	0f 85 79 ff ff ff    	jne    181075 <_prf+0x36>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
  1810fc:	83 fe 2a             	cmp    $0x2a,%esi
  1810ff:	75 37                	jne    181138 <_prf+0xf9>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
  181101:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181108:	8d 50 04             	lea    0x4(%eax),%edx
  18110b:	8b 00                	mov    (%eax),%eax
  18110d:	89 44 24 18          	mov    %eax,0x18(%esp)
				if (width < 0) {
  181111:	85 c0                	test   %eax,%eax
  181113:	79 0c                	jns    181121 <_prf+0xe2>
					fminus = true;
					width = -width;
  181115:	f7 5c 24 18          	negl   0x18(%esp)

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
				if (width < 0) {
					fminus = true;
  181119:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  181120:	00 
					width = -width;
				}
				c = *format++;
  181121:	8b 44 24 20          	mov    0x20(%esp),%eax
  181125:	8d 48 01             	lea    0x1(%eax),%ecx
  181128:	89 4c 24 20          	mov    %ecx,0x20(%esp)
  18112c:	0f be 30             	movsbl (%eax),%esi
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
  18112f:	89 94 24 04 01 00 00 	mov    %edx,0x104(%esp)
  181136:	eb 30                	jmp    181168 <_prf+0x129>
  181138:	0f be db             	movsbl %bl,%ebx
  18113b:	83 eb 30             	sub    $0x30,%ebx
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
			} else if (!isdigit(c))
  18113e:	83 fb 09             	cmp    $0x9,%ebx
  181141:	77 1d                	ja     181160 <_prf+0x121>
				width = 0;
			else {
				width = _atoi(&format);	/* Find width */
  181143:	8d 44 24 20          	lea    0x20(%esp),%eax
  181147:	e8 c5 fe ff ff       	call   181011 <_atoi>
  18114c:	89 44 24 18          	mov    %eax,0x18(%esp)
				c = *format++;
  181150:	8b 44 24 20          	mov    0x20(%esp),%eax
  181154:	8d 50 01             	lea    0x1(%eax),%edx
  181157:	89 54 24 20          	mov    %edx,0x20(%esp)
  18115b:	0f be 30             	movsbl (%eax),%esi
  18115e:	eb 08                	jmp    181168 <_prf+0x129>
					fminus = true;
					width = -width;
				}
				c = *format++;
			} else if (!isdigit(c))
				width = 0;
  181160:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
  181167:	00 
			 * If <width> is INT_MIN, then its absolute value can
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
  181168:	81 7c 24 18 c8 00 00 	cmpl   $0xc8,0x18(%esp)
  18116f:	00 
  181170:	76 08                	jbe    18117a <_prf+0x13b>
				width = MAXFLD;
  181172:	c7 44 24 18 c8 00 00 	movl   $0xc8,0x18(%esp)
  181179:	00 
			}

			if (c == '.') {
  18117a:	83 fe 2e             	cmp    $0x2e,%esi
  18117d:	75 5f                	jne    1811de <_prf+0x19f>
				c = *format++;
  18117f:	8b 44 24 20          	mov    0x20(%esp),%eax
  181183:	8d 50 01             	lea    0x1(%eax),%edx
  181186:	89 54 24 20          	mov    %edx,0x20(%esp)
				if (c == '*') {
  18118a:	80 38 2a             	cmpb   $0x2a,(%eax)
  18118d:	75 20                	jne    1811af <_prf+0x170>
					precision = (int32_t)
  18118f:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181196:	8b 00                	mov    (%eax),%eax
  181198:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  18119c:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  1811a3:	8d 40 04             	lea    0x4(%eax),%eax
  1811a6:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
  1811ad:	eb 0d                	jmp    1811bc <_prf+0x17d>
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);
  1811af:	8d 44 24 20          	lea    0x20(%esp),%eax
  1811b3:	e8 59 fe ff ff       	call   181011 <_atoi>
  1811b8:	89 44 24 1c          	mov    %eax,0x1c(%esp)

				if (precision > MAXFLD)
  1811bc:	81 7c 24 1c c8 00 00 	cmpl   $0xc8,0x1c(%esp)
  1811c3:	00 
  1811c4:	7e 08                	jle    1811ce <_prf+0x18f>
					precision = -1;
  1811c6:	c7 44 24 1c ff ff ff 	movl   $0xffffffff,0x1c(%esp)
  1811cd:	ff 
				c = *format++;
  1811ce:	8b 44 24 20          	mov    0x20(%esp),%eax
  1811d2:	8d 50 01             	lea    0x1(%eax),%edx
  1811d5:	89 54 24 20          	mov    %edx,0x20(%esp)
  1811d9:	0f be 30             	movsbl (%eax),%esi
  1811dc:	eb 08                	jmp    1811e6 <_prf+0x1a7>
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
  1811de:	c7 44 24 1c ff ff ff 	movl   $0xffffffff,0x1c(%esp)
  1811e5:	ff 
			 *    L: long double
			 *    z: size_t or ssize_t
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
  1811e6:	89 f2                	mov    %esi,%edx
  1811e8:	b8 46 46 18 00       	mov    $0x184646,%eax
  1811ed:	e8 c5 04 00 00       	call   1816b7 <strchr>
  1811f2:	85 c0                	test   %eax,%eax
  1811f4:	74 0e                	je     181204 <_prf+0x1c5>
				i = c;
				c = *format++;
  1811f6:	8b 44 24 20          	mov    0x20(%esp),%eax
  1811fa:	8d 50 01             	lea    0x1(%eax),%edx
  1811fd:	89 54 24 20          	mov    %edx,0x20(%esp)
  181201:	0f be 30             	movsbl (%eax),%esi
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
  181204:	83 fe 78             	cmp    $0x78,%esi
  181207:	0f 87 e3 02 00 00    	ja     1814f0 <_prf+0x4b1>
  18120d:	ff 24 b5 10 47 18 00 	jmp    *0x184710(,%esi,4)
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
  181214:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  18121b:	8b 00                	mov    (%eax),%eax
  18121d:	88 44 24 27          	mov    %al,0x27(%esp)
				buf[1] = '\0';
  181221:	c6 44 24 28 00       	movb   $0x0,0x28(%esp)

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
  181226:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  18122d:	8d 40 04             	lea    0x4(%eax),%eax
  181230:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181237:	bb 00 00 00 00       	mov    $0x0,%ebx
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
				need_justifying = true;
  18123c:	b8 01 00 00 00       	mov    $0x1,%eax
				c = 1;
  181241:	be 01 00 00 00       	mov    $0x1,%esi
				break;
  181246:	e9 67 03 00 00       	jmp    1815b2 <_prf+0x573>

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
  18124b:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181252:	83 c0 04             	add    $0x4,%eax
  181255:	89 44 24 14          	mov    %eax,0x14(%esp)
  181259:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181260:	8b 18                	mov    (%eax),%ebx
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
  181262:	ff 74 24 1c          	pushl  0x1c(%esp)
  181266:	ff 74 24 14          	pushl  0x14(%esp)
  18126a:	8b 4c 24 14          	mov    0x14(%esp),%ecx
  18126e:	89 da                	mov    %ebx,%edx
  181270:	8d 44 24 2f          	lea    0x2f(%esp),%eax
  181274:	e8 e2 f7 ff ff       	call   180a5b <_to_dec>
  181279:	83 c4 08             	add    $0x8,%esp
  18127c:	89 c6                	mov    %eax,%esi
				if (fplus || fspace || (int32_temp < 0))
  18127e:	8b 44 24 0c          	mov    0xc(%esp),%eax
  181282:	0b 44 24 10          	or     0x10(%esp),%eax
  181286:	75 0b                	jne    181293 <_prf+0x254>
  181288:	85 db                	test   %ebx,%ebx
  18128a:	78 0e                	js     18129a <_prf+0x25b>
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  18128c:	bb 00 00 00 00       	mov    $0x0,%ebx
  181291:	eb 0c                	jmp    18129f <_prf+0x260>
			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
  181293:	bb 01 00 00 00       	mov    $0x1,%ebx
  181298:	eb 05                	jmp    18129f <_prf+0x260>
  18129a:	bb 01 00 00 00       	mov    $0x1,%ebx
				need_justifying = true;
				if (precision != -1)
  18129f:	83 7c 24 1c ff       	cmpl   $0xffffffff,0x1c(%esp)
  1812a4:	0f 85 55 02 00 00    	jne    1814ff <_prf+0x4c0>
				c = 1;
				break;

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
  1812aa:	8b 44 24 14          	mov    0x14(%esp),%eax
  1812ae:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
  1812b5:	b8 01 00 00 00       	mov    $0x1,%eax
  1812ba:	e9 f3 02 00 00       	jmp    1815b2 <_prf+0x573>
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
  1812bf:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  1812c6:	8d 58 08             	lea    0x8(%eax),%ebx
  1812c9:	8b 10                	mov    (%eax),%edx
  1812cb:	8b 48 04             	mov    0x4(%eax),%ecx
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
  1812ce:	ff 74 24 1c          	pushl  0x1c(%esp)
  1812d2:	ff 74 24 14          	pushl  0x14(%esp)
  1812d6:	ff 74 24 14          	pushl  0x14(%esp)
  1812da:	ff 74 24 20          	pushl  0x20(%esp)
  1812de:	56                   	push   %esi
  1812df:	8d 44 24 3b          	lea    0x3b(%esp),%eax
  1812e3:	e8 d8 f8 ff ff       	call   180bc0 <_to_float>
  1812e8:	83 c4 14             	add    $0x14,%esp
  1812eb:	89 c6                	mov    %eax,%esi
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
  1812ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1812f1:	0b 44 24 10          	or     0x10(%esp),%eax
  1812f5:	0f 85 1e 02 00 00    	jne    181519 <_prf+0x4da>
  1812fb:	80 7c 24 27 2d       	cmpb   $0x2d,0x27(%esp)
  181300:	0f 84 29 02 00 00    	je     18152f <_prf+0x4f0>
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
  181306:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  18130d:	bb 00 00 00 00       	mov    $0x0,%ebx

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
				need_justifying = true;
  181312:	b8 01 00 00 00       	mov    $0x1,%eax
  181317:	e9 96 02 00 00       	jmp    1815b2 <_prf+0x573>
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
  18131c:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181323:	8b 00                	mov    (%eax),%eax
				*int32ptr_temp = count;
  181325:	89 38                	mov    %edi,(%eax)
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
  181327:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  18132e:	8d 40 04             	lea    0x4(%eax),%eax
  181331:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181338:	bb 00 00 00 00       	mov    $0x0,%ebx
				 * current form, it was being
				 * optimized out.
				 */
			}

			need_justifying = false;
  18133d:	b8 00 00 00 00       	mov    $0x0,%eax
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;
  181342:	e9 6b 02 00 00       	jmp    1815b2 <_prf+0x573>

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181347:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  18134e:	8d 58 04             	lea    0x4(%eax),%ebx
  181351:	8b 10                	mov    (%eax),%edx
				c = _to_octal(buf, uint32_temp, falt, precision);
  181353:	ff 74 24 1c          	pushl  0x1c(%esp)
  181357:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  18135b:	8d 44 24 2b          	lea    0x2b(%esp),%eax
  18135f:	e8 b1 f6 ff ff       	call   180a15 <_to_octal>
  181364:	83 c4 04             	add    $0x4,%esp
  181367:	89 c6                	mov    %eax,%esi
				need_justifying = true;
				if (precision != -1)
  181369:	83 7c 24 1c ff       	cmpl   $0xffffffff,0x1c(%esp)
  18136e:	0f 85 ce 01 00 00    	jne    181542 <_prf+0x503>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181374:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  18137b:	bb 00 00 00 00       	mov    $0x0,%ebx
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
  181380:	b8 01 00 00 00       	mov    $0x1,%eax
  181385:	e9 28 02 00 00       	jmp    1815b2 <_prf+0x573>
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  18138a:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181391:	8d 58 04             	lea    0x4(%eax),%ebx
  181394:	8b 10                	mov    (%eax),%edx
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
  181396:	6a 78                	push   $0x78
  181398:	6a 08                	push   $0x8
  18139a:	b9 01 00 00 00       	mov    $0x1,%ecx
  18139f:	8d 44 24 2f          	lea    0x2f(%esp),%eax
  1813a3:	e8 2a f6 ff ff       	call   1809d2 <_to_hex>
  1813a8:	83 c4 08             	add    $0x8,%esp
  1813ab:	89 c6                	mov    %eax,%esi
				need_justifying = true;
				if (precision != -1)
  1813ad:	83 7c 24 1c ff       	cmpl   $0xffffffff,0x1c(%esp)
  1813b2:	0f 85 a2 01 00 00    	jne    18155a <_prf+0x51b>
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  1813b8:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  1813bf:	bb 00 00 00 00       	mov    $0x0,%ebx
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
  1813c4:	b8 01 00 00 00       	mov    $0x1,%eax
  1813c9:	e9 e4 01 00 00       	jmp    1815b2 <_prf+0x573>
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
  1813ce:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  1813d5:	8d 58 04             	lea    0x4(%eax),%ebx
  1813d8:	8b 10                	mov    (%eax),%edx
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
  1813da:	be 00 00 00 00       	mov    $0x0,%esi
  1813df:	eb 07                	jmp    1813e8 <_prf+0x3a9>
					if (cptr_temp[c] == '\0') {
  1813e1:	80 3c 32 00          	cmpb   $0x0,(%edx,%esi,1)
  1813e5:	74 09                	je     1813f0 <_prf+0x3b1>
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
  1813e7:	46                   	inc    %esi
  1813e8:	81 fe c7 00 00 00    	cmp    $0xc7,%esi
  1813ee:	7e f1                	jle    1813e1 <_prf+0x3a2>
					if (cptr_temp[c] == '\0') {
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
  1813f0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  1813f4:	89 c8                	mov    %ecx,%eax
  1813f6:	f7 d0                	not    %eax
  1813f8:	c1 e8 1f             	shr    $0x1f,%eax
  1813fb:	39 ce                	cmp    %ecx,%esi
  1813fd:	0f 9f c1             	setg   %cl
  181400:	84 c1                	test   %al,%cl
  181402:	74 04                	je     181408 <_prf+0x3c9>
					c = precision;
  181404:	8b 74 24 1c          	mov    0x1c(%esp),%esi
				if (c > 0) {
  181408:	85 f6                	test   %esi,%esi
  18140a:	0f 8e 62 01 00 00    	jle    181572 <_prf+0x533>
					memcpy(buf, cptr_temp, (size_t) c);
  181410:	89 f1                	mov    %esi,%ecx
  181412:	8d 44 24 27          	lea    0x27(%esp),%eax
  181416:	e8 ff 02 00 00       	call   18171a <memcpy>
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
  18141b:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181422:	bb 00 00 00 00       	mov    $0x0,%ebx
				}
				if ((precision >= 0) && (precision < c))
					c = precision;
				if (c > 0) {
					memcpy(buf, cptr_temp, (size_t) c);
					need_justifying = true;
  181427:	b8 01 00 00 00       	mov    $0x1,%eax
  18142c:	e9 81 01 00 00       	jmp    1815b2 <_prf+0x573>
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181431:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181438:	8d 58 04             	lea    0x4(%eax),%ebx
  18143b:	8b 10                	mov    (%eax),%edx
				c = _to_udec(buf, uint32_temp, precision);
  18143d:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  181441:	8d 44 24 27          	lea    0x27(%esp),%eax
  181445:	e8 02 f6 ff ff       	call   180a4c <_to_udec>
  18144a:	89 c6                	mov    %eax,%esi
				need_justifying = true;
				if (precision != -1)
  18144c:	83 7c 24 1c ff       	cmpl   $0xffffffff,0x1c(%esp)
  181451:	0f 85 2e 01 00 00    	jne    181585 <_prf+0x546>
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181457:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  18145e:	bb 00 00 00 00       	mov    $0x0,%ebx
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
  181463:	b8 01 00 00 00       	mov    $0x1,%eax
  181468:	e9 45 01 00 00       	jmp    1815b2 <_prf+0x573>
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  18146d:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181474:	83 c0 04             	add    $0x4,%eax
  181477:	89 44 24 0c          	mov    %eax,0xc(%esp)
  18147b:	8b 84 24 04 01 00 00 	mov    0x104(%esp),%eax
  181482:	8b 10                	mov    (%eax),%edx
				c = _to_hex(buf, uint32_temp, falt, precision, c);
  181484:	56                   	push   %esi
  181485:	ff 74 24 20          	pushl  0x20(%esp)
  181489:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  18148d:	89 d9                	mov    %ebx,%ecx
  18148f:	8d 44 24 2f          	lea    0x2f(%esp),%eax
  181493:	e8 3a f5 ff ff       	call   1809d2 <_to_hex>
  181498:	83 c4 08             	add    $0x8,%esp
  18149b:	89 c6                	mov    %eax,%esi
				if (falt)
  18149d:	85 db                	test   %ebx,%ebx
  18149f:	75 07                	jne    1814a8 <_prf+0x469>
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  1814a1:	bb 00 00 00 00       	mov    $0x0,%ebx
  1814a6:	eb 05                	jmp    1814ad <_prf+0x46e>
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
  1814a8:	bb 02 00 00 00       	mov    $0x2,%ebx
				need_justifying = true;
				if (precision != -1)
  1814ad:	83 7c 24 1c ff       	cmpl   $0xffffffff,0x1c(%esp)
  1814b2:	0f 85 e5 00 00 00    	jne    18159d <_prf+0x55e>
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  1814b8:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1814bc:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
  1814c3:	b8 01 00 00 00       	mov    $0x1,%eax
  1814c8:	e9 e5 00 00 00       	jmp    1815b2 <_prf+0x573>
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
  1814cd:	8b 14 24             	mov    (%esp),%edx
  1814d0:	b8 25 00 00 00       	mov    $0x25,%eax
  1814d5:	ff d5                	call   *%ebp
  1814d7:	83 f8 ff             	cmp    $0xffffffff,%eax
  1814da:	0f 84 83 01 00 00    	je     181663 <_prf+0x624>
					return EOF;
				}

				count++;
  1814e0:	47                   	inc    %edi
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  1814e1:	bb 00 00 00 00       	mov    $0x0,%ebx
				 * current form, it was being
				 * optimized out.
				 */
			}

			need_justifying = false;
  1814e6:	b8 00 00 00 00       	mov    $0x0,%eax
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
				break;
  1814eb:	e9 c2 00 00 00       	jmp    1815b2 <_prf+0x573>
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  1814f0:	bb 00 00 00 00       	mov    $0x0,%ebx
				 * current form, it was being
				 * optimized out.
				 */
			}

			need_justifying = false;
  1814f5:	b8 00 00 00 00       	mov    $0x0,%eax
  1814fa:	e9 b3 00 00 00       	jmp    1815b2 <_prf+0x573>
				c = 1;
				break;

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
  1814ff:	8b 44 24 14          	mov    0x14(%esp),%eax
  181503:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
  18150a:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
  18150f:	b8 01 00 00 00       	mov    $0x1,%eax
  181514:	e9 99 00 00 00       	jmp    1815b2 <_prf+0x573>
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
  181519:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
  181520:	bb 01 00 00 00       	mov    $0x1,%ebx
				need_justifying = true;
  181525:	b8 01 00 00 00       	mov    $0x1,%eax
  18152a:	e9 83 00 00 00       	jmp    1815b2 <_prf+0x573>
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
  18152f:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
  181536:	bb 01 00 00 00       	mov    $0x1,%ebx
				need_justifying = true;
  18153b:	b8 01 00 00 00       	mov    $0x1,%eax
  181540:	eb 70                	jmp    1815b2 <_prf+0x573>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181542:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181549:	bb 00 00 00 00       	mov    $0x0,%ebx
			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
  18154e:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
  181553:	b8 01 00 00 00       	mov    $0x1,%eax
  181558:	eb 58                	jmp    1815b2 <_prf+0x573>
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  18155a:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181561:	bb 00 00 00 00       	mov    $0x0,%ebx
			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
  181566:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
  18156b:	b8 01 00 00 00       	mov    $0x1,%eax
  181570:	eb 40                	jmp    1815b2 <_prf+0x573>
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
  181572:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  181579:	bb 00 00 00 00       	mov    $0x0,%ebx
				 * current form, it was being
				 * optimized out.
				 */
			}

			need_justifying = false;
  18157e:	b8 00 00 00 00       	mov    $0x0,%eax
  181583:	eb 2d                	jmp    1815b2 <_prf+0x573>
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  181585:	89 9c 24 04 01 00 00 	mov    %ebx,0x104(%esp)
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
  18158c:	bb 00 00 00 00       	mov    $0x0,%ebx
			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
  181591:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
  181596:	b8 01 00 00 00       	mov    $0x1,%eax
  18159b:	eb 15                	jmp    1815b2 <_prf+0x573>
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
  18159d:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1815a1:	89 84 24 04 01 00 00 	mov    %eax,0x104(%esp)
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
  1815a8:	c6 44 24 0b 20       	movb   $0x20,0xb(%esp)
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
  1815ad:	b8 01 00 00 00       	mov    $0x1,%eax

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
  1815b2:	81 fe c8 00 00 00    	cmp    $0xc8,%esi
  1815b8:	0f 8f a0 00 00 00    	jg     18165e <_prf+0x61f>
				return EOF;

			if (need_justifying) {
  1815be:	85 c0                	test   %eax,%eax
  1815c0:	74 7a                	je     18163c <_prf+0x5fd>
				if (c < width) {
  1815c2:	3b 74 24 18          	cmp    0x18(%esp),%esi
  1815c6:	7d 5a                	jge    181622 <_prf+0x5e3>
					if (fminus)	{
  1815c8:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
  1815cd:	75 0a                	jne    1815d9 <_prf+0x59a>
  1815cf:	eb 16                	jmp    1815e7 <_prf+0x5a8>
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
  1815d1:	c6 44 34 27 20       	movb   $0x20,0x27(%esp,%esi,1)

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
  1815d6:	46                   	inc    %esi
  1815d7:	eb 04                	jmp    1815dd <_prf+0x59e>
  1815d9:	8b 44 24 18          	mov    0x18(%esp),%eax
  1815dd:	39 c6                	cmp    %eax,%esi
  1815df:	7c f0                	jl     1815d1 <_prf+0x592>
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
							buf[i] = pad;
					}
					c = width;
  1815e1:	8b 74 24 18          	mov    0x18(%esp),%esi
  1815e5:	eb 3b                	jmp    181622 <_prf+0x5e3>
						for (i = c; i < width; i++)
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
  1815e7:	8d 4e 01             	lea    0x1(%esi),%ecx
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
  1815ea:	8b 44 24 18          	mov    0x18(%esp),%eax
  1815ee:	29 f0                	sub    %esi,%eax
  1815f0:	89 c6                	mov    %eax,%esi
  1815f2:	8d 44 24 27          	lea    0x27(%esp),%eax
  1815f6:	01 f0                	add    %esi,%eax
  1815f8:	8d 54 24 27          	lea    0x27(%esp),%edx
  1815fc:	e8 ec 00 00 00       	call   1816ed <memmove>
										+ 1));
						if (pad == ' ')
  181601:	80 7c 24 0b 20       	cmpb   $0x20,0xb(%esp)
  181606:	75 05                	jne    18160d <_prf+0x5ce>
							prefix = 0;
  181608:	bb 00 00 00 00       	mov    $0x0,%ebx
						c = width - c + prefix;
  18160d:	01 de                	add    %ebx,%esi
  18160f:	8a 44 24 0b          	mov    0xb(%esp),%al
						for (i = prefix; i < c; i++)
  181613:	eb 05                	jmp    18161a <_prf+0x5db>
							buf[i] = pad;
  181615:	88 44 1c 27          	mov    %al,0x27(%esp,%ebx,1)
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
  181619:	43                   	inc    %ebx
  18161a:	39 f3                	cmp    %esi,%ebx
  18161c:	7c f7                	jl     181615 <_prf+0x5d6>
							buf[i] = pad;
					}
					c = width;
  18161e:	8b 74 24 18          	mov    0x18(%esp),%esi
  181622:	8d 5c 24 27          	lea    0x27(%esp),%ebx
  181626:	eb 10                	jmp    181638 <_prf+0x5f9>
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
  181628:	0f be 03             	movsbl (%ebx),%eax
  18162b:	8b 14 24             	mov    (%esp),%edx
  18162e:	ff d5                	call   *%ebp
  181630:	83 f8 ff             	cmp    $0xffffffff,%eax
  181633:	74 2e                	je     181663 <_prf+0x624>
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
  181635:	4e                   	dec    %esi
  181636:	43                   	inc    %ebx
  181637:	47                   	inc    %edi
  181638:	85 f6                	test   %esi,%esi
  18163a:	7f ec                	jg     181628 <_prf+0x5e9>
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
  18163c:	8b 44 24 20          	mov    0x20(%esp),%eax
  181640:	8d 50 01             	lea    0x1(%eax),%edx
  181643:	89 54 24 20          	mov    %edx,0x20(%esp)
  181647:	0f be 00             	movsbl (%eax),%eax
  18164a:	85 c0                	test   %eax,%eax
  18164c:	0f 85 0a fa ff ff    	jne    18105c <_prf+0x1d>
						return EOF;
				}
			}
		}
	}
	return count;
  181652:	89 f8                	mov    %edi,%eax
  181654:	eb 0d                	jmp    181663 <_prf+0x624>
				case '0':
					pad = '0';
					break;

				case '\0':
					return count;
  181656:	89 f8                	mov    %edi,%eax
  181658:	eb 09                	jmp    181663 <_prf+0x624>

				count++;
				break;

			case 0:
				return count;
  18165a:	89 f8                	mov    %edi,%eax
  18165c:	eb 05                	jmp    181663 <_prf+0x624>
			}

			if (c >= MAXFLD + 1)
				return EOF;
  18165e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
				}
			}
		}
	}
	return count;
}
  181663:	81 c4 f0 00 00 00    	add    $0xf0,%esp
  181669:	5b                   	pop    %ebx
  18166a:	5e                   	pop    %esi
  18166b:	5f                   	pop    %edi
  18166c:	5d                   	pop    %ebp
  18166d:	c3                   	ret    

0018166e <sprintf_out>:
	int len;
};

static int sprintf_out(int c, struct emitter *p)
{
	if (p->len > 1) { /* need to reserve a byte for EOS */
  18166e:	83 7a 04 01          	cmpl   $0x1,0x4(%edx)
  181672:	7e 09                	jle    18167d <sprintf_out+0xf>
		*(p->ptr) = c;
  181674:	8b 0a                	mov    (%edx),%ecx
  181676:	88 01                	mov    %al,(%ecx)
		p->ptr += 1;
  181678:	ff 02                	incl   (%edx)
		p->len -= 1;
  18167a:	ff 4a 04             	decl   0x4(%edx)
	}
	return 0; /* indicate keep going so we get the total count */
}
  18167d:	b8 00 00 00 00       	mov    $0x0,%eax
  181682:	c3                   	ret    

00181683 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
  181683:	83 ec 08             	sub    $0x8,%esp
	va_list vargs;

	struct emitter p;
	int     r;

	p.ptr = s;
  181686:	8b 44 24 0c          	mov    0xc(%esp),%eax
  18168a:	89 04 24             	mov    %eax,(%esp)
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
  18168d:	c7 44 24 04 ff ff ff 	movl   $0x7fffffff,0x4(%esp)
  181694:	7f 

	va_start(vargs, format);
  181695:	8d 44 24 14          	lea    0x14(%esp),%eax
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
  181699:	50                   	push   %eax
  18169a:	8b 4c 24 14          	mov    0x14(%esp),%ecx
  18169e:	8d 54 24 04          	lea    0x4(%esp),%edx
  1816a2:	b8 6e 16 18 00       	mov    $0x18166e,%eax
  1816a7:	e8 93 f9 ff ff       	call   18103f <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
  1816ac:	8b 54 24 04          	mov    0x4(%esp),%edx
  1816b0:	c6 02 00             	movb   $0x0,(%edx)
	return r;
}
  1816b3:	83 c4 0c             	add    $0xc,%esp
  1816b6:	c3                   	ret    

001816b7 <strchr>:
 *
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
  1816b7:	53                   	push   %ebx
	char tmp = (char) c;
  1816b8:	88 d3                	mov    %dl,%bl

	while ((*s != tmp) && (*s != '\0'))
  1816ba:	eb 01                	jmp    1816bd <strchr+0x6>
		s++;
  1816bc:	40                   	inc    %eax

char *strchr(const char *s, int c)
{
	char tmp = (char) c;

	while ((*s != tmp) && (*s != '\0'))
  1816bd:	8a 08                	mov    (%eax),%cl
  1816bf:	38 cb                	cmp    %cl,%bl
  1816c1:	74 04                	je     1816c7 <strchr+0x10>
  1816c3:	84 c9                	test   %cl,%cl
  1816c5:	75 f5                	jne    1816bc <strchr+0x5>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
  1816c7:	38 ca                	cmp    %cl,%dl
  1816c9:	74 05                	je     1816d0 <strchr+0x19>
  1816cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1816d0:	5b                   	pop    %ebx
  1816d1:	c3                   	ret    

001816d2 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
  1816d2:	53                   	push   %ebx
	while ((*s1 == *s2) && (*s1 != '\0')) {
  1816d3:	eb 02                	jmp    1816d7 <strcmp+0x5>
		s1++;
  1816d5:	40                   	inc    %eax
		s2++;
  1816d6:	42                   	inc    %edx
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
  1816d7:	8a 08                	mov    (%eax),%cl
  1816d9:	8a 1a                	mov    (%edx),%bl
  1816db:	38 d9                	cmp    %bl,%cl
  1816dd:	75 04                	jne    1816e3 <strcmp+0x11>
  1816df:	84 c9                	test   %cl,%cl
  1816e1:	75 f2                	jne    1816d5 <strcmp+0x3>
		s1++;
		s2++;
	}

	return *s1 - *s2;
  1816e3:	0f be c1             	movsbl %cl,%eax
  1816e6:	0f be db             	movsbl %bl,%ebx
  1816e9:	29 d8                	sub    %ebx,%eax
}
  1816eb:	5b                   	pop    %ebx
  1816ec:	c3                   	ret    

001816ed <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
  1816ed:	56                   	push   %esi
  1816ee:	53                   	push   %ebx
  1816ef:	89 c6                	mov    %eax,%esi
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
  1816f1:	89 c3                	mov    %eax,%ebx
  1816f3:	29 d3                	sub    %edx,%ebx
  1816f5:	39 cb                	cmp    %ecx,%ebx
  1816f7:	72 0b                	jb     181704 <memmove+0x17>
  1816f9:	89 c3                	mov    %eax,%ebx
  1816fb:	eb 14                	jmp    181711 <memmove+0x24>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
  1816fd:	49                   	dec    %ecx
			dest[n] = src[n];
  1816fe:	8a 1c 0a             	mov    (%edx,%ecx,1),%bl
  181701:	88 1c 0e             	mov    %bl,(%esi,%ecx,1)
		/*
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
  181704:	85 c9                	test   %ecx,%ecx
  181706:	75 f5                	jne    1816fd <memmove+0x10>
  181708:	eb 0b                	jmp    181715 <memmove+0x28>
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
  18170a:	8a 02                	mov    (%edx),%al
  18170c:	88 03                	mov    %al,(%ebx)
			dest++;
  18170e:	43                   	inc    %ebx
			src++;
  18170f:	42                   	inc    %edx
			n--;
  181710:	49                   	dec    %ecx
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
  181711:	85 c9                	test   %ecx,%ecx
  181713:	75 f5                	jne    18170a <memmove+0x1d>
			n--;
		}
	}

	return d;
}
  181715:	89 f0                	mov    %esi,%eax
  181717:	5b                   	pop    %ebx
  181718:	5e                   	pop    %esi
  181719:	c3                   	ret    

0018171a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
  18171a:	56                   	push   %esi
  18171b:	53                   	push   %ebx
  18171c:	89 c6                	mov    %eax,%esi
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
  18171e:	89 c3                	mov    %eax,%ebx
  181720:	31 d3                	xor    %edx,%ebx
  181722:	f6 c3 03             	test   $0x3,%bl
  181725:	74 15                	je     18173c <memcpy+0x22>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
  181727:	89 c3                	mov    %eax,%ebx
  181729:	eb 39                	jmp    181764 <memcpy+0x4a>
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
  18172b:	85 c9                	test   %ecx,%ecx
  18172d:	74 39                	je     181768 <memcpy+0x4e>
				return d;
			}
			*(d_byte++) = *(s_byte++);
  18172f:	8a 02                	mov    (%edx),%al
  181731:	88 03                	mov    %al,(%ebx)
			n--;
  181733:	49                   	dec    %ecx

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
  181734:	8d 52 01             	lea    0x1(%edx),%edx
  181737:	8d 5b 01             	lea    0x1(%ebx),%ebx
  18173a:	eb 02                	jmp    18173e <memcpy+0x24>
  18173c:	89 c3                	mov    %eax,%ebx

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
  18173e:	f6 c3 03             	test   $0x3,%bl
  181741:	75 e8                	jne    18172b <memcpy+0x11>
  181743:	eb 0d                	jmp    181752 <memcpy+0x38>

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
			*(d_word++) = *(s_word++);
  181745:	8b 02                	mov    (%edx),%eax
  181747:	89 03                	mov    %eax,(%ebx)
			n -= sizeof(unsigned int);
  181749:	83 e9 04             	sub    $0x4,%ecx

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
			*(d_word++) = *(s_word++);
  18174c:	8d 52 04             	lea    0x4(%edx),%edx
  18174f:	8d 5b 04             	lea    0x4(%ebx),%ebx
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
  181752:	83 f9 03             	cmp    $0x3,%ecx
  181755:	77 ee                	ja     181745 <memcpy+0x2b>
  181757:	eb 0b                	jmp    181764 <memcpy+0x4a>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
  181759:	8a 02                	mov    (%edx),%al
  18175b:	88 03                	mov    %al,(%ebx)
		n--;
  18175d:	49                   	dec    %ecx
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
  18175e:	8d 52 01             	lea    0x1(%edx),%edx
  181761:	8d 5b 01             	lea    0x1(%ebx),%ebx
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
  181764:	85 c9                	test   %ecx,%ecx
  181766:	75 f1                	jne    181759 <memcpy+0x3f>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
  181768:	89 f0                	mov    %esi,%eax
  18176a:	5b                   	pop    %ebx
  18176b:	5e                   	pop    %esi
  18176c:	c3                   	ret    

0018176d <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
  18176d:	b8 00 00 00 00       	mov    $0x0,%eax
  181772:	c3                   	ret    

00181773 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
  181773:	8b 0a                	mov    (%edx),%ecx
  181775:	41                   	inc    %ecx
  181776:	89 0a                	mov    %ecx,(%edx)
	return _char_out(c);
  181778:	ff 15 10 00 28 00    	call   *0x280010
}
  18177e:	c3                   	ret    

0018177f <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
  18177f:	55                   	push   %ebp
  181780:	57                   	push   %edi
  181781:	56                   	push   %esi
  181782:	53                   	push   %ebx
  181783:	83 ec 08             	sub    $0x8,%esp
  181786:	89 c5                	mov    %eax,%ebp
  181788:	89 14 24             	mov    %edx,(%esp)
  18178b:	89 cf                	mov    %ecx,%edi
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
  18178d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  181794:	00 
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
  181795:	bb 00 00 00 00       	mov    $0x0,%ebx
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
  18179a:	ba 08 00 00 00       	mov    $0x8,%edx
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
  18179f:	eb 65                	jmp    181806 <_printk_hex_ulong+0x87>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
  1817a1:	8d 72 ff             	lea    -0x1(%edx),%esi
  1817a4:	8d 0c b5 00 00 00 00 	lea    0x0(,%esi,4),%ecx
  1817ab:	89 f8                	mov    %edi,%eax
  1817ad:	d3 e8                	shr    %cl,%eax

		if (nibble || found_largest_digit || size == 1) {
  1817af:	83 e0 0f             	and    $0xf,%eax
  1817b2:	0f 95 c1             	setne  %cl
  1817b5:	08 d9                	or     %bl,%cl
  1817b7:	75 05                	jne    1817be <_printk_hex_ulong+0x3f>
  1817b9:	83 fa 01             	cmp    $0x1,%edx
  1817bc:	75 1b                	jne    1817d9 <_printk_hex_ulong+0x5a>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
  1817be:	3c 09                	cmp    $0x9,%al
  1817c0:	7e 04                	jle    1817c6 <_printk_hex_ulong+0x47>
  1817c2:	b2 57                	mov    $0x57,%dl
  1817c4:	eb 02                	jmp    1817c8 <_printk_hex_ulong+0x49>
  1817c6:	b2 30                	mov    $0x30,%dl
  1817c8:	01 d0                	add    %edx,%eax
			out((int)nibble, ctx);
  1817ca:	0f be c0             	movsbl %al,%eax
  1817cd:	8b 14 24             	mov    (%esp),%edx
  1817d0:	ff d5                	call   *%ebp

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
  1817d2:	bb 01 00 00 00       	mov    $0x1,%ebx
			nibble += nibble > 9 ? 87 : 48;
			out((int)nibble, ctx);
			continue;
  1817d7:	eb 2b                	jmp    181804 <_printk_hex_ulong+0x85>
		}

		if (remaining-- <= min_width) {
  1817d9:	8b 44 24 04          	mov    0x4(%esp),%eax
  1817dd:	8d 48 ff             	lea    -0x1(%eax),%ecx
  1817e0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1817e4:	3b 44 24 20          	cmp    0x20(%esp),%eax
  1817e8:	7f 1a                	jg     181804 <_printk_hex_ulong+0x85>
			out((int)(pad_zero ? '0' : ' '), ctx);
  1817ea:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
  1817ef:	74 07                	je     1817f8 <_printk_hex_ulong+0x79>
  1817f1:	b8 30 00 00 00       	mov    $0x30,%eax
  1817f6:	eb 05                	jmp    1817fd <_printk_hex_ulong+0x7e>
  1817f8:	b8 20 00 00 00       	mov    $0x20,%eax
  1817fd:	8b 14 24             	mov    (%esp),%edx
  181800:	ff d5                	call   *%ebp
  181802:	eb 00                	jmp    181804 <_printk_hex_ulong+0x85>

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
  181804:	89 f2                	mov    %esi,%edx
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
  181806:	85 d2                	test   %edx,%edx
  181808:	75 97                	jne    1817a1 <_printk_hex_ulong+0x22>

		if (remaining-- <= min_width) {
			out((int)(pad_zero ? '0' : ' '), ctx);
		}
	}
}
  18180a:	83 c4 08             	add    $0x8,%esp
  18180d:	5b                   	pop    %ebx
  18180e:	5e                   	pop    %esi
  18180f:	5f                   	pop    %edi
  181810:	5d                   	pop    %ebp
  181811:	c3                   	ret    

00181812 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
  181812:	55                   	push   %ebp
  181813:	57                   	push   %edi
  181814:	56                   	push   %esi
  181815:	53                   	push   %ebx
  181816:	83 ec 08             	sub    $0x8,%esp
  181819:	89 c5                	mov    %eax,%ebp
  18181b:	89 54 24 04          	mov    %edx,0x4(%esp)
	unsigned long remainder = num;
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
  18181f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
  181824:	7f 08                	jg     18182e <_printk_dec_ulong+0x1c>
		min_width = 1;
  181826:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%esp)
  18182d:	00 
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
  18182e:	89 0c 24             	mov    %ecx,(%esp)
  181831:	bf 0a 00 00 00       	mov    $0xa,%edi
  181836:	bb 00 00 00 00       	mov    $0x0,%ebx
  18183b:	be ff c9 9a 3b       	mov    $0x3b9ac9ff,%esi
  181840:	eb 65                	jmp    1818a7 <_printk_dec_ulong+0x95>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
  181842:	3b 34 24             	cmp    (%esp),%esi
  181845:	0f 92 c0             	setb   %al
  181848:	08 d8                	or     %bl,%al
  18184a:	74 1d                	je     181869 <_printk_dec_ulong+0x57>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
  18184c:	8d 4e 01             	lea    0x1(%esi),%ecx
  18184f:	8b 04 24             	mov    (%esp),%eax
  181852:	ba 00 00 00 00       	mov    $0x0,%edx
  181857:	f7 f1                	div    %ecx
  181859:	83 c0 30             	add    $0x30,%eax
  18185c:	8b 54 24 04          	mov    0x4(%esp),%edx
  181860:	ff d5                	call   *%ebp
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
  181862:	bb 01 00 00 00       	mov    $0x1,%ebx
  181867:	eb 1f                	jmp    181888 <_printk_dec_ulong+0x76>
			out((int)((remainder / (pos + 1)) + 48), ctx);
		} else if (remaining <= min_width) {
  181869:	3b 7c 24 20          	cmp    0x20(%esp),%edi
  18186d:	7f 19                	jg     181888 <_printk_dec_ulong+0x76>
			out((int)(pad_zero ? '0' : ' '), ctx);
  18186f:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
  181874:	74 07                	je     18187d <_printk_dec_ulong+0x6b>
  181876:	b8 30 00 00 00       	mov    $0x30,%eax
  18187b:	eb 05                	jmp    181882 <_printk_dec_ulong+0x70>
  18187d:	b8 20 00 00 00       	mov    $0x20,%eax
  181882:	8b 54 24 04          	mov    0x4(%esp),%edx
  181886:	ff d5                	call   *%ebp
		}
		remaining--;
  181888:	4f                   	dec    %edi
		remainder %= (pos + 1);
  181889:	8d 4e 01             	lea    0x1(%esi),%ecx
  18188c:	8b 04 24             	mov    (%esp),%eax
  18188f:	ba 00 00 00 00       	mov    $0x0,%edx
  181894:	f7 f1                	div    %ecx
  181896:	89 14 24             	mov    %edx,(%esp)
		pos /= 10;
  181899:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  18189e:	89 f0                	mov    %esi,%eax
  1818a0:	f7 e2                	mul    %edx
  1818a2:	89 d6                	mov    %edx,%esi
  1818a4:	c1 ee 03             	shr    $0x3,%esi
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
  1818a7:	83 fe 08             	cmp    $0x8,%esi
  1818aa:	77 96                	ja     181842 <_printk_dec_ulong+0x30>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
  1818ac:	8b 04 24             	mov    (%esp),%eax
  1818af:	83 c0 30             	add    $0x30,%eax
  1818b2:	8b 54 24 04          	mov    0x4(%esp),%edx
  1818b6:	ff d5                	call   *%ebp
}
  1818b8:	83 c4 08             	add    $0x8,%esp
  1818bb:	5b                   	pop    %ebx
  1818bc:	5e                   	pop    %esi
  1818bd:	5f                   	pop    %edi
  1818be:	5d                   	pop    %ebp
  1818bf:	c3                   	ret    

001818c0 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
  1818c0:	a3 10 00 28 00       	mov    %eax,0x280010
  1818c5:	c3                   	ret    

001818c6 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
  1818c6:	55                   	push   %ebp
  1818c7:	57                   	push   %edi
  1818c8:	56                   	push   %esi
  1818c9:	53                   	push   %ebx
  1818ca:	83 ec 10             	sub    $0x10,%esp
  1818cd:	89 c7                	mov    %eax,%edi
  1818cf:	89 54 24 04          	mov    %edx,0x4(%esp)
  1818d3:	89 cb                	mov    %ecx,%ebx
  1818d5:	8b 6c 24 24          	mov    0x24(%esp),%ebp
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
	int min_width = -1;
  1818d9:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
  1818e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1818e7:	00 
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
  1818e8:	be 00 00 00 00       	mov    $0x0,%esi
	int pad_zero = 0;
	int min_width = -1;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
  1818ed:	e9 af 01 00 00       	jmp    181aa1 <_vprintk+0x1db>
		if (!might_format) {
  1818f2:	85 f6                	test   %esi,%esi
  1818f4:	75 16                	jne    18190c <_vprintk+0x46>
			if (*fmt != '%') {
  1818f6:	3c 25                	cmp    $0x25,%al
  1818f8:	0f 84 84 01 00 00    	je     181a82 <_vprintk+0x1bc>
				out((int)*fmt, ctx);
  1818fe:	0f be c0             	movsbl %al,%eax
  181901:	8b 54 24 04          	mov    0x4(%esp),%edx
  181905:	ff d7                	call   *%edi
  181907:	e9 94 01 00 00       	jmp    181aa0 <_vprintk+0x1da>
				might_format = 1;
				min_width = -1;
				pad_zero = 0;
			}
		} else {
			switch (*fmt) {
  18190c:	8d 50 db             	lea    -0x25(%eax),%edx
  18190f:	80 fa 55             	cmp    $0x55,%dl
  181912:	0f 87 4f 01 00 00    	ja     181a67 <_vprintk+0x1a1>
  181918:	0f b6 d2             	movzbl %dl,%edx
  18191b:	ff 24 95 f8 48 18 00 	jmp    *0x1848f8(,%edx,4)
			case '0':
				if (min_width < 0 && pad_zero == 0) {
  181922:	8b 14 24             	mov    (%esp),%edx
  181925:	c1 ea 1f             	shr    $0x1f,%edx
  181928:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
  18192d:	0f 94 c1             	sete   %cl
  181930:	84 d1                	test   %dl,%cl
  181932:	0f 85 60 01 00 00    	jne    181a98 <_vprintk+0x1d2>
					pad_zero = 1;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
  181938:	83 3c 24 00          	cmpl   $0x0,(%esp)
  18193c:	79 0e                	jns    18194c <_vprintk+0x86>
					min_width = *fmt - '0';
  18193e:	0f be c0             	movsbl %al,%eax
  181941:	83 e8 30             	sub    $0x30,%eax
  181944:	89 04 24             	mov    %eax,(%esp)
  181947:	e9 54 01 00 00       	jmp    181aa0 <_vprintk+0x1da>
				} else {
					min_width = 10 * min_width + *fmt - '0';
  18194c:	8b 0c 24             	mov    (%esp),%ecx
  18194f:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
  181952:	8d 14 09             	lea    (%ecx,%ecx,1),%edx
  181955:	0f be c0             	movsbl %al,%eax
  181958:	8d 44 02 d0          	lea    -0x30(%edx,%eax,1),%eax
  18195c:	89 04 24             	mov    %eax,(%esp)
  18195f:	e9 3c 01 00 00       	jmp    181aa0 <_vprintk+0x1da>
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
  181964:	8d 75 04             	lea    0x4(%ebp),%esi
  181967:	8b 6d 00             	mov    0x0(%ebp),%ebp

				if (d < 0) {
  18196a:	85 ed                	test   %ebp,%ebp
  18196c:	79 10                	jns    18197e <_vprintk+0xb8>
					out((int)'-', ctx);
  18196e:	8b 54 24 04          	mov    0x4(%esp),%edx
  181972:	b8 2d 00 00 00       	mov    $0x2d,%eax
  181977:	ff d7                	call   *%edi
					d = -d;
  181979:	f7 dd                	neg    %ebp
					min_width--;
  18197b:	ff 0c 24             	decl   (%esp)
				}
				_printk_dec_ulong(out, ctx, d, pad_zero,
  18197e:	ff 34 24             	pushl  (%esp)
  181981:	ff 74 24 0c          	pushl  0xc(%esp)
  181985:	89 e9                	mov    %ebp,%ecx
  181987:	8b 54 24 0c          	mov    0xc(%esp),%edx
  18198b:	89 f8                	mov    %edi,%eax
  18198d:	e8 80 fe ff ff       	call   181812 <_printk_dec_ulong>
  181992:	83 c4 08             	add    $0x8,%esp
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
  181995:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  181997:	be 00 00 00 00       	mov    $0x0,%esi
					d = -d;
					min_width--;
				}
				_printk_dec_ulong(out, ctx, d, pad_zero,
						  min_width);
				break;
  18199c:	e9 ff 00 00 00       	jmp    181aa0 <_vprintk+0x1da>
			}
			case 'u': {
				unsigned long u = va_arg(
  1819a1:	8d 75 04             	lea    0x4(%ebp),%esi
  1819a4:	8b 4d 00             	mov    0x0(%ebp),%ecx
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
  1819a7:	ff 34 24             	pushl  (%esp)
  1819aa:	ff 74 24 0c          	pushl  0xc(%esp)
  1819ae:	8b 54 24 0c          	mov    0xc(%esp),%edx
  1819b2:	89 f8                	mov    %edi,%eax
  1819b4:	e8 59 fe ff ff       	call   181812 <_printk_dec_ulong>
  1819b9:	83 c4 08             	add    $0x8,%esp
				_printk_dec_ulong(out, ctx, d, pad_zero,
						  min_width);
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
  1819bc:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  1819be:	be 00 00 00 00       	mov    $0x0,%esi
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
						  min_width);
				break;
  1819c3:	e9 d8 00 00 00       	jmp    181aa0 <_vprintk+0x1da>
			}
			case 'p':
				  out('0', ctx);
  1819c8:	8b 74 24 04          	mov    0x4(%esp),%esi
  1819cc:	89 f2                	mov    %esi,%edx
  1819ce:	b8 30 00 00 00       	mov    $0x30,%eax
  1819d3:	ff d7                	call   *%edi
				  out('x', ctx);
  1819d5:	89 f2                	mov    %esi,%edx
  1819d7:	b8 78 00 00 00       	mov    $0x78,%eax
  1819dc:	ff d7                	call   *%edi
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
				  min_width = 8;
  1819de:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
  1819e5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  1819ec:	00 
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
  1819ed:	8d 75 04             	lea    0x4(%ebp),%esi
  1819f0:	8b 4d 00             	mov    0x0(%ebp),%ecx
					ap, unsigned long);
				_printk_hex_ulong(out, ctx, x, pad_zero,
  1819f3:	ff 34 24             	pushl  (%esp)
  1819f6:	ff 74 24 0c          	pushl  0xc(%esp)
  1819fa:	8b 54 24 0c          	mov    0xc(%esp),%edx
  1819fe:	89 f8                	mov    %edi,%eax
  181a00:	e8 7a fd ff ff       	call   18177f <_printk_hex_ulong>
  181a05:	83 c4 08             	add    $0x8,%esp
				  pad_zero = 1;
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
  181a08:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  181a0a:	be 00 00 00 00       	mov    $0x0,%esi
			case 'X': {
				unsigned long x = va_arg(
					ap, unsigned long);
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
  181a0f:	e9 8c 00 00 00       	jmp    181aa0 <_vprintk+0x1da>
			}
			case 's': {
				char *s = va_arg(ap, char *);
  181a14:	8d 75 04             	lea    0x4(%ebp),%esi
  181a17:	8b 6d 00             	mov    0x0(%ebp),%ebp
  181a1a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  181a1e:	8b 5c 24 04          	mov    0x4(%esp),%ebx

				while (*s)
  181a22:	eb 08                	jmp    181a2c <_vprintk+0x166>
					out((int)(*s++), ctx);
  181a24:	45                   	inc    %ebp
  181a25:	0f be c0             	movsbl %al,%eax
  181a28:	89 da                	mov    %ebx,%edx
  181a2a:	ff d7                	call   *%edi
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
  181a2c:	8a 45 00             	mov    0x0(%ebp),%al
  181a2f:	84 c0                	test   %al,%al
  181a31:	75 f1                	jne    181a24 <_vprintk+0x15e>
  181a33:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
  181a37:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  181a39:	be 00 00 00 00       	mov    $0x0,%esi
  181a3e:	eb 60                	jmp    181aa0 <_vprintk+0x1da>
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
  181a40:	8d 75 04             	lea    0x4(%ebp),%esi
  181a43:	8b 45 00             	mov    0x0(%ebp),%eax

				out(c, ctx);
  181a46:	8b 54 24 04          	mov    0x4(%esp),%edx
  181a4a:	ff d7                	call   *%edi
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
  181a4c:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  181a4e:	be 00 00 00 00       	mov    $0x0,%esi
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
				break;
  181a53:	eb 4b                	jmp    181aa0 <_vprintk+0x1da>
			}
			case '%': {
				out((int)'%', ctx);
  181a55:	8b 54 24 04          	mov    0x4(%esp),%edx
  181a59:	b8 25 00 00 00       	mov    $0x25,%eax
  181a5e:	ff d7                	call   *%edi
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  181a60:	be 00 00 00 00       	mov    $0x0,%esi
				out(c, ctx);
				break;
			}
			case '%': {
				out((int)'%', ctx);
				break;
  181a65:	eb 39                	jmp    181aa0 <_vprintk+0x1da>
			}
			default:
				out((int)'%', ctx);
  181a67:	8b 74 24 04          	mov    0x4(%esp),%esi
  181a6b:	89 f2                	mov    %esi,%edx
  181a6d:	b8 25 00 00 00       	mov    $0x25,%eax
  181a72:	ff d7                	call   *%edi
				out((int)*fmt, ctx);
  181a74:	0f be 03             	movsbl (%ebx),%eax
  181a77:	89 f2                	mov    %esi,%edx
  181a79:	ff d7                	call   *%edi
				break;
			}
			might_format = 0;
  181a7b:	be 00 00 00 00       	mov    $0x0,%esi
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
  181a80:	eb 1e                	jmp    181aa0 <_vprintk+0x1da>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
  181a82:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
				pad_zero = 0;
  181a89:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  181a90:	00 
	while (*fmt) {
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
  181a91:	be 01 00 00 00       	mov    $0x1,%esi
  181a96:	eb 08                	jmp    181aa0 <_vprintk+0x1da>
			}
		} else {
			switch (*fmt) {
			case '0':
				if (min_width < 0 && pad_zero == 0) {
					pad_zero = 1;
  181a98:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  181a9f:	00 
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
  181aa0:	43                   	inc    %ebx
	int pad_zero = 0;
	int min_width = -1;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
  181aa1:	8a 03                	mov    (%ebx),%al
  181aa3:	84 c0                	test   %al,%al
  181aa5:	0f 85 47 fe ff ff    	jne    1818f2 <_vprintk+0x2c>
			might_format = 0;
		}
still_might_format:
		++fmt;
	}
}
  181aab:	83 c4 10             	add    $0x10,%esp
  181aae:	5b                   	pop    %ebx
  181aaf:	5e                   	pop    %esi
  181ab0:	5f                   	pop    %edi
  181ab1:	5d                   	pop    %ebp
  181ab2:	c3                   	ret    

00181ab3 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
  181ab3:	83 ec 04             	sub    $0x4,%esp
	struct out_context ctx = { 0 };
  181ab6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	va_list ap;

	va_start(ap, fmt);
  181abd:	8d 44 24 0c          	lea    0xc(%esp),%eax
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
  181ac1:	50                   	push   %eax
  181ac2:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  181ac6:	8d 54 24 04          	lea    0x4(%esp),%edx
  181aca:	b8 73 17 18 00       	mov    $0x181773,%eax
  181acf:	e8 f2 fd ff ff       	call   1818c6 <_vprintk>
	va_end(ap);

	return ctx.count;
}
  181ad4:	8b 44 24 04          	mov    0x4(%esp),%eax
  181ad8:	83 c4 08             	add    $0x8,%esp
  181adb:	c3                   	ret    

00181adc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SOC, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_CONSOLE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_ISA_IA32, 1);
  181adc:	c3                   	ret    

00181add <_pinmux_defaults>:
/******** End PINMUX mapping **************************/

#define PINMUX_MAX_REGISTERS 2

static void _pinmux_defaults(uint32_t base)
{
  181add:	53                   	push   %ebx
  181ade:	83 ec 08             	sub    $0x8,%esp
	PIN_CONFIG(mux_config,  6, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config,  7, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 12, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 13, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 14, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 15, PINMUX_FUNC_C);
  181ae1:	c7 04 24 42 a1 00 aa 	movl   $0xaa00a142,(%esp)
	PIN_CONFIG(mux_config, 16, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 17, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 18, PINMUX_FUNC_C);
  181ae8:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  181aef:	00 

	for (i = 0; i < PINMUX_MAX_REGISTERS; i++) {
  181af0:	ba 00 00 00 00       	mov    $0x0,%edx
  181af5:	eb 0a                	jmp    181b01 <_pinmux_defaults+0x24>
		sys_write32(mux_config[i], PINMUX_SELECT_REGISTER(base, i));
  181af7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
  181afa:	8b 0c 94             	mov    (%esp,%edx,4),%ecx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  181afd:	89 4b 30             	mov    %ecx,0x30(%ebx)
	PIN_CONFIG(mux_config, 15, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 16, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 17, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 18, PINMUX_FUNC_C);

	for (i = 0; i < PINMUX_MAX_REGISTERS; i++) {
  181b00:	42                   	inc    %edx
  181b01:	83 fa 01             	cmp    $0x1,%edx
  181b04:	7e f1                	jle    181af7 <_pinmux_defaults+0x1a>
		sys_write32(mux_config[i], PINMUX_SELECT_REGISTER(base, i));
	}
}
  181b06:	83 c4 08             	add    $0x8,%esp
  181b09:	5b                   	pop    %ebx
  181b0a:	c3                   	ret    

00181b0b <pinmux_initialize>:

static int pinmux_initialize(struct device *port)
{
	ARG_UNUSED(port);

	_pinmux_defaults(PINMUX_BASE_ADDR);
  181b0b:	b8 00 09 80 b0       	mov    $0xb0800900,%eax
  181b10:	e8 c8 ff ff ff       	call   181add <_pinmux_defaults>

	/*
	 * MAGIC NUMBER: 0x1 is used as the pullup is a single bit in a
	 * 32-bit register.
	 */
	(*(mux_register)) = ((*(mux_register)) & ~(0x1 << pin_offset)) |
  181b15:	a1 20 09 80 b0       	mov    0xb0800920,%eax
  181b1a:	83 c8 20             	or     $0x20,%eax
  181b1d:	a3 20 09 80 b0       	mov    %eax,0xb0800920

	/* Enable the UART RX pin to receive input */
	_quark_mcu_set_mux(PINMUX_BASE_ADDR + PINMUX_INPUT_OFFSET, 5, 0x1);

	return 0;
}
  181b22:	b8 00 00 00 00       	mov    $0x0,%eax
  181b27:	c3                   	ret    

00181b28 <clk_periph_enable>:

int clk_periph_enable(const clk_periph_t clocks)
{
	QM_CHECK(clocks <= CLK_PERIPH_ALL, -EINVAL);

	QM_SCSS_CCU->ccu_periph_clk_gate_ctl |= clocks;
  181b28:	8b 15 18 00 80 b0    	mov    0xb0800018,%edx
  181b2e:	09 d0                	or     %edx,%eax
  181b30:	a3 18 00 80 b0       	mov    %eax,0xb0800018
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER,
			    SOCW_REG_CCU_PERIPH_CLK_GATE_CTL);
#endif /* HAS_SW_SOCWATCH */

	return 0;
}
  181b35:	b8 00 00 00 00       	mov    $0x0,%eax
  181b3a:	c3                   	ret    

00181b3b <clk_sys_get_ticks_per_us>:
}

uint32_t clk_sys_get_ticks_per_us(void)
{
	return ticks_per_us;
}
  181b3b:	a1 14 00 28 00       	mov    0x280014,%eax
  181b40:	c3                   	ret    

00181b41 <clk_sys_udelay>:

void clk_sys_udelay(uint32_t microseconds)
{
  181b41:	56                   	push   %esi
  181b42:	53                   	push   %ebx
	uint32_t timeout = ticks_per_us * microseconds;
  181b43:	0f af 05 14 00 28 00 	imul   0x280014,%eax
  181b4a:	89 c6                	mov    %eax,%esi
/* rdtsc */
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdtsc (void)
{
  return __builtin_ia32_rdtsc ();
  181b4c:	0f 31                	rdtsc  
  181b4e:	89 c1                	mov    %eax,%ecx
  181b50:	89 d3                	mov    %edx,%ebx
  181b52:	0f 31                	rdtsc  
	unsigned long long tsc_start;
	tsc_start = get_ticks();
	/* We need to wait until timeout system clock ticks has occurred. */
	while (get_ticks() - tsc_start < timeout) {
  181b54:	29 c8                	sub    %ecx,%eax
  181b56:	19 da                	sbb    %ebx,%edx
  181b58:	83 fa 00             	cmp    $0x0,%edx
  181b5b:	77 04                	ja     181b61 <clk_sys_udelay+0x20>
  181b5d:	39 f0                	cmp    %esi,%eax
  181b5f:	72 f1                	jb     181b52 <clk_sys_udelay+0x11>
	}
}
  181b61:	5b                   	pop    %ebx
  181b62:	5e                   	pop    %esi
  181b63:	c3                   	ret    

00181b64 <get_i2c_clk_freq_in_mhz>:
 *
 * @return [uint32_t] I2C freq_in_mhz.
 */
uint32_t get_i2c_clk_freq_in_mhz(void)
{
	return clk_sys_get_ticks_per_us() >>
  181b64:	e8 d2 ff ff ff       	call   181b3b <clk_sys_get_ticks_per_us>
	       ((QM_SCSS_CCU->ccu_periph_clk_div_ctl0 &
  181b69:	8b 0d 1c 00 80 b0    	mov    0xb080001c,%ecx
  181b6f:	83 e1 f9             	and    $0xfffffff9,%ecx
		 CLK_PERIPH_DIV_DEF_MASK) >>
  181b72:	d1 e9                	shr    %ecx
 *
 * @return [uint32_t] I2C freq_in_mhz.
 */
uint32_t get_i2c_clk_freq_in_mhz(void)
{
	return clk_sys_get_ticks_per_us() >>
  181b74:	d3 e8                	shr    %cl,%eax
	       ((QM_SCSS_CCU->ccu_periph_clk_div_ctl0 &
		 CLK_PERIPH_DIV_DEF_MASK) >>
		QM_CCU_PERIPH_PCLK_DIV_OFFSET);
}
  181b76:	c3                   	ret    

00181b77 <empty_rx_fifo>:
 * received data.
 */
static void empty_rx_fifo(const qm_i2c_t i2c,
			  const volatile qm_i2c_transfer_t *const transfer,
			  qm_i2c_reg_t *const controller)
{
  181b77:	55                   	push   %ebp
  181b78:	57                   	push   %edi
  181b79:	56                   	push   %esi
  181b7a:	53                   	push   %ebx
  181b7b:	89 c7                	mov    %eax,%edi
  181b7d:	89 d6                	mov    %edx,%esi
  181b7f:	89 cb                	mov    %ecx,%ebx
	while (controller->ic_status & QM_I2C_IC_STATUS_RFNE) {
  181b81:	eb 6b                	jmp    181bee <empty_rx_fifo+0x77>
		if (!transfer_ongoing) {
  181b83:	a0 0e 01 28 00       	mov    0x28010e,%al
  181b88:	84 c0                	test   %al,%al
  181b8a:	75 05                	jne    181b91 <empty_rx_fifo+0x1a>
			/* Dummy read. */
			controller->ic_data_cmd;
  181b8c:	8b 43 10             	mov    0x10(%ebx),%eax
  181b8f:	eb 5d                	jmp    181bee <empty_rx_fifo+0x77>
		} else {
			if (transfer->rx_len > i2c_read_pos[i2c]) {
  181b91:	8b 56 0c             	mov    0xc(%esi),%edx
  181b94:	8b 04 bd 14 01 28 00 	mov    0x280114(,%edi,4),%eax
  181b9b:	39 c2                	cmp    %eax,%edx
  181b9d:	76 1a                	jbe    181bb9 <empty_rx_fifo+0x42>
				transfer->rx[i2c_read_pos[i2c]++] =
  181b9f:	8b 56 08             	mov    0x8(%esi),%edx
  181ba2:	8b 04 bd 14 01 28 00 	mov    0x280114(,%edi,4),%eax
  181ba9:	8d 48 01             	lea    0x1(%eax),%ecx
  181bac:	89 0c bd 14 01 28 00 	mov    %ecx,0x280114(,%edi,4)
				    controller->ic_data_cmd & 0xFF;
  181bb3:	8b 4b 10             	mov    0x10(%ebx),%ecx
		if (!transfer_ongoing) {
			/* Dummy read. */
			controller->ic_data_cmd;
		} else {
			if (transfer->rx_len > i2c_read_pos[i2c]) {
				transfer->rx[i2c_read_pos[i2c]++] =
  181bb6:	88 0c 02             	mov    %cl,(%edx,%eax,1)
				    controller->ic_data_cmd & 0xFF;
			}

			if (transfer->rx_len == i2c_read_pos[i2c]) {
  181bb9:	8b 56 0c             	mov    0xc(%esi),%edx
  181bbc:	8b 04 bd 14 01 28 00 	mov    0x280114(,%edi,4),%eax
  181bc3:	39 c2                	cmp    %eax,%edx
  181bc5:	75 27                	jne    181bee <empty_rx_fifo+0x77>
				/*
				 * End user transfer if user does not update
				 * buffers.
				 */
				transfer_ongoing = false;
  181bc7:	c6 05 0e 01 28 00 00 	movb   $0x0,0x28010e

				if (transfer->callback) {
  181bce:	8b 46 14             	mov    0x14(%esi),%eax
  181bd1:	85 c0                	test   %eax,%eax
  181bd3:	74 19                	je     181bee <empty_rx_fifo+0x77>
					transfer->callback(
  181bd5:	8b 6e 14             	mov    0x14(%esi),%ebp
  181bd8:	8b 56 0c             	mov    0xc(%esi),%edx
  181bdb:	8b 46 18             	mov    0x18(%esi),%eax
  181bde:	52                   	push   %edx
  181bdf:	b9 00 00 00 01       	mov    $0x1000000,%ecx
  181be4:	ba 00 00 00 00       	mov    $0x0,%edx
  181be9:	ff d5                	call   *%ebp
  181beb:	83 c4 04             	add    $0x4,%esp
 */
static void empty_rx_fifo(const qm_i2c_t i2c,
			  const volatile qm_i2c_transfer_t *const transfer,
			  qm_i2c_reg_t *const controller)
{
	while (controller->ic_status & QM_I2C_IC_STATUS_RFNE) {
  181bee:	8b 43 70             	mov    0x70(%ebx),%eax
  181bf1:	a8 08                	test   $0x8,%al
  181bf3:	75 8e                	jne    181b83 <empty_rx_fifo+0xc>
					    QM_I2C_RX_FULL, transfer->rx_len);
				}
			}
		}
	}
}
  181bf5:	5b                   	pop    %ebx
  181bf6:	5e                   	pop    %esi
  181bf7:	5f                   	pop    %edi
  181bf8:	5d                   	pop    %ebp
  181bf9:	c3                   	ret    

00181bfa <slave_fill_tx_fifo>:
 * data.
 */
static void slave_fill_tx_fifo(const qm_i2c_t i2c,
			       const volatile qm_i2c_transfer_t *const transfer,
			       qm_i2c_reg_t *const controller)
{
  181bfa:	55                   	push   %ebp
  181bfb:	57                   	push   %edi
  181bfc:	56                   	push   %esi
  181bfd:	53                   	push   %ebx
  181bfe:	89 c7                	mov    %eax,%edi
  181c00:	89 d6                	mov    %edx,%esi
  181c02:	89 cb                	mov    %ecx,%ebx
	while ((controller->ic_status & QM_I2C_IC_STATUS_TNF) &&
  181c04:	eb 6f                	jmp    181c75 <slave_fill_tx_fifo+0x7b>
	       (!(controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_ABRT))) {
		if (!transfer_ongoing) {
  181c06:	a0 0e 01 28 00       	mov    0x28010e,%al
  181c0b:	84 c0                	test   %al,%al
  181c0d:	75 09                	jne    181c18 <slave_fill_tx_fifo+0x1e>
			/* Dummy write. */
			controller->ic_data_cmd = 0;
  181c0f:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  181c16:	eb 5d                	jmp    181c75 <slave_fill_tx_fifo+0x7b>

		} else {
			if (transfer->tx_len > i2c_write_pos[i2c]) {
  181c18:	8b 56 04             	mov    0x4(%esi),%edx
  181c1b:	8b 04 bd 18 01 28 00 	mov    0x280118(,%edi,4),%eax
  181c22:	39 c2                	cmp    %eax,%edx
  181c24:	76 1a                	jbe    181c40 <slave_fill_tx_fifo+0x46>
				controller->ic_data_cmd =
				    transfer->tx[i2c_write_pos[i2c]++];
  181c26:	8b 16                	mov    (%esi),%edx
  181c28:	8b 04 bd 18 01 28 00 	mov    0x280118(,%edi,4),%eax
  181c2f:	8d 48 01             	lea    0x1(%eax),%ecx
  181c32:	89 0c bd 18 01 28 00 	mov    %ecx,0x280118(,%edi,4)
			/* Dummy write. */
			controller->ic_data_cmd = 0;

		} else {
			if (transfer->tx_len > i2c_write_pos[i2c]) {
				controller->ic_data_cmd =
  181c39:	0f b6 04 02          	movzbl (%edx,%eax,1),%eax
  181c3d:	89 43 10             	mov    %eax,0x10(%ebx)
				    transfer->tx[i2c_write_pos[i2c]++];
			}

			if (transfer->tx_len == i2c_write_pos[i2c]) {
  181c40:	8b 56 04             	mov    0x4(%esi),%edx
  181c43:	8b 04 bd 18 01 28 00 	mov    0x280118(,%edi,4),%eax
  181c4a:	39 c2                	cmp    %eax,%edx
  181c4c:	75 27                	jne    181c75 <slave_fill_tx_fifo+0x7b>
				/*
				 * End user transfer if user does not update
				 * buffers.
				 */
				transfer_ongoing = false;
  181c4e:	c6 05 0e 01 28 00 00 	movb   $0x0,0x28010e

				if (transfer->callback) {
  181c55:	8b 46 14             	mov    0x14(%esi),%eax
  181c58:	85 c0                	test   %eax,%eax
  181c5a:	74 19                	je     181c75 <slave_fill_tx_fifo+0x7b>
					transfer->callback(
  181c5c:	8b 6e 14             	mov    0x14(%esi),%ebp
  181c5f:	8b 56 04             	mov    0x4(%esi),%edx
  181c62:	8b 46 18             	mov    0x18(%esi),%eax
  181c65:	52                   	push   %edx
  181c66:	b9 00 00 80 00       	mov    $0x800000,%ecx
  181c6b:	ba 00 00 00 00       	mov    $0x0,%edx
  181c70:	ff d5                	call   *%ebp
  181c72:	83 c4 04             	add    $0x4,%esp
 */
static void slave_fill_tx_fifo(const qm_i2c_t i2c,
			       const volatile qm_i2c_transfer_t *const transfer,
			       qm_i2c_reg_t *const controller)
{
	while ((controller->ic_status & QM_I2C_IC_STATUS_TNF) &&
  181c75:	8b 43 70             	mov    0x70(%ebx),%eax
  181c78:	a8 02                	test   $0x2,%al
  181c7a:	74 07                	je     181c83 <slave_fill_tx_fifo+0x89>
	       (!(controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_ABRT))) {
  181c7c:	8b 43 2c             	mov    0x2c(%ebx),%eax
 */
static void slave_fill_tx_fifo(const qm_i2c_t i2c,
			       const volatile qm_i2c_transfer_t *const transfer,
			       qm_i2c_reg_t *const controller)
{
	while ((controller->ic_status & QM_I2C_IC_STATUS_TNF) &&
  181c7f:	a8 40                	test   $0x40,%al
  181c81:	74 83                	je     181c06 <slave_fill_tx_fifo+0xc>
					    QM_I2C_TX_EMPTY, transfer->tx_len);
				}
			}
		}
	}
}
  181c83:	5b                   	pop    %ebx
  181c84:	5e                   	pop    %esi
  181c85:	5f                   	pop    %edi
  181c86:	5d                   	pop    %ebp
  181c87:	c3                   	ret    

00181c88 <master_fill_tx_fifo>:

static uint32_t
master_fill_tx_fifo(const qm_i2c_t i2c,
		    const volatile qm_i2c_transfer_t *const transfer,
		    qm_i2c_reg_t *const controller)
{
  181c88:	55                   	push   %ebp
  181c89:	57                   	push   %edi
  181c8a:	56                   	push   %esi
  181c8b:	53                   	push   %ebx
  181c8c:	83 ec 04             	sub    $0x4,%esp
  181c8f:	89 d7                	mov    %edx,%edi
  181c91:	89 cd                	mov    %ecx,%ebp
	uint32_t ic_data_cmd, count_tx = (QM_I2C_FIFO_SIZE - TX_TL);
	uint32_t write_buffer_remaining = transfer->tx_len - i2c_write_pos[i2c];
  181c93:	8b 5a 04             	mov    0x4(%edx),%ebx
  181c96:	8b 14 85 18 01 28 00 	mov    0x280118(,%eax,4),%edx
  181c9d:	29 d3                	sub    %edx,%ebx
	uint32_t read_buffer_remaining = transfer->rx_len - i2c_read_pos[i2c];
  181c9f:	8b 4f 0c             	mov    0xc(%edi),%ecx
  181ca2:	8b 14 85 14 01 28 00 	mov    0x280114(,%eax,4),%edx
  181ca9:	29 d1                	sub    %edx,%ecx
  181cab:	89 0c 24             	mov    %ecx,(%esp)
static uint32_t
master_fill_tx_fifo(const qm_i2c_t i2c,
		    const volatile qm_i2c_transfer_t *const transfer,
		    qm_i2c_reg_t *const controller)
{
	uint32_t ic_data_cmd, count_tx = (QM_I2C_FIFO_SIZE - TX_TL);
  181cae:	be 0e 00 00 00       	mov    $0xe,%esi
	uint32_t write_buffer_remaining = transfer->tx_len - i2c_write_pos[i2c];
	uint32_t read_buffer_remaining = transfer->rx_len - i2c_read_pos[i2c];

	while ((count_tx) && write_buffer_remaining) {
  181cb3:	eb 32                	jmp    181ce7 <master_fill_tx_fifo+0x5f>
		count_tx--;
  181cb5:	4e                   	dec    %esi
		write_buffer_remaining--;
  181cb6:	4b                   	dec    %ebx

		/*
		 * Write command -IC_DATA_CMD[8] = 0.
		 * Fill IC_DATA_CMD[7:0] with the data.
		 */
		ic_data_cmd = transfer->tx[i2c_write_pos[i2c]];
  181cb7:	8b 0f                	mov    (%edi),%ecx
  181cb9:	8b 14 85 18 01 28 00 	mov    0x280118(,%eax,4),%edx
  181cc0:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edx

		/*
		 * If transfer is a combined transfer, only send stop at
		 * end of the transfer sequence.
		 */
		if (transfer->stop && (write_buffer_remaining == 0) &&
  181cc4:	8a 4f 10             	mov    0x10(%edi),%cl
  181cc7:	84 c9                	test   %cl,%cl
  181cc9:	74 0a                	je     181cd5 <master_fill_tx_fifo+0x4d>
  181ccb:	8b 0c 24             	mov    (%esp),%ecx
  181cce:	09 d9                	or     %ebx,%ecx
  181cd0:	75 03                	jne    181cd5 <master_fill_tx_fifo+0x4d>
		    (read_buffer_remaining == 0)) {

			ic_data_cmd |= QM_I2C_IC_DATA_CMD_STOP_BIT_CTRL;
  181cd2:	80 ce 02             	or     $0x2,%dh
		}

		/* Write data. */
		controller->ic_data_cmd = ic_data_cmd;
  181cd5:	89 55 10             	mov    %edx,0x10(%ebp)
		i2c_write_pos[i2c]++;
  181cd8:	8b 14 85 18 01 28 00 	mov    0x280118(,%eax,4),%edx
  181cdf:	42                   	inc    %edx
  181ce0:	89 14 85 18 01 28 00 	mov    %edx,0x280118(,%eax,4)
{
	uint32_t ic_data_cmd, count_tx = (QM_I2C_FIFO_SIZE - TX_TL);
	uint32_t write_buffer_remaining = transfer->tx_len - i2c_write_pos[i2c];
	uint32_t read_buffer_remaining = transfer->rx_len - i2c_read_pos[i2c];

	while ((count_tx) && write_buffer_remaining) {
  181ce7:	85 f6                	test   %esi,%esi
  181ce9:	0f 95 c2             	setne  %dl
  181cec:	85 db                	test   %ebx,%ebx
  181cee:	0f 95 c1             	setne  %cl
  181cf1:	84 d1                	test   %dl,%cl
  181cf3:	75 c0                	jne    181cb5 <master_fill_tx_fifo+0x2d>
		 * goes above the threshold.
		 */
	}

	return write_buffer_remaining;
}
  181cf5:	89 d8                	mov    %ebx,%eax
  181cf7:	83 c4 04             	add    $0x4,%esp
  181cfa:	5b                   	pop    %ebx
  181cfb:	5e                   	pop    %esi
  181cfc:	5f                   	pop    %edi
  181cfd:	5d                   	pop    %ebp
  181cfe:	c3                   	ret    

00181cff <controller_enable>:
	return 0;
}

static void controller_enable(const qm_i2c_t i2c)
{
	qm_i2c_reg_t *const controller = QM_I2C[i2c];
  181cff:	8b 14 85 18 00 28 00 	mov    0x280018(,%eax,4),%edx

	if (!(controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN)) {
  181d06:	8b 82 9c 00 00 00    	mov    0x9c(%edx),%eax
  181d0c:	a8 01                	test   $0x1,%al
  181d0e:	75 13                	jne    181d23 <controller_enable+0x24>
		/* Enable controller. */
		controller->ic_enable |= QM_I2C_IC_ENABLE_CONTROLLER_EN;
  181d10:	8b 42 6c             	mov    0x6c(%edx),%eax
  181d13:	83 c8 01             	or     $0x1,%eax
  181d16:	89 42 6c             	mov    %eax,0x6c(%edx)

		/* Wait until controller is enabled. */
		while (!(controller->ic_enable_status &
  181d19:	8b 82 9c 00 00 00    	mov    0x9c(%edx),%eax
  181d1f:	a8 01                	test   $0x1,%al
  181d21:	74 f6                	je     181d19 <controller_enable+0x1a>
			 QM_I2C_IC_ENABLE_STATUS_IC_EN))
			;
	}

	/* Be sure that all interrupts flag are cleared. */
	controller->ic_clr_intr;
  181d23:	8b 42 40             	mov    0x40(%edx),%eax
  181d26:	c3                   	ret    

00181d27 <controller_disable>:
}

static int controller_disable(const qm_i2c_t i2c)
{
  181d27:	56                   	push   %esi
  181d28:	53                   	push   %ebx
	qm_i2c_reg_t *const controller = QM_I2C[i2c];
  181d29:	8b 34 85 18 00 28 00 	mov    0x280018(,%eax,4),%esi
	int poll_count = I2C_POLL_COUNT;

	/* Disable controller. */
	controller->ic_enable &= ~QM_I2C_IC_ENABLE_CONTROLLER_EN;
  181d30:	8b 46 6c             	mov    0x6c(%esi),%eax
  181d33:	83 e0 fe             	and    $0xfffffffe,%eax
  181d36:	89 46 6c             	mov    %eax,0x6c(%esi)
}

static int controller_disable(const qm_i2c_t i2c)
{
	qm_i2c_reg_t *const controller = QM_I2C[i2c];
	int poll_count = I2C_POLL_COUNT;
  181d39:	b8 40 42 0f 00       	mov    $0xf4240,%eax

	/* Disable controller. */
	controller->ic_enable &= ~QM_I2C_IC_ENABLE_CONTROLLER_EN;

	/* Wait until controller is disabled. */
	while ((controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN) &&
  181d3e:	eb 0c                	jmp    181d4c <controller_disable+0x25>
	       poll_count--) {
		clk_sys_udelay(I2C_POLL_MICROSECOND);
  181d40:	b8 01 00 00 00       	mov    $0x1,%eax
  181d45:	e8 f7 fd ff ff       	call   181b41 <clk_sys_udelay>
	/* Disable controller. */
	controller->ic_enable &= ~QM_I2C_IC_ENABLE_CONTROLLER_EN;

	/* Wait until controller is disabled. */
	while ((controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN) &&
	       poll_count--) {
  181d4a:	89 d8                	mov    %ebx,%eax

	/* Disable controller. */
	controller->ic_enable &= ~QM_I2C_IC_ENABLE_CONTROLLER_EN;

	/* Wait until controller is disabled. */
	while ((controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN) &&
  181d4c:	8b 96 9c 00 00 00    	mov    0x9c(%esi),%edx
  181d52:	f6 c2 01             	test   $0x1,%dl
  181d55:	74 07                	je     181d5e <controller_disable+0x37>
	       poll_count--) {
  181d57:	8d 58 ff             	lea    -0x1(%eax),%ebx

	/* Disable controller. */
	controller->ic_enable &= ~QM_I2C_IC_ENABLE_CONTROLLER_EN;

	/* Wait until controller is disabled. */
	while ((controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN) &&
  181d5a:	85 c0                	test   %eax,%eax
  181d5c:	75 e2                	jne    181d40 <controller_disable+0x19>
	       poll_count--) {
		clk_sys_udelay(I2C_POLL_MICROSECOND);
	}

	/* Returns 0 if ok, meaning controller is disabled. */
	return (controller->ic_enable_status & QM_I2C_IC_ENABLE_STATUS_IC_EN);
  181d5e:	8b 86 9c 00 00 00    	mov    0x9c(%esi),%eax
  181d64:	83 e0 01             	and    $0x1,%eax
}
  181d67:	5b                   	pop    %ebx
  181d68:	5e                   	pop    %esi
  181d69:	c3                   	ret    

00181d6a <i2c_isr_irq_handler>:
		}
	}
}

static void i2c_isr_irq_handler(const qm_i2c_t i2c)
{
  181d6a:	55                   	push   %ebp
  181d6b:	57                   	push   %edi
  181d6c:	56                   	push   %esi
  181d6d:	53                   	push   %ebx
  181d6e:	83 ec 08             	sub    $0x8,%esp
  181d71:	89 c3                	mov    %eax,%ebx
	const volatile qm_i2c_transfer_t *const transfer = i2c_transfer[i2c];
  181d73:	8b 3c 85 1c 01 28 00 	mov    0x28011c(,%eax,4),%edi
	qm_i2c_reg_t *const controller = QM_I2C[i2c];
  181d7a:	8b 34 85 18 00 28 00 	mov    0x280018(,%eax,4),%esi

	/* Check TX_OVER error. */
	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_OVER) {
  181d81:	8b 46 2c             	mov    0x2c(%esi),%eax
  181d84:	a8 08                	test   $0x8,%al
  181d86:	74 35                	je     181dbd <i2c_isr_irq_handler+0x53>
		/* Clear interrupt. */
		controller->ic_clr_tx_over;
  181d88:	8b 46 4c             	mov    0x4c(%esi),%eax

		/* Mask interrupts. */
		controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  181d8b:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)

		controller_disable(i2c);
  181d92:	89 d8                	mov    %ebx,%eax
  181d94:	e8 8e ff ff ff       	call   181d27 <controller_disable>
		if (transfer->callback) {
  181d99:	8b 47 14             	mov    0x14(%edi),%eax
  181d9c:	85 c0                	test   %eax,%eax
  181d9e:	74 1d                	je     181dbd <i2c_isr_irq_handler+0x53>
			transfer->callback(transfer->callback_data, -EIO,
  181da0:	8b 6f 14             	mov    0x14(%edi),%ebp
  181da3:	8b 14 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%edx
  181daa:	8b 47 18             	mov    0x18(%edi),%eax
  181dad:	52                   	push   %edx
  181dae:	b9 00 00 08 00       	mov    $0x80000,%ecx
  181db3:	ba fb ff ff ff       	mov    $0xfffffffb,%edx
  181db8:	ff d5                	call   *%ebp
  181dba:	83 c4 04             	add    $0x4,%esp
					   QM_I2C_TX_OVER, i2c_write_pos[i2c]);
		}
	}

	/* Check for RX_UNDER error. */
	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_UNDER) {
  181dbd:	8b 46 2c             	mov    0x2c(%esi),%eax
  181dc0:	a8 01                	test   $0x1,%al
  181dc2:	74 35                	je     181df9 <i2c_isr_irq_handler+0x8f>
		/* Clear interrupt. */
		controller->ic_clr_rx_under;
  181dc4:	8b 46 44             	mov    0x44(%esi),%eax

		/* Mask interrupts. */
		controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  181dc7:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)

		controller_disable(i2c);
  181dce:	89 d8                	mov    %ebx,%eax
  181dd0:	e8 52 ff ff ff       	call   181d27 <controller_disable>
		if (transfer->callback) {
  181dd5:	8b 47 14             	mov    0x14(%edi),%eax
  181dd8:	85 c0                	test   %eax,%eax
  181dda:	74 1d                	je     181df9 <i2c_isr_irq_handler+0x8f>
			transfer->callback(transfer->callback_data, -EIO,
  181ddc:	8b 6f 14             	mov    0x14(%edi),%ebp
  181ddf:	8b 14 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%edx
  181de6:	8b 47 18             	mov    0x18(%edi),%eax
  181de9:	52                   	push   %edx
  181dea:	b9 00 00 20 00       	mov    $0x200000,%ecx
  181def:	ba fb ff ff ff       	mov    $0xfffffffb,%edx
  181df4:	ff d5                	call   *%ebp
  181df6:	83 c4 04             	add    $0x4,%esp
	/*
	 * TX ABORT interrupt.
	 * Avoid spurious interrupts by checking RX DONE interrupt: RX_DONE
	 * interrupt also trigger a TX_ABORT interrupt when flushing FIFO.
	 */
	if ((controller->ic_intr_stat &
  181df9:	8b 46 2c             	mov    0x2c(%esi),%eax
  181dfc:	25 c0 00 00 00       	and    $0xc0,%eax
  181e01:	83 f8 40             	cmp    $0x40,%eax
  181e04:	75 63                	jne    181e69 <i2c_isr_irq_handler+0xff>

	*status = QM_I2C_TX_ABORT;

	/* Get source of TX_ABRT interrupt. */
	*status |=
	    (controller->ic_tx_abrt_source & QM_I2C_IC_TX_ABRT_SOURCE_ALL_MASK);
  181e06:	8b 86 80 00 00 00    	mov    0x80(%esi),%eax
  181e0c:	89 c2                	mov    %eax,%edx
  181e0e:	81 e2 ff ff 01 00    	and    $0x1ffff,%edx
		    QM_I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT));

	*status = QM_I2C_TX_ABORT;

	/* Get source of TX_ABRT interrupt. */
	*status |=
  181e14:	81 ca 00 00 04 00    	or     $0x40000,%edx
  181e1a:	89 14 24             	mov    %edx,(%esp)
	    (controller->ic_tx_abrt_source & QM_I2C_IC_TX_ABRT_SOURCE_ALL_MASK);

	/* Clear TX ABORT interrupt. */
	controller->ic_clr_tx_abrt;
  181e1d:	8b 56 54             	mov    0x54(%esi),%edx

	/* Mask interrupts. */
	controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  181e20:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)

	return rc = (*status & QM_I2C_TX_ABRT_USER_ABRT) ? -ECANCELED : -EIO;
  181e27:	a9 00 00 01 00       	test   $0x10000,%eax
  181e2c:	74 0a                	je     181e38 <i2c_isr_irq_handler+0xce>
  181e2e:	c7 44 24 04 b8 ff ff 	movl   $0xffffffb8,0x4(%esp)
  181e35:	ff 
  181e36:	eb 08                	jmp    181e40 <i2c_isr_irq_handler+0xd6>
  181e38:	c7 44 24 04 fb ff ff 	movl   $0xfffffffb,0x4(%esp)
  181e3f:	ff 
	qm_i2c_status_t status = 0;
	int rc = 0;

	rc = handle_tx_abrt_common(controller, &status);

	controller_disable(i2c);
  181e40:	89 d8                	mov    %ebx,%eax
  181e42:	e8 e0 fe ff ff       	call   181d27 <controller_disable>
	if (transfer->callback) {
  181e47:	8b 47 14             	mov    0x14(%edi),%eax
  181e4a:	85 c0                	test   %eax,%eax
  181e4c:	74 1b                	je     181e69 <i2c_isr_irq_handler+0xff>
		transfer->callback(transfer->callback_data, rc, status,
  181e4e:	8b 6f 14             	mov    0x14(%edi),%ebp
  181e51:	8b 14 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%edx
  181e58:	8b 47 18             	mov    0x18(%edi),%eax
  181e5b:	52                   	push   %edx
  181e5c:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  181e60:	8b 54 24 08          	mov    0x8(%esp),%edx
  181e64:	ff d5                	call   *%ebp
  181e66:	83 c4 04             	add    $0x4,%esp
	    QM_I2C_IC_INTR_STAT_TX_ABRT) {
		handle_irq_tx_abrt(i2c, transfer, controller);
	}

	/* Master mode. */
	if (controller->ic_con & QM_I2C_IC_CON_MASTER_MODE) {
  181e69:	8b 06                	mov    (%esi),%eax
  181e6b:	a8 01                	test   $0x1,%al
  181e6d:	0f 84 d4 01 00 00    	je     182047 <i2c_isr_irq_handler+0x2dd>
		/* Check for RX_OVER error. */
		if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_OVER) {
  181e73:	8b 46 2c             	mov    0x2c(%esi),%eax
  181e76:	a8 02                	test   $0x2,%al
  181e78:	74 35                	je     181eaf <i2c_isr_irq_handler+0x145>
			/* Clear interrupt. */
			controller->ic_clr_rx_over;
  181e7a:	8b 46 48             	mov    0x48(%esi),%eax

			/* Mask interrupts. */
			controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  181e7d:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)

			controller_disable(i2c);
  181e84:	89 d8                	mov    %ebx,%eax
  181e86:	e8 9c fe ff ff       	call   181d27 <controller_disable>
			if (transfer->callback) {
  181e8b:	8b 47 14             	mov    0x14(%edi),%eax
  181e8e:	85 c0                	test   %eax,%eax
  181e90:	74 1d                	je     181eaf <i2c_isr_irq_handler+0x145>
				transfer->callback(transfer->callback_data,
  181e92:	8b 6f 14             	mov    0x14(%edi),%ebp
  181e95:	8b 14 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%edx
  181e9c:	8b 47 18             	mov    0x18(%edi),%eax
  181e9f:	52                   	push   %edx
  181ea0:	b9 00 00 10 00       	mov    $0x100000,%ecx
  181ea5:	ba fb ff ff ff       	mov    $0xfffffffb,%edx
  181eaa:	ff d5                	call   *%ebp
  181eac:	83 c4 04             	add    $0x4,%esp
i2c_isr_master_handler(const qm_i2c_t i2c,
		       const volatile qm_i2c_transfer_t *const transfer,
		       qm_i2c_reg_t *const controller)
{
	uint32_t count_tx;
	uint32_t read_buffer_remaining = transfer->rx_len - i2c_read_pos[i2c];
  181eaf:	8b 57 0c             	mov    0xc(%edi),%edx
  181eb2:	8b 04 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%eax
  181eb9:	29 c2                	sub    %eax,%edx
  181ebb:	89 14 24             	mov    %edx,(%esp)
	uint32_t write_buffer_remaining = transfer->tx_len - i2c_write_pos[i2c];
  181ebe:	8b 57 04             	mov    0x4(%edi),%edx
  181ec1:	8b 04 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%eax
  181ec8:	29 c2                	sub    %eax,%edx
  181eca:	89 d5                	mov    %edx,%ebp
	uint32_t missing_bytes;

	/* RX read from buffer. */
	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_FULL) {
  181ecc:	8b 46 2c             	mov    0x2c(%esi),%eax
  181ecf:	a8 04                	test   $0x4,%al
  181ed1:	75 68                	jne    181f3b <i2c_isr_irq_handler+0x1d1>
  181ed3:	e9 84 00 00 00       	jmp    181f5c <i2c_isr_irq_handler+0x1f2>

		while (read_buffer_remaining && controller->ic_rxflr) {
			transfer->rx[i2c_read_pos[i2c]] =
  181ed8:	8b 57 08             	mov    0x8(%edi),%edx
  181edb:	8b 04 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%eax
			    controller->ic_data_cmd;
  181ee2:	8b 4e 10             	mov    0x10(%esi),%ecx

	/* RX read from buffer. */
	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_FULL) {

		while (read_buffer_remaining && controller->ic_rxflr) {
			transfer->rx[i2c_read_pos[i2c]] =
  181ee5:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			    controller->ic_data_cmd;
			read_buffer_remaining--;
			i2c_read_pos[i2c]++;
  181ee8:	8b 04 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%eax
  181eef:	40                   	inc    %eax
  181ef0:	89 04 9d 14 01 28 00 	mov    %eax,0x280114(,%ebx,4)

			if (read_buffer_remaining == 0) {
  181ef7:	ff 0c 24             	decl   (%esp)
  181efa:	75 43                	jne    181f3f <i2c_isr_irq_handler+0x1d5>
				/*
				 * Mask RX full interrupt if transfer
				 * complete.
				 */
				controller->ic_intr_mask &=
  181efc:	8b 46 30             	mov    0x30(%esi),%eax
  181eff:	83 e0 eb             	and    $0xffffffeb,%eax
  181f02:	89 46 30             	mov    %eax,0x30(%esi)
				    ~(QM_I2C_IC_INTR_MASK_RX_FULL |
				      QM_I2C_IC_INTR_MASK_TX_EMPTY);

				if (transfer->stop) {
  181f05:	8a 47 10             	mov    0x10(%edi),%al
  181f08:	84 c0                	test   %al,%al
  181f0a:	74 07                	je     181f13 <i2c_isr_irq_handler+0x1a9>
					controller_disable(i2c);
  181f0c:	89 d8                	mov    %ebx,%eax
  181f0e:	e8 14 fe ff ff       	call   181d27 <controller_disable>
				}

				if (transfer->callback) {
  181f13:	8b 47 14             	mov    0x14(%edi),%eax
  181f16:	85 c0                	test   %eax,%eax
  181f18:	74 25                	je     181f3f <i2c_isr_irq_handler+0x1d5>
					transfer->callback(
  181f1a:	8b 47 14             	mov    0x14(%edi),%eax
  181f1d:	89 c5                	mov    %eax,%ebp
  181f1f:	8b 14 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%edx
  181f26:	8b 47 18             	mov    0x18(%edi),%eax
  181f29:	52                   	push   %edx
  181f2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  181f2f:	ba 00 00 00 00       	mov    $0x0,%edx
  181f34:	ff d5                	call   *%ebp
  181f36:	83 c4 04             	add    $0x4,%esp
  181f39:	eb 04                	jmp    181f3f <i2c_isr_irq_handler+0x1d5>
  181f3b:	89 54 24 04          	mov    %edx,0x4(%esp)
	uint32_t missing_bytes;

	/* RX read from buffer. */
	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_FULL) {

		while (read_buffer_remaining && controller->ic_rxflr) {
  181f3f:	83 3c 24 00          	cmpl   $0x0,(%esp)
  181f43:	74 07                	je     181f4c <i2c_isr_irq_handler+0x1e2>
  181f45:	8b 46 78             	mov    0x78(%esi),%eax
  181f48:	85 c0                	test   %eax,%eax
  181f4a:	75 8c                	jne    181ed8 <i2c_isr_irq_handler+0x16e>
  181f4c:	8b 6c 24 04          	mov    0x4(%esp),%ebp
					    QM_I2C_IDLE, i2c_read_pos[i2c]);
				}
			}
		}

		if (read_buffer_remaining > 0 &&
  181f50:	8b 04 24             	mov    (%esp),%eax
  181f53:	48                   	dec    %eax
  181f54:	83 f8 04             	cmp    $0x4,%eax
  181f57:	77 03                	ja     181f5c <i2c_isr_irq_handler+0x1f2>
			/*
			 * Adjust the RX threshold so the next 'RX_FULL'
			 * interrupt is generated when all the remaining
			 * data are received.
			 */
			controller->ic_rx_tl = read_buffer_remaining - 1;
  181f59:	89 46 38             	mov    %eax,0x38(%esi)
		 * RX_FULL INTR is autocleared when the buffer levels goes below
		 * the threshold.
		 */
	}

	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_EMPTY) {
  181f5c:	8b 46 2c             	mov    0x2c(%esi),%eax
  181f5f:	a8 10                	test   $0x10,%al
  181f61:	0f 84 d4 02 00 00    	je     18223b <i2c_isr_irq_handler+0x4d1>

		if ((controller->ic_status & QM_I2C_IC_STATUS_TFE) &&
  181f67:	8b 46 70             	mov    0x70(%esi),%eax
  181f6a:	a8 04                	test   $0x4,%al
  181f6c:	74 46                	je     181fb4 <i2c_isr_irq_handler+0x24a>
		    (transfer->tx != NULL) && (write_buffer_remaining == 0) &&
  181f6e:	8b 07                	mov    (%edi),%eax
		 */
	}

	if (controller->ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_EMPTY) {

		if ((controller->ic_status & QM_I2C_IC_STATUS_TFE) &&
  181f70:	85 c0                	test   %eax,%eax
  181f72:	74 40                	je     181fb4 <i2c_isr_irq_handler+0x24a>
		    (transfer->tx != NULL) && (write_buffer_remaining == 0) &&
  181f74:	0b 2c 24             	or     (%esp),%ebp
  181f77:	75 3b                	jne    181fb4 <i2c_isr_irq_handler+0x24a>
		    (read_buffer_remaining == 0)) {

			controller->ic_intr_mask &=
  181f79:	8b 46 30             	mov    0x30(%esi),%eax
  181f7c:	83 e0 ef             	and    $0xffffffef,%eax
  181f7f:	89 46 30             	mov    %eax,0x30(%esi)

			/*
			 * If this is not a combined transaction, disable the
			 * controller now.
			 */
			if (transfer->stop) {
  181f82:	8a 47 10             	mov    0x10(%edi),%al
  181f85:	84 c0                	test   %al,%al
  181f87:	74 07                	je     181f90 <i2c_isr_irq_handler+0x226>
				controller_disable(i2c);
  181f89:	89 d8                	mov    %ebx,%eax
  181f8b:	e8 97 fd ff ff       	call   181d27 <controller_disable>
			}

			/* Callback. */
			if (transfer->callback) {
  181f90:	8b 47 14             	mov    0x14(%edi),%eax
  181f93:	85 c0                	test   %eax,%eax
  181f95:	74 1d                	je     181fb4 <i2c_isr_irq_handler+0x24a>
				transfer->callback(transfer->callback_data, 0,
  181f97:	8b 6f 14             	mov    0x14(%edi),%ebp
  181f9a:	8b 14 9d 18 01 28 00 	mov    0x280118(,%ebx,4),%edx
  181fa1:	8b 47 18             	mov    0x18(%edi),%eax
  181fa4:	52                   	push   %edx
  181fa5:	b9 00 00 00 00       	mov    $0x0,%ecx
  181faa:	ba 00 00 00 00       	mov    $0x0,%edx
  181faf:	ff d5                	call   *%ebp
  181fb1:	83 c4 04             	add    $0x4,%esp
						   QM_I2C_IDLE,
						   i2c_write_pos[i2c]);
			}
		}

		write_buffer_remaining =
  181fb4:	89 f1                	mov    %esi,%ecx
  181fb6:	89 fa                	mov    %edi,%edx
  181fb8:	89 d8                	mov    %ebx,%eax
  181fba:	e8 c9 fc ff ff       	call   181c88 <master_fill_tx_fifo>
		 * waiting for some bytes after sending read request on the
		 * previous interruption. We have to take into account this
		 * value in order to not send too much request so we won't fall
		 * into rx overflow.
		 */
		missing_bytes = read_buffer_remaining - i2c_read_cmd_send[i2c];
  181fbf:	8b 14 9d 10 01 28 00 	mov    0x280110(,%ebx,4),%edx
  181fc6:	8b 0c 24             	mov    (%esp),%ecx
  181fc9:	29 d1                	sub    %edx,%ecx
  181fcb:	89 ca                	mov    %ecx,%edx
		 * cannot be more than the number of expected bytes.
		 */
		QM_ASSERT(controller->ic_rxflr <= missing_bytes);

		/* Count_tx is the remaining size in the FIFO. */
		count_tx = QM_I2C_FIFO_SIZE - controller->ic_txflr;
  181fcd:	8b 4e 74             	mov    0x74(%esi),%ecx
  181fd0:	bd 10 00 00 00       	mov    $0x10,%ebp
  181fd5:	29 cd                	sub    %ecx,%ebp

		if (count_tx > missing_bytes) {
  181fd7:	39 ea                	cmp    %ebp,%edx
  181fd9:	73 04                	jae    181fdf <i2c_isr_irq_handler+0x275>
			count_tx -= missing_bytes;
  181fdb:	29 d5                	sub    %edx,%ebp
  181fdd:	eb 39                	jmp    182018 <i2c_isr_irq_handler+0x2ae>
		} else {
			count_tx = 0;
  181fdf:	bd 00 00 00 00       	mov    $0x0,%ebp
  181fe4:	eb 32                	jmp    182018 <i2c_isr_irq_handler+0x2ae>
		}

		while (i2c_read_cmd_send[i2c] &&
		       (write_buffer_remaining == 0) && count_tx) {
			count_tx--;
  181fe6:	4d                   	dec    %ebp
			i2c_read_cmd_send[i2c]--;
  181fe7:	8b 14 9d 10 01 28 00 	mov    0x280110(,%ebx,4),%edx
  181fee:	4a                   	dec    %edx
  181fef:	89 14 9d 10 01 28 00 	mov    %edx,0x280110(,%ebx,4)

			/*
			 * If transfer is a combined transfer, only send stop at
			 * end of the transfer sequence.
			 */
			if (transfer->stop && (i2c_read_cmd_send[i2c] == 0)) {
  181ff6:	8a 57 10             	mov    0x10(%edi),%dl
  181ff9:	84 d2                	test   %dl,%dl
  181ffb:	74 14                	je     182011 <i2c_isr_irq_handler+0x2a7>
  181ffd:	8b 14 9d 10 01 28 00 	mov    0x280110(,%ebx,4),%edx
  182004:	85 d2                	test   %edx,%edx
  182006:	75 09                	jne    182011 <i2c_isr_irq_handler+0x2a7>
				controller->ic_data_cmd =
  182008:	c7 46 10 00 03 00 00 	movl   $0x300,0x10(%esi)
  18200f:	eb 07                	jmp    182018 <i2c_isr_irq_handler+0x2ae>
				    QM_I2C_IC_DATA_CMD_READ |
				    QM_I2C_IC_DATA_CMD_STOP_BIT_CTRL;
			} else {
				controller->ic_data_cmd =
  182011:	c7 46 10 00 01 00 00 	movl   $0x100,0x10(%esi)
			count_tx -= missing_bytes;
		} else {
			count_tx = 0;
		}

		while (i2c_read_cmd_send[i2c] &&
  182018:	8b 14 9d 10 01 28 00 	mov    0x280110(,%ebx,4),%edx
  18201f:	85 d2                	test   %edx,%edx
  182021:	74 0d                	je     182030 <i2c_isr_irq_handler+0x2c6>
		       (write_buffer_remaining == 0) && count_tx) {
  182023:	85 c0                	test   %eax,%eax
  182025:	0f 94 c2             	sete   %dl
  182028:	85 ed                	test   %ebp,%ebp
  18202a:	74 04                	je     182030 <i2c_isr_irq_handler+0x2c6>
  18202c:	84 d2                	test   %dl,%dl
  18202e:	75 b6                	jne    181fe6 <i2c_isr_irq_handler+0x27c>
				    QM_I2C_IC_DATA_CMD_READ;
			}
		}

		/* Generate a tx_empty interrupt when TX FIFO is fully empty. */
		if ((write_buffer_remaining == 0) &&
  182030:	8b 0c 24             	mov    (%esp),%ecx
  182033:	09 c1                	or     %eax,%ecx
  182035:	0f 85 00 02 00 00    	jne    18223b <i2c_isr_irq_handler+0x4d1>
		    (read_buffer_remaining == 0)) {
			controller->ic_tx_tl = 0;
  18203b:	c7 46 3c 00 00 00 00 	movl   $0x0,0x3c(%esi)
  182042:	e9 f4 01 00 00       	jmp    18223b <i2c_isr_irq_handler+0x4d1>
i2c_isr_slave_handler(const qm_i2c_t i2c,
		      const volatile qm_i2c_transfer_t *const transfer,
		      qm_i2c_reg_t *const controller)
{
	/* Save register to speed up process in interrupt. */
	uint32_t ic_intr_stat = controller->ic_intr_stat;
  182047:	8b 46 2c             	mov    0x2c(%esi),%eax
  18204a:	89 04 24             	mov    %eax,(%esp)
	 * - General call (will only appear after few SCL clock cycles after
	 *   start interrupt).
	 */

	/* Stop condition detected. */
	if (ic_intr_stat & QM_I2C_IC_INTR_STAT_STOP_DETECTED) {
  18204d:	f6 c4 02             	test   $0x2,%ah
  182050:	0f 84 97 00 00 00    	je     1820ed <i2c_isr_irq_handler+0x383>
		/* Empty RX FIFO. */
		empty_rx_fifo(i2c, transfer, controller);
  182056:	89 f1                	mov    %esi,%ecx
  182058:	89 fa                	mov    %edi,%edx
  18205a:	89 d8                	mov    %ebx,%eax
  18205c:	e8 16 fb ff ff       	call   181b77 <empty_rx_fifo>
		 * been addressed.
		 * Driver only knows it has been addressed if:
		 * - It already triggered an interrupt on TX_EMPTY or RX_FULL
		 * - Data was read from RX FIFO.
		 */
		if ((transfer->stop == true) &&
  182061:	8a 47 10             	mov    0x10(%edi),%al
  182064:	84 c0                	test   %al,%al
  182066:	74 1b                	je     182083 <i2c_isr_irq_handler+0x319>
		    (is_addressed || (i2c_read_pos[i2c] != 0))) {
  182068:	a0 0c 01 28 00       	mov    0x28010c,%al
		 * been addressed.
		 * Driver only knows it has been addressed if:
		 * - It already triggered an interrupt on TX_EMPTY or RX_FULL
		 * - Data was read from RX FIFO.
		 */
		if ((transfer->stop == true) &&
  18206d:	84 c0                	test   %al,%al
  18206f:	75 0b                	jne    18207c <i2c_isr_irq_handler+0x312>
		    (is_addressed || (i2c_read_pos[i2c] != 0))) {
  182071:	8b 04 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%eax
  182078:	85 c0                	test   %eax,%eax
  18207a:	74 07                	je     182083 <i2c_isr_irq_handler+0x319>
			controller_disable(i2c);
  18207c:	89 d8                	mov    %ebx,%eax
  18207e:	e8 a4 fc ff ff       	call   181d27 <controller_disable>
		}

		if (transfer->callback) {
  182083:	8b 47 14             	mov    0x14(%edi),%eax
  182086:	85 c0                	test   %eax,%eax
  182088:	74 2d                	je     1820b7 <i2c_isr_irq_handler+0x34d>
			transfer->callback(
  18208a:	8b 6f 14             	mov    0x14(%edi),%ebp
			    transfer->callback_data, 0, QM_I2C_STOP_DETECTED,
			    (transfer_ongoing) ? i2c_read_pos[i2c] : 0);
  18208d:	a0 0e 01 28 00       	mov    0x28010e,%al
		    (is_addressed || (i2c_read_pos[i2c] != 0))) {
			controller_disable(i2c);
		}

		if (transfer->callback) {
			transfer->callback(
  182092:	84 c0                	test   %al,%al
  182094:	74 09                	je     18209f <i2c_isr_irq_handler+0x335>
  182096:	8b 14 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%edx
  18209d:	eb 05                	jmp    1820a4 <i2c_isr_irq_handler+0x33a>
  18209f:	ba 00 00 00 00       	mov    $0x0,%edx
  1820a4:	8b 47 18             	mov    0x18(%edi),%eax
  1820a7:	52                   	push   %edx
  1820a8:	b9 00 00 00 02       	mov    $0x2000000,%ecx
  1820ad:	ba 00 00 00 00       	mov    $0x0,%edx
  1820b2:	ff d5                	call   *%ebp
  1820b4:	83 c4 04             	add    $0x4,%esp
			    transfer->callback_data, 0, QM_I2C_STOP_DETECTED,
			    (transfer_ongoing) ? i2c_read_pos[i2c] : 0);
		}
		i2c_write_pos[i2c] = 0;
  1820b7:	c7 04 9d 18 01 28 00 	movl   $0x0,0x280118(,%ebx,4)
  1820be:	00 00 00 00 
		i2c_read_pos[i2c] = 0;
  1820c2:	c7 04 9d 14 01 28 00 	movl   $0x0,0x280114(,%ebx,4)
  1820c9:	00 00 00 00 

		controller->ic_intr_mask &= ~QM_I2C_IC_INTR_MASK_TX_EMPTY;
  1820cd:	8b 46 30             	mov    0x30(%esi),%eax
  1820d0:	83 e0 ef             	and    $0xffffffef,%eax
  1820d3:	89 46 30             	mov    %eax,0x30(%esi)

		is_addressed = false;
  1820d6:	c6 05 0c 01 28 00 00 	movb   $0x0,0x28010c

		/* Clear stop interrupt. */
		controller->ic_clr_stop_det;
  1820dd:	8b 46 60             	mov    0x60(%esi),%eax

		/*
		 * Read again the interrupt status in case of a start interrupt
		 * has been triggered in the meantime.
		 */
		ic_intr_stat = controller->ic_intr_stat;
  1820e0:	8b 46 2c             	mov    0x2c(%esi),%eax
  1820e3:	89 04 24             	mov    %eax,(%esp)
		first_start = true;
  1820e6:	c6 05 0d 01 28 00 01 	movb   $0x1,0x28010d
	/*
	 * START or RESTART condition detected.
	 * The RESTART_DETECTED interrupt is not used as it is redundant with
	 * the START_DETECTED interrupt.
	 */
	if (ic_intr_stat & QM_I2C_IC_INTR_STAT_START_DETECTED) {
  1820ed:	f7 04 24 00 04 00 00 	testl  $0x400,(%esp)
  1820f4:	74 71                	je     182167 <i2c_isr_irq_handler+0x3fd>
		if (!first_start) {
  1820f6:	a0 0d 01 28 00       	mov    0x28010d,%al
  1820fb:	84 c0                	test   %al,%al
  1820fd:	75 0b                	jne    18210a <i2c_isr_irq_handler+0x3a0>
			empty_rx_fifo(i2c, transfer, controller);
  1820ff:	89 f1                	mov    %esi,%ecx
  182101:	89 fa                	mov    %edi,%edx
  182103:	89 d8                	mov    %ebx,%eax
  182105:	e8 6d fa ff ff       	call   181b77 <empty_rx_fifo>
		}
		if (transfer->callback) {
  18210a:	8b 47 14             	mov    0x14(%edi),%eax
  18210d:	85 c0                	test   %eax,%eax
  18210f:	74 2f                	je     182140 <i2c_isr_irq_handler+0x3d6>
			transfer->callback(
  182111:	8b 47 14             	mov    0x14(%edi),%eax
  182114:	89 c5                	mov    %eax,%ebp
			    transfer->callback_data, 0, QM_I2C_START_DETECTED,
			    (transfer_ongoing) ? i2c_read_pos[i2c] : 0);
  182116:	a0 0e 01 28 00       	mov    0x28010e,%al
	if (ic_intr_stat & QM_I2C_IC_INTR_STAT_START_DETECTED) {
		if (!first_start) {
			empty_rx_fifo(i2c, transfer, controller);
		}
		if (transfer->callback) {
			transfer->callback(
  18211b:	84 c0                	test   %al,%al
  18211d:	74 09                	je     182128 <i2c_isr_irq_handler+0x3be>
  18211f:	8b 14 9d 14 01 28 00 	mov    0x280114(,%ebx,4),%edx
  182126:	eb 05                	jmp    18212d <i2c_isr_irq_handler+0x3c3>
  182128:	ba 00 00 00 00       	mov    $0x0,%edx
  18212d:	8b 47 18             	mov    0x18(%edi),%eax
  182130:	52                   	push   %edx
  182131:	b9 00 00 40 00       	mov    $0x400000,%ecx
  182136:	ba 00 00 00 00       	mov    $0x0,%edx
  18213b:	ff d5                	call   *%ebp
  18213d:	83 c4 04             	add    $0x4,%esp
			    transfer->callback_data, 0, QM_I2C_START_DETECTED,
			    (transfer_ongoing) ? i2c_read_pos[i2c] : 0);
		}
		transfer_ongoing = true;
  182140:	c6 05 0e 01 28 00 01 	movb   $0x1,0x28010e
		i2c_write_pos[i2c] = 0;
  182147:	c7 04 9d 18 01 28 00 	movl   $0x0,0x280118(,%ebx,4)
  18214e:	00 00 00 00 
		i2c_read_pos[i2c] = 0;
  182152:	c7 04 9d 14 01 28 00 	movl   $0x0,0x280114(,%ebx,4)
  182159:	00 00 00 00 

		/* Clear Start detected interrupt. */
		controller->ic_clr_start_det;
  18215d:	8b 46 64             	mov    0x64(%esi),%eax
		first_start = false;
  182160:	c6 05 0d 01 28 00 00 	movb   $0x0,0x28010d
	 *
	 * RX FIFO overflow must always be checked though, in case of an
	 * overflow happens during RX_FULL interrupt handling.
	 */
	/* RX FIFO Overflow. */
	if (ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_OVER) {
  182167:	f6 04 24 02          	testb  $0x2,(%esp)
  18216b:	74 23                	je     182190 <i2c_isr_irq_handler+0x426>
		controller->ic_clr_rx_over;
  18216d:	8b 46 48             	mov    0x48(%esi),%eax
		if (transfer->callback) {
  182170:	8b 47 14             	mov    0x14(%edi),%eax
  182173:	85 c0                	test   %eax,%eax
  182175:	74 19                	je     182190 <i2c_isr_irq_handler+0x426>
			transfer->callback(transfer->callback_data, 0,
  182177:	8b 47 14             	mov    0x14(%edi),%eax
  18217a:	89 c5                	mov    %eax,%ebp
  18217c:	8b 47 18             	mov    0x18(%edi),%eax
  18217f:	6a 00                	push   $0x0
  182181:	b9 00 00 10 00       	mov    $0x100000,%ecx
  182186:	ba 00 00 00 00       	mov    $0x0,%edx
  18218b:	ff d5                	call   *%ebp
  18218d:	83 c4 04             	add    $0x4,%esp
					   QM_I2C_RX_OVER, 0);
		}
	}

	/* RX FIFO FULL. */
	if (ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_FULL) {
  182190:	f6 04 24 04          	testb  $0x4,(%esp)
  182194:	74 17                	je     1821ad <i2c_isr_irq_handler+0x443>
		/* Empty RX FIFO. */
		empty_rx_fifo(i2c, transfer, controller);
  182196:	89 f1                	mov    %esi,%ecx
  182198:	89 fa                	mov    %edi,%edx
  18219a:	89 d8                	mov    %ebx,%eax
  18219c:	e8 d6 f9 ff ff       	call   181b77 <empty_rx_fifo>

		/* Track activity of controller when addressed. */
		is_addressed = true;
  1821a1:	c6 05 0c 01 28 00 01 	movb   $0x1,0x28010c
  1821a8:	e9 8e 00 00 00       	jmp    18223b <i2c_isr_irq_handler+0x4d1>
	 * TX FIFO empty interrupt must be handled after RX DONE interrupt: when
	 * RX DONE is triggered, TX FIFO is flushed (thus emptied) creating a
	 * TX_ABORT interrupt and a TX_EMPTY condition. TX_ABORT shall be
	 * cleared and TX_EMPTY interrupt disabled.
	 */
	else if (ic_intr_stat & QM_I2C_IC_INTR_STAT_RD_REQ) {
  1821ad:	f6 04 24 20          	testb  $0x20,(%esp)
  1821b1:	74 20                	je     1821d3 <i2c_isr_irq_handler+0x469>
		/* Clear read request interrupt. */
		controller->ic_clr_rd_req;
  1821b3:	8b 46 50             	mov    0x50(%esi),%eax

		/* Track activity of controller when addressed. */
		is_addressed = true;
  1821b6:	c6 05 0c 01 28 00 01 	movb   $0x1,0x28010c

		slave_fill_tx_fifo(i2c, transfer, controller);
  1821bd:	89 f1                	mov    %esi,%ecx
  1821bf:	89 fa                	mov    %edi,%edx
  1821c1:	89 d8                	mov    %ebx,%eax
  1821c3:	e8 32 fa ff ff       	call   181bfa <slave_fill_tx_fifo>

		/* Enable TX EMPTY interrupts. */
		controller->ic_intr_mask |= QM_I2C_IC_INTR_MASK_TX_EMPTY;
  1821c8:	8b 46 30             	mov    0x30(%esi),%eax
  1821cb:	83 c8 10             	or     $0x10,%eax
  1821ce:	89 46 30             	mov    %eax,0x30(%esi)
  1821d1:	eb 68                	jmp    18223b <i2c_isr_irq_handler+0x4d1>
	} else if (ic_intr_stat & QM_I2C_IC_INTR_STAT_RX_DONE) {
  1821d3:	f6 04 24 80          	testb  $0x80,(%esp)
  1821d7:	74 14                	je     1821ed <i2c_isr_irq_handler+0x483>
		controller->ic_clr_rx_done;
  1821d9:	8b 46 58             	mov    0x58(%esi),%eax
		/* Clear TX ABORT as it is triggered when FIFO is flushed. */
		controller->ic_clr_tx_abrt;
  1821dc:	8b 46 54             	mov    0x54(%esi),%eax

		/* Disable TX EMPTY interrupt. */
		controller->ic_intr_mask &= ~QM_I2C_IC_INTR_MASK_TX_EMPTY;
  1821df:	8b 46 30             	mov    0x30(%esi),%eax
  1821e2:	83 e0 ef             	and    $0xffffffef,%eax
  1821e5:	89 46 30             	mov    %eax,0x30(%esi)

		/*
		 * Read again the interrupt status in case of a stop or a start
		 * interrupt has been triggered in the meantime.
		 */
		ic_intr_stat = controller->ic_intr_stat;
  1821e8:	8b 46 2c             	mov    0x2c(%esi),%eax
  1821eb:	eb 4e                	jmp    18223b <i2c_isr_irq_handler+0x4d1>

	} else if (ic_intr_stat & QM_I2C_IC_INTR_STAT_TX_EMPTY) {
  1821ed:	f6 04 24 10          	testb  $0x10,(%esp)
  1821f1:	74 0d                	je     182200 <i2c_isr_irq_handler+0x496>
		slave_fill_tx_fifo(i2c, transfer, controller);
  1821f3:	89 f1                	mov    %esi,%ecx
  1821f5:	89 fa                	mov    %edi,%edx
  1821f7:	89 d8                	mov    %ebx,%eax
  1821f9:	e8 fc f9 ff ff       	call   181bfa <slave_fill_tx_fifo>
  1821fe:	eb 3b                	jmp    18223b <i2c_isr_irq_handler+0x4d1>
	}

	/* General call detected. */
	else if (ic_intr_stat & QM_I2C_IC_INTR_STAT_GEN_CALL_DETECTED) {
  182200:	f7 04 24 00 08 00 00 	testl  $0x800,(%esp)
  182207:	74 32                	je     18223b <i2c_isr_irq_handler+0x4d1>
		if (transfer->callback) {
  182209:	8b 47 14             	mov    0x14(%edi),%eax
  18220c:	85 c0                	test   %eax,%eax
  18220e:	74 1c                	je     18222c <i2c_isr_irq_handler+0x4c2>
			transfer->callback(transfer->callback_data, 0,
  182210:	8b 5f 14             	mov    0x14(%edi),%ebx
  182213:	8b 47 18             	mov    0x18(%edi),%eax
  182216:	6a 00                	push   $0x0
  182218:	b9 00 00 00 04       	mov    $0x4000000,%ecx
  18221d:	ba 00 00 00 00       	mov    $0x0,%edx
  182222:	ff d3                	call   *%ebx
  182224:	83 c4 04             	add    $0x4,%esp
  182227:	eb 03                	jmp    18222c <i2c_isr_irq_handler+0x4c2>
		 * read too early.
		 */
		while (controller->ic_intr_stat &
		       QM_I2C_IC_INTR_STAT_GEN_CALL_DETECTED) {
			/* Clear General call interrupt. */
			controller->ic_clr_gen_call;
  182229:	8b 46 68             	mov    0x68(%esi),%eax
		/*
		 * Workaround.
		 * The interrupt may not actually be cleared when register is
		 * read too early.
		 */
		while (controller->ic_intr_stat &
  18222c:	8b 46 2c             	mov    0x2c(%esi),%eax
  18222f:	f6 c4 08             	test   $0x8,%ah
  182232:	75 f5                	jne    182229 <i2c_isr_irq_handler+0x4bf>
#else
		controller->ic_clr_gen_call;
#endif

		/* Track activity of controller when addressed. */
		is_addressed = true;
  182234:	c6 05 0c 01 28 00 01 	movb   $0x1,0x28010c
	}
	/* Slave mode. */
	else {
		i2c_isr_slave_handler(i2c, transfer, controller);
	}
}
  18223b:	83 c4 08             	add    $0x8,%esp
  18223e:	5b                   	pop    %ebx
  18223f:	5e                   	pop    %esi
  182240:	5f                   	pop    %edi
  182241:	5d                   	pop    %ebp
  182242:	c3                   	ret    

00182243 <get_lo_cnt>:
	QM_ISR_EOI(QM_IRQ_I2C_1_INT_VECTOR);
}
#endif

static uint32_t get_lo_cnt(uint32_t lo_time_ns)
{
  182243:	53                   	push   %ebx
  182244:	89 c3                	mov    %eax,%ebx
	return (((get_i2c_clk_freq_in_mhz() * lo_time_ns) / 1000) - 1);
  182246:	e8 19 f9 ff ff       	call   181b64 <get_i2c_clk_freq_in_mhz>
  18224b:	0f af d8             	imul   %eax,%ebx
  18224e:	b9 d3 4d 62 10       	mov    $0x10624dd3,%ecx
  182253:	89 d8                	mov    %ebx,%eax
  182255:	f7 e1                	mul    %ecx
  182257:	c1 ea 06             	shr    $0x6,%edx
  18225a:	8d 42 ff             	lea    -0x1(%edx),%eax
}
  18225d:	5b                   	pop    %ebx
  18225e:	c3                   	ret    

0018225f <get_hi_cnt>:

static uint32_t get_hi_cnt(qm_i2c_t i2c, uint32_t hi_time_ns)
{
  18225f:	56                   	push   %esi
  182260:	53                   	push   %ebx
  182261:	89 c3                	mov    %eax,%ebx
  182263:	89 d6                	mov    %edx,%esi
	return ((((get_i2c_clk_freq_in_mhz() * hi_time_ns) / 1000) - 7 -
  182265:	e8 fa f8 ff ff       	call   181b64 <get_i2c_clk_freq_in_mhz>
  18226a:	0f af f0             	imul   %eax,%esi
  18226d:	b9 d3 4d 62 10       	mov    $0x10624dd3,%ecx
  182272:	89 f0                	mov    %esi,%eax
  182274:	f7 e1                	mul    %ecx
  182276:	c1 ea 06             	shr    $0x6,%edx
		 QM_I2C[i2c]->ic_fs_spklen) +
  182279:	8b 04 9d 18 00 28 00 	mov    0x280018(,%ebx,4),%eax
  182280:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
	return (((get_i2c_clk_freq_in_mhz() * lo_time_ns) / 1000) - 1);
}

static uint32_t get_hi_cnt(qm_i2c_t i2c, uint32_t hi_time_ns)
{
	return ((((get_i2c_clk_freq_in_mhz() * hi_time_ns) / 1000) - 7 -
  182286:	29 c2                	sub    %eax,%edx
  182288:	8d 42 fa             	lea    -0x6(%edx),%eax
		 QM_I2C[i2c]->ic_fs_spklen) +
		1);
}
  18228b:	5b                   	pop    %ebx
  18228c:	5e                   	pop    %esi
  18228d:	c3                   	ret    

0018228e <qm_i2c_0_irq_isr>:
	}
}

QM_ISR_DECLARE(qm_i2c_0_irq_isr)
{
	i2c_isr_irq_handler(QM_I2C_0);
  18228e:	b8 00 00 00 00       	mov    $0x0,%eax
  182293:	e8 d2 fa ff ff       	call   181d6a <i2c_isr_irq_handler>
  182298:	c3                   	ret    

00182299 <qm_i2c_set_config>:
		 QM_I2C[i2c]->ic_fs_spklen) +
		1);
}

int qm_i2c_set_config(const qm_i2c_t i2c, const qm_i2c_config_t *const cfg)
{
  182299:	55                   	push   %ebp
  18229a:	57                   	push   %edi
  18229b:	56                   	push   %esi
  18229c:	53                   	push   %ebx
  18229d:	83 ec 0c             	sub    $0xc,%esp
  1822a0:	89 c3                	mov    %eax,%ebx
  1822a2:	89 d7                	mov    %edx,%edi
	uint32_t lcnt = 0, hcnt = 0, min_lcnt = 0, lcnt_diff = 0, ic_con = 0;
	QM_CHECK(i2c < QM_I2C_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	qm_i2c_reg_t *const controller = QM_I2C[i2c];
  1822a4:	8b 34 85 18 00 28 00 	mov    0x280018(,%eax,4),%esi

	i2c_dma_context[i2c].ongoing_dma_rx_operation = false;
  1822ab:	c1 e0 06             	shl    $0x6,%eax
  1822ae:	c6 80 95 02 28 00 00 	movb   $0x0,0x280295(%eax)
	i2c_dma_context[i2c].ongoing_dma_tx_operation = false;
  1822b5:	c6 80 94 02 28 00 00 	movb   $0x0,0x280294(%eax)
	/* Mask all interrupts. */
	controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  1822bc:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)

	/* Disable controller. */
	if (controller_disable(i2c)) {
  1822c3:	89 d8                	mov    %ebx,%eax
  1822c5:	e8 5d fa ff ff       	call   181d27 <controller_disable>
  1822ca:	85 c0                	test   %eax,%eax
  1822cc:	0f 85 7b 01 00 00    	jne    18244d <qm_i2c_set_config+0x1b4>
  1822d2:	89 c5                	mov    %eax,%ebp
		return -EBUSY;
	}

	switch (cfg->mode) {
  1822d4:	8b 47 08             	mov    0x8(%edi),%eax
  1822d7:	85 c0                	test   %eax,%eax
  1822d9:	74 0e                	je     1822e9 <qm_i2c_set_config+0x50>
  1822db:	83 f8 01             	cmp    $0x1,%eax
  1822de:	0f 84 3c 01 00 00    	je     182420 <qm_i2c_set_config+0x187>
  1822e4:	e9 56 01 00 00       	jmp    18243f <qm_i2c_set_config+0x1a6>
		/* Set mode. */
		ic_con = QM_I2C_IC_CON_MASTER_MODE | QM_I2C_IC_CON_RESTART_EN |
			 QM_I2C_IC_CON_SLAVE_DISABLE |
			 /* Set 7/10 bit address mode. */
			 (cfg->address_mode
			  << QM_I2C_IC_CON_10BITADDR_MASTER_OFFSET);
  1822e9:	8b 47 04             	mov    0x4(%edi),%eax
  1822ec:	c1 e0 04             	shl    $0x4,%eax
	}

	switch (cfg->mode) {
	case QM_I2C_MASTER:
		/* Set mode. */
		ic_con = QM_I2C_IC_CON_MASTER_MODE | QM_I2C_IC_CON_RESTART_EN |
  1822ef:	89 c1                	mov    %eax,%ecx
  1822f1:	83 c9 61             	or     $0x61,%ecx
  1822f4:	89 0c 24             	mov    %ecx,(%esp)
		 *    at 50% duty cycle
		 * 2. adjust the hi/lo count to ensure that minimum hi/lo
		 *    timings are guaranteed as per spec.
		 */

		switch (cfg->speed) {
  1822f7:	8b 17                	mov    (%edi),%edx
  1822f9:	83 fa 02             	cmp    $0x2,%edx
  1822fc:	74 4f                	je     18234d <qm_i2c_set_config+0xb4>
  1822fe:	83 fa 03             	cmp    $0x3,%edx
  182301:	0f 84 80 00 00 00    	je     182387 <qm_i2c_set_config+0xee>
  182307:	83 fa 01             	cmp    $0x1,%edx
  18230a:	0f 85 b1 00 00 00    	jne    1823c1 <qm_i2c_set_config+0x128>
		case QM_I2C_SPEED_STD:

			ic_con |= QM_I2C_IC_CON_SPEED_SS;
  182310:	83 c8 63             	or     $0x63,%eax
  182313:	89 04 24             	mov    %eax,(%esp)

			controller->ic_fs_spklen = SPK_LEN_SS;
  182316:	c7 86 a0 00 00 00 01 	movl   $0x1,0xa0(%esi)
  18231d:	00 00 00 

			min_lcnt = get_lo_cnt(QM_I2C_MIN_SS_NS);
  182320:	b8 5c 12 00 00       	mov    $0x125c,%eax
  182325:	e8 19 ff ff ff       	call   182243 <get_lo_cnt>
  18232a:	89 44 24 08          	mov    %eax,0x8(%esp)
			lcnt = get_lo_cnt(QM_I2C_SS_50_DC_NS);
  18232e:	b8 88 13 00 00       	mov    $0x1388,%eax
  182333:	e8 0b ff ff ff       	call   182243 <get_lo_cnt>
  182338:	89 44 24 04          	mov    %eax,0x4(%esp)
			hcnt = get_hi_cnt(i2c, QM_I2C_SS_50_DC_NS);
  18233c:	ba 88 13 00 00       	mov    $0x1388,%edx
  182341:	89 d8                	mov    %ebx,%eax
  182343:	e8 17 ff ff ff       	call   18225f <get_hi_cnt>
			break;
  182348:	e9 89 00 00 00       	jmp    1823d6 <qm_i2c_set_config+0x13d>

		case QM_I2C_SPEED_FAST:
			ic_con |= QM_I2C_IC_CON_SPEED_FS_FSP;
  18234d:	83 c8 65             	or     $0x65,%eax
  182350:	89 04 24             	mov    %eax,(%esp)

			controller->ic_fs_spklen = SPK_LEN_FS_FSP;
  182353:	c7 86 a0 00 00 00 02 	movl   $0x2,0xa0(%esi)
  18235a:	00 00 00 

			min_lcnt = get_lo_cnt(QM_I2C_MIN_FS_NS);
  18235d:	b8 14 05 00 00       	mov    $0x514,%eax
  182362:	e8 dc fe ff ff       	call   182243 <get_lo_cnt>
  182367:	89 44 24 08          	mov    %eax,0x8(%esp)
			lcnt = get_lo_cnt(QM_I2C_FS_50_DC_NS);
  18236b:	b8 e2 04 00 00       	mov    $0x4e2,%eax
  182370:	e8 ce fe ff ff       	call   182243 <get_lo_cnt>
  182375:	89 44 24 04          	mov    %eax,0x4(%esp)
			hcnt = get_hi_cnt(i2c, QM_I2C_FS_50_DC_NS);
  182379:	ba e2 04 00 00       	mov    $0x4e2,%edx
  18237e:	89 d8                	mov    %ebx,%eax
  182380:	e8 da fe ff ff       	call   18225f <get_hi_cnt>
			break;
  182385:	eb 4f                	jmp    1823d6 <qm_i2c_set_config+0x13d>

		case QM_I2C_SPEED_FAST_PLUS:
			ic_con |= QM_I2C_IC_CON_SPEED_FS_FSP;
  182387:	83 c8 65             	or     $0x65,%eax
  18238a:	89 04 24             	mov    %eax,(%esp)

			controller->ic_fs_spklen = SPK_LEN_FS_FSP;
  18238d:	c7 86 a0 00 00 00 02 	movl   $0x2,0xa0(%esi)
  182394:	00 00 00 

			min_lcnt = get_lo_cnt(QM_I2C_MIN_FSP_NS);
  182397:	b8 f4 01 00 00       	mov    $0x1f4,%eax
  18239c:	e8 a2 fe ff ff       	call   182243 <get_lo_cnt>
  1823a1:	89 44 24 08          	mov    %eax,0x8(%esp)
			lcnt = get_lo_cnt(QM_I2C_FSP_50_DC_NS);
  1823a5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
  1823aa:	e8 94 fe ff ff       	call   182243 <get_lo_cnt>
  1823af:	89 44 24 04          	mov    %eax,0x4(%esp)
			hcnt = get_hi_cnt(i2c, QM_I2C_FSP_50_DC_NS);
  1823b3:	ba f4 01 00 00       	mov    $0x1f4,%edx
  1823b8:	89 d8                	mov    %ebx,%eax
  1823ba:	e8 a0 fe ff ff       	call   18225f <get_hi_cnt>
			break;
  1823bf:	eb 15                	jmp    1823d6 <qm_i2c_set_config+0x13d>
		1);
}

int qm_i2c_set_config(const qm_i2c_t i2c, const qm_i2c_config_t *const cfg)
{
	uint32_t lcnt = 0, hcnt = 0, min_lcnt = 0, lcnt_diff = 0, ic_con = 0;
  1823c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1823c8:	00 
  1823c9:	b8 00 00 00 00       	mov    $0x0,%eax
  1823ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1823d5:	00 
			lcnt = get_lo_cnt(QM_I2C_FSP_50_DC_NS);
			hcnt = get_hi_cnt(i2c, QM_I2C_FSP_50_DC_NS);
			break;
		}

		if (hcnt > QM_I2C_IC_HCNT_MAX || hcnt < QM_I2C_IC_HCNT_MIN) {
  1823d6:	8d 50 fa             	lea    -0x6(%eax),%edx
  1823d9:	81 fa ef ff 00 00    	cmp    $0xffef,%edx
  1823df:	77 73                	ja     182454 <qm_i2c_set_config+0x1bb>
			return -EINVAL;
		}

		if (lcnt > QM_I2C_IC_LCNT_MAX || lcnt < QM_I2C_IC_LCNT_MIN) {
  1823e1:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  1823e5:	8d 53 f8             	lea    -0x8(%ebx),%edx
  1823e8:	81 fa ed ff 00 00    	cmp    $0xffed,%edx
  1823ee:	77 6b                	ja     18245b <qm_i2c_set_config+0x1c2>
			return -EINVAL;
		}

		/* Increment minimum low count to account for rounding down. */
		min_lcnt++;
  1823f0:	8b 54 24 08          	mov    0x8(%esp),%edx
  1823f4:	42                   	inc    %edx
		if (lcnt < min_lcnt) {
  1823f5:	39 d3                	cmp    %edx,%ebx
  1823f7:	73 0a                	jae    182403 <qm_i2c_set_config+0x16a>
			lcnt_diff = (min_lcnt - lcnt);
  1823f9:	89 d1                	mov    %edx,%ecx
  1823fb:	29 d9                	sub    %ebx,%ecx
			lcnt += (lcnt_diff);
			hcnt -= (lcnt_diff);
  1823fd:	29 c8                	sub    %ecx,%eax

		/* Increment minimum low count to account for rounding down. */
		min_lcnt++;
		if (lcnt < min_lcnt) {
			lcnt_diff = (min_lcnt - lcnt);
			lcnt += (lcnt_diff);
  1823ff:	89 54 24 04          	mov    %edx,0x4(%esp)
			hcnt -= (lcnt_diff);
		}
		if (QM_I2C_SPEED_STD == cfg->speed) {
  182403:	83 3f 01             	cmpl   $0x1,(%edi)
  182406:	75 0c                	jne    182414 <qm_i2c_set_config+0x17b>
			controller->ic_ss_scl_lcnt = lcnt;
  182408:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  18240c:	89 4e 18             	mov    %ecx,0x18(%esi)
			controller->ic_ss_scl_hcnt = hcnt;
  18240f:	89 46 14             	mov    %eax,0x14(%esi)
  182412:	eb 32                	jmp    182446 <qm_i2c_set_config+0x1ad>
		} else {
			controller->ic_fs_scl_hcnt = hcnt;
  182414:	89 46 1c             	mov    %eax,0x1c(%esi)
			controller->ic_fs_scl_lcnt = lcnt;
  182417:	8b 44 24 04          	mov    0x4(%esp),%eax
  18241b:	89 46 20             	mov    %eax,0x20(%esi)
  18241e:	eb 26                	jmp    182446 <qm_i2c_set_config+0x1ad>
		 * QM_I2C_IC_CON_MASTER_MODE and QM_I2C_IC_CON_SLAVE_DISABLE are
		 * deasserted.
		 */

		/* Set 7/10 bit address mode. */
		ic_con = cfg->address_mode
  182420:	8b 47 04             	mov    0x4(%edi),%eax
  182423:	c1 e0 03             	shl    $0x3,%eax
  182426:	89 04 24             	mov    %eax,(%esp)
			 << QM_I2C_IC_CON_10BITADDR_SLAVE_OFFSET;

		if (cfg->stop_detect_behaviour ==
  182429:	83 7f 10 01          	cmpl   $0x1,0x10(%edi)
  18242d:	75 07                	jne    182436 <qm_i2c_set_config+0x19d>
		    QM_I2C_SLAVE_INTERRUPT_WHEN_ADDRESSED) {
			/* Set stop interrupt only when addressed. */
			ic_con |= QM_I2C_IC_CON_STOP_DET_IFADDRESSED;
  18242f:	81 0c 24 80 00 00 00 	orl    $0x80,(%esp)
		}

		/* Set slave address. */
		controller->ic_sar = cfg->slave_addr;
  182436:	0f b7 47 0c          	movzwl 0xc(%edi),%eax
  18243a:	89 46 08             	mov    %eax,0x8(%esi)
		break;
  18243d:	eb 07                	jmp    182446 <qm_i2c_set_config+0x1ad>
		1);
}

int qm_i2c_set_config(const qm_i2c_t i2c, const qm_i2c_config_t *const cfg)
{
	uint32_t lcnt = 0, hcnt = 0, min_lcnt = 0, lcnt_diff = 0, ic_con = 0;
  18243f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
		/* Set slave address. */
		controller->ic_sar = cfg->slave_addr;
		break;
	}

	controller->ic_con = ic_con;
  182446:	8b 04 24             	mov    (%esp),%eax
  182449:	89 06                	mov    %eax,(%esi)
	return 0;
  18244b:	eb 13                	jmp    182460 <qm_i2c_set_config+0x1c7>
	/* Mask all interrupts. */
	controller->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;

	/* Disable controller. */
	if (controller_disable(i2c)) {
		return -EBUSY;
  18244d:	bd f0 ff ff ff       	mov    $0xfffffff0,%ebp
  182452:	eb 0c                	jmp    182460 <qm_i2c_set_config+0x1c7>
			hcnt = get_hi_cnt(i2c, QM_I2C_FSP_50_DC_NS);
			break;
		}

		if (hcnt > QM_I2C_IC_HCNT_MAX || hcnt < QM_I2C_IC_HCNT_MIN) {
			return -EINVAL;
  182454:	bd ea ff ff ff       	mov    $0xffffffea,%ebp
  182459:	eb 05                	jmp    182460 <qm_i2c_set_config+0x1c7>
		}

		if (lcnt > QM_I2C_IC_LCNT_MAX || lcnt < QM_I2C_IC_LCNT_MIN) {
			return -EINVAL;
  18245b:	bd ea ff ff ff       	mov    $0xffffffea,%ebp
		break;
	}

	controller->ic_con = ic_con;
	return 0;
}
  182460:	89 e8                	mov    %ebp,%eax
  182462:	83 c4 0c             	add    $0xc,%esp
  182465:	5b                   	pop    %ebx
  182466:	5e                   	pop    %esi
  182467:	5f                   	pop    %edi
  182468:	5d                   	pop    %ebp
  182469:	c3                   	ret    

0018246a <qm_i2c_master_irq_transfer>:
}

int qm_i2c_master_irq_transfer(const qm_i2c_t i2c,
			       const qm_i2c_transfer_t *const xfer,
			       const uint16_t slave_addr)
{
  18246a:	57                   	push   %edi
  18246b:	56                   	push   %esi
  18246c:	53                   	push   %ebx
  18246d:	89 c6                	mov    %eax,%esi
  18246f:	89 d7                	mov    %edx,%edi
	QM_CHECK(i2c < QM_I2C_NUM, -EINVAL);
	QM_CHECK(NULL != xfer, -EINVAL);
	QM_CHECK(slave_addr <= QM_I2C_IC_TAR_MASK, -EINVAL);

	qm_i2c_reg_t *const controller = QM_I2C[i2c];
  182471:	8b 1c 85 18 00 28 00 	mov    0x280018(,%eax,4),%ebx

	/* Write slave address to TAR. */
	controller->ic_tar &= ~QM_I2C_IC_TAR_MASK;
  182478:	8b 43 04             	mov    0x4(%ebx),%eax
  18247b:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  182480:	89 43 04             	mov    %eax,0x4(%ebx)
	controller->ic_tar |= slave_addr;
  182483:	8b 43 04             	mov    0x4(%ebx),%eax
  182486:	0f b7 c9             	movzwl %cx,%ecx
  182489:	09 c1                	or     %eax,%ecx
  18248b:	89 4b 04             	mov    %ecx,0x4(%ebx)

	i2c_write_pos[i2c] = 0;
  18248e:	c7 04 b5 18 01 28 00 	movl   $0x0,0x280118(,%esi,4)
  182495:	00 00 00 00 
	i2c_read_pos[i2c] = 0;
  182499:	c7 04 b5 14 01 28 00 	movl   $0x0,0x280114(,%esi,4)
  1824a0:	00 00 00 00 
	i2c_read_cmd_send[i2c] = xfer->rx_len;
  1824a4:	8b 42 0c             	mov    0xc(%edx),%eax
  1824a7:	89 04 b5 10 01 28 00 	mov    %eax,0x280110(,%esi,4)
	i2c_transfer[i2c] = xfer;
  1824ae:	89 14 b5 1c 01 28 00 	mov    %edx,0x28011c(,%esi,4)

	/* Set threshold. */
	controller->ic_tx_tl = TX_TL;
  1824b5:	c7 43 3c 02 00 00 00 	movl   $0x2,0x3c(%ebx)
	if (xfer->rx_len > 0 && xfer->rx_len < (RX_TL + 1)) {
  1824bc:	8b 42 0c             	mov    0xc(%edx),%eax
  1824bf:	48                   	dec    %eax
  1824c0:	83 f8 04             	cmp    $0x4,%eax
  1824c3:	77 05                	ja     1824ca <qm_i2c_master_irq_transfer+0x60>
		/*
		 * If 'rx_len' is less than the default threshold, we have to
		 * change the threshold value so the 'RX FULL' interrupt is
		 * generated once all data from the transfer is received.
		 */
		controller->ic_rx_tl = xfer->rx_len - 1;
  1824c5:	89 43 38             	mov    %eax,0x38(%ebx)
  1824c8:	eb 07                	jmp    1824d1 <qm_i2c_master_irq_transfer+0x67>
	} else {
		controller->ic_rx_tl = RX_TL;
  1824ca:	c7 43 38 05 00 00 00 	movl   $0x5,0x38(%ebx)
	}

	/* Mask interrupts. */
	QM_I2C[i2c]->ic_intr_mask = QM_I2C_IC_INTR_MASK_ALL;
  1824d1:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)

	/* Enable controller. */
	controller_enable(i2c);
  1824d8:	89 f0                	mov    %esi,%eax
  1824da:	e8 20 f8 ff ff       	call   181cff <controller_enable>

	/* Start filling tx fifo. */
	master_fill_tx_fifo(i2c, xfer, controller);
  1824df:	89 d9                	mov    %ebx,%ecx
  1824e1:	89 fa                	mov    %edi,%edx
  1824e3:	89 f0                	mov    %esi,%eax
  1824e5:	e8 9e f7 ff ff       	call   181c88 <master_fill_tx_fifo>

	/* Unmask interrupts. */
	controller->ic_intr_mask |=
  1824ea:	8b 43 30             	mov    0x30(%ebx),%eax
  1824ed:	83 c8 5f             	or     $0x5f,%eax
  1824f0:	89 43 30             	mov    %eax,0x30(%ebx)
	    QM_I2C_IC_INTR_MASK_RX_UNDER | QM_I2C_IC_INTR_MASK_RX_OVER |
	    QM_I2C_IC_INTR_MASK_RX_FULL | QM_I2C_IC_INTR_MASK_TX_OVER |
	    QM_I2C_IC_INTR_MASK_TX_EMPTY | QM_I2C_IC_INTR_MASK_TX_ABORT;

	return 0;
}
  1824f3:	b8 00 00 00 00       	mov    $0x0,%eax
  1824f8:	5b                   	pop    %ebx
  1824f9:	5e                   	pop    %esi
  1824fa:	5f                   	pop    %edi
  1824fb:	c3                   	ret    

001824fc <qm_uart_set_config>:
	qm_uart_isr_handler(QM_UART_1);
	QM_ISR_EOI(QM_IRQ_UART_1_INT_VECTOR);
}

int qm_uart_set_config(const qm_uart_t uart, const qm_uart_config_t *cfg)
{
  1824fc:	83 ec 04             	sub    $0x4,%esp
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  1824ff:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
	volatile uint32_t unused_lsr __attribute__((unused));

	/* Clear DLAB by unsetting line parameters */
	regs->lcr = 0;
  182506:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

	/* Set divisor latch registers (integer + fractional part) */
	regs->lcr = QM_UART_LCR_DLAB;
  18250d:	c7 40 0c 80 00 00 00 	movl   $0x80,0xc(%eax)
	regs->ier_dlh = QM_UART_CFG_BAUD_DLH_UNPACK(cfg->baud_divisor);
  182514:	8b 4a 04             	mov    0x4(%edx),%ecx
  182517:	81 e1 00 00 ff 00    	and    $0xff0000,%ecx
  18251d:	c1 e9 10             	shr    $0x10,%ecx
  182520:	89 48 04             	mov    %ecx,0x4(%eax)
	regs->rbr_thr_dll = QM_UART_CFG_BAUD_DLL_UNPACK(cfg->baud_divisor);
  182523:	8b 4a 04             	mov    0x4(%edx),%ecx
  182526:	0f b6 cd             	movzbl %ch,%ecx
  182529:	89 08                	mov    %ecx,(%eax)
	regs->dlf = QM_UART_CFG_BAUD_DLF_UNPACK(cfg->baud_divisor);
  18252b:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
  18252f:	89 88 c0 00 00 00    	mov    %ecx,0xc0(%eax)

	/* Set line parameters. This also unsets the DLAB */
	regs->lcr = cfg->line_control;
  182535:	8b 0a                	mov    (%edx),%ecx
  182537:	89 48 0c             	mov    %ecx,0xc(%eax)

	/* Hardware automatic flow control */
	regs->mcr = 0;
  18253a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	if (true == cfg->hw_fc) {
  182541:	80 7a 08 00          	cmpb   $0x0,0x8(%edx)
  182545:	74 09                	je     182550 <qm_uart_set_config+0x54>
		regs->mcr |= QM_UART_MCR_AFCE | QM_UART_MCR_RTS;
  182547:	8b 50 10             	mov    0x10(%eax),%edx
  18254a:	83 ca 22             	or     $0x22,%edx
  18254d:	89 50 10             	mov    %edx,0x10(%eax)
	}

	/* FIFO's enable and reset, set interrupt threshold */
	regs->iir_fcr =
  182550:	c7 40 08 b7 00 00 00 	movl   $0xb7,0x8(%eax)
	    (QM_UART_FCR_FIFOE | QM_UART_FCR_RFIFOR | QM_UART_FCR_XFIFOR |
	     QM_UART_FCR_DEFAULT_TX_RX_THRESHOLD);
	regs->ier_dlh |= QM_UART_IER_PTIME;
  182557:	8b 50 04             	mov    0x4(%eax),%edx
  18255a:	80 ca 80             	or     $0x80,%dl
  18255d:	89 50 04             	mov    %edx,0x4(%eax)

	/* Clear LSR */
	unused_lsr = regs->lsr;
  182560:	8b 40 14             	mov    0x14(%eax),%eax
  182563:	89 04 24             	mov    %eax,(%esp)

	return 0;
}
  182566:	b8 00 00 00 00       	mov    $0x0,%eax
  18256b:	83 c4 04             	add    $0x4,%esp
  18256e:	c3                   	ret    

0018256f <qm_uart_get_status>:

int qm_uart_get_status(const qm_uart_t uart, qm_uart_status_t *const status)
{
  18256f:	56                   	push   %esi
  182570:	53                   	push   %ebx
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(status != NULL, -EINVAL);
	qm_uart_reg_t *const regs = QM_UART[uart];
  182571:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
	uint32_t lsr = regs->lsr;
  182578:	8b 48 14             	mov    0x14(%eax),%ecx

	*status = (lsr & (QM_UART_LSR_OE | QM_UART_LSR_PE | QM_UART_LSR_FE |
  18257b:	89 cb                	mov    %ecx,%ebx
  18257d:	83 e3 1e             	and    $0x1e,%ebx
  182580:	89 1a                	mov    %ebx,(%edx)

	/*
	 * Check as an IRQ TX completed, if so, the Shift register may still be
	 * busy.
	 */
	if (regs->scr & BIT(0)) {
  182582:	8b 70 1c             	mov    0x1c(%eax),%esi
  182585:	f7 c6 01 00 00 00    	test   $0x1,%esi
  18258b:	74 0b                	je     182598 <qm_uart_get_status+0x29>
		regs->scr &= ~BIT(0);
  18258d:	8b 58 1c             	mov    0x1c(%eax),%ebx
  182590:	83 e3 fe             	and    $0xfffffffe,%ebx
  182593:	89 58 1c             	mov    %ebx,0x1c(%eax)
  182596:	eb 0a                	jmp    1825a2 <qm_uart_get_status+0x33>
	} else if (!(lsr & (QM_UART_LSR_TEMT))) {
  182598:	f6 c1 40             	test   $0x40,%cl
  18259b:	75 05                	jne    1825a2 <qm_uart_get_status+0x33>
		*status |= QM_UART_TX_BUSY;
  18259d:	83 cb 20             	or     $0x20,%ebx
  1825a0:	89 1a                	mov    %ebx,(%edx)
	}

	if (lsr & QM_UART_LSR_DR) {
  1825a2:	f6 c1 01             	test   $0x1,%cl
  1825a5:	74 03                	je     1825aa <qm_uart_get_status+0x3b>
		*status |= QM_UART_RX_BUSY;
  1825a7:	83 0a 40             	orl    $0x40,(%edx)
	}

	return 0;
}
  1825aa:	b8 00 00 00 00       	mov    $0x0,%eax
  1825af:	5b                   	pop    %ebx
  1825b0:	5e                   	pop    %esi
  1825b1:	c3                   	ret    

001825b2 <qm_uart_write>:

int qm_uart_write(const qm_uart_t uart, const uint8_t data)
{
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  1825b2:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax

	while (regs->lsr & QM_UART_LSR_THRE) {
  1825b9:	8b 48 14             	mov    0x14(%eax),%ecx
  1825bc:	f6 c1 20             	test   $0x20,%cl
  1825bf:	75 f8                	jne    1825b9 <qm_uart_write+0x7>
	}
	regs->rbr_thr_dll = data;
  1825c1:	0f b6 d2             	movzbl %dl,%edx
  1825c4:	89 10                	mov    %edx,(%eax)
	/* Wait for transaction to complete. */
	while (!(regs->lsr & QM_UART_LSR_TEMT)) {
  1825c6:	8b 50 14             	mov    0x14(%eax),%edx
  1825c9:	f6 c2 40             	test   $0x40,%dl
  1825cc:	74 f8                	je     1825c6 <qm_uart_write+0x14>
	}

	return 0;
}
  1825ce:	b8 00 00 00 00       	mov    $0x0,%eax
  1825d3:	c3                   	ret    

001825d4 <qm_uart_read>:

int qm_uart_read(const qm_uart_t uart, uint8_t *const data,
		 qm_uart_status_t *status)
{
  1825d4:	53                   	push   %ebx
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(data != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  1825d5:	8b 1c 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%ebx

	uint32_t lsr = regs->lsr;
  1825dc:	8b 43 14             	mov    0x14(%ebx),%eax
	while (!(lsr & QM_UART_LSR_DR)) {
  1825df:	eb 03                	jmp    1825e4 <qm_uart_read+0x10>
		lsr = regs->lsr;
  1825e1:	8b 43 14             	mov    0x14(%ebx),%eax
	QM_CHECK(data != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];

	uint32_t lsr = regs->lsr;
	while (!(lsr & QM_UART_LSR_DR)) {
  1825e4:	a8 01                	test   $0x1,%al
  1825e6:	74 f9                	je     1825e1 <qm_uart_read+0xd>
		lsr = regs->lsr;
	}
	/* Check if there are any errors on the line. */
	if (lsr & QM_UART_LSR_ERROR_BITS) {
  1825e8:	83 e0 1e             	and    $0x1e,%eax
  1825eb:	74 0d                	je     1825fa <qm_uart_read+0x26>
		if (status) {
  1825ed:	85 c9                	test   %ecx,%ecx
  1825ef:	74 14                	je     182605 <qm_uart_read+0x31>
			*status = (lsr & QM_UART_LSR_ERROR_BITS);
  1825f1:	89 01                	mov    %eax,(%ecx)
		}
		return -EIO;
  1825f3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  1825f8:	eb 10                	jmp    18260a <qm_uart_read+0x36>
	}
	*data = regs->rbr_thr_dll;
  1825fa:	8b 03                	mov    (%ebx),%eax
  1825fc:	88 02                	mov    %al,(%edx)

	return 0;
  1825fe:	b8 00 00 00 00       	mov    $0x0,%eax
  182603:	eb 05                	jmp    18260a <qm_uart_read+0x36>
	/* Check if there are any errors on the line. */
	if (lsr & QM_UART_LSR_ERROR_BITS) {
		if (status) {
			*status = (lsr & QM_UART_LSR_ERROR_BITS);
		}
		return -EIO;
  182605:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
	*data = regs->rbr_thr_dll;

	return 0;
}
  18260a:	5b                   	pop    %ebx
  18260b:	c3                   	ret    

0018260c <pin_to_register>:
 * @param[in] width The width in bits for each pin in the register.
 *
 * @return The register index of the given pin.
 */
static uint32_t pin_to_register(uint32_t pin, uint32_t width)
{
  18260c:	56                   	push   %esi
  18260d:	53                   	push   %ebx
  18260e:	89 c3                	mov    %eax,%ebx
  182610:	89 d6                	mov    %edx,%esi
	return (pin / (32 / width));
  182612:	b8 20 00 00 00       	mov    $0x20,%eax
  182617:	ba 00 00 00 00       	mov    $0x0,%edx
  18261c:	f7 f6                	div    %esi
  18261e:	89 c1                	mov    %eax,%ecx
  182620:	89 d8                	mov    %ebx,%eax
  182622:	ba 00 00 00 00       	mov    $0x0,%edx
  182627:	f7 f1                	div    %ecx
}
  182629:	5b                   	pop    %ebx
  18262a:	5e                   	pop    %esi
  18262b:	c3                   	ret    

0018262c <pin_to_offset>:
 * @param[in] width The width in bits for each pin in the register.
 *
 * @return The offset for the pin within the register.
 */
static uint32_t pin_to_offset(uint32_t pin, uint32_t width)
{
  18262c:	56                   	push   %esi
  18262d:	53                   	push   %ebx
  18262e:	89 c6                	mov    %eax,%esi
  182630:	89 d3                	mov    %edx,%ebx
	return ((pin % (32 / width)) * width);
  182632:	b8 20 00 00 00       	mov    $0x20,%eax
  182637:	ba 00 00 00 00       	mov    $0x0,%edx
  18263c:	f7 f3                	div    %ebx
  18263e:	89 c1                	mov    %eax,%ecx
  182640:	89 f0                	mov    %esi,%eax
  182642:	ba 00 00 00 00       	mov    $0x0,%edx
  182647:	f7 f1                	div    %ecx
  182649:	89 d8                	mov    %ebx,%eax
  18264b:	0f af c2             	imul   %edx,%eax
}
  18264e:	5b                   	pop    %ebx
  18264f:	5e                   	pop    %esi
  182650:	c3                   	ret    

00182651 <qm_pmux_select>:

int qm_pmux_select(const qm_pin_id_t pin, const qm_pmux_fn_t fn)
{
  182651:	57                   	push   %edi
  182652:	56                   	push   %esi
  182653:	53                   	push   %ebx
  182654:	89 c7                	mov    %eax,%edi
  182656:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);
	QM_CHECK(fn <= QM_PMUX_FN_3, -EINVAL);

	uint32_t reg = pin_to_register(pin, 2);
  182658:	ba 02 00 00 00       	mov    $0x2,%edx
  18265d:	e8 aa ff ff ff       	call   18260c <pin_to_register>
  182662:	89 c3                	mov    %eax,%ebx
	uint32_t offs = pin_to_offset(pin, 2);
  182664:	ba 02 00 00 00       	mov    $0x2,%edx
  182669:	89 f8                	mov    %edi,%eax
  18266b:	e8 bc ff ff ff       	call   18262c <pin_to_offset>
  182670:	89 c1                	mov    %eax,%ecx

	QM_SCSS_PMUX->pmux_sel[reg] &= ~(MASK_2BIT << offs);
  182672:	83 c3 0c             	add    $0xc,%ebx
  182675:	8b 3c 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%edi
  18267c:	ba 03 00 00 00       	mov    $0x3,%edx
  182681:	d3 e2                	shl    %cl,%edx
  182683:	f7 d2                	not    %edx
  182685:	21 fa                	and    %edi,%edx
  182687:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	QM_SCSS_PMUX->pmux_sel[reg] |= (fn << offs);
  18268e:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  182695:	d3 e6                	shl    %cl,%esi
  182697:	09 c6                	or     %eax,%esi
  182699:	89 34 9d 00 09 80 b0 	mov    %esi,-0x4f7ff700(,%ebx,4)

	return 0;
}
  1826a0:	b8 00 00 00 00       	mov    $0x0,%eax
  1826a5:	5b                   	pop    %ebx
  1826a6:	5e                   	pop    %esi
  1826a7:	5f                   	pop    %edi
  1826a8:	c3                   	ret    

001826a9 <qm_pmux_input_en>:
	}
	return 0;
}

int qm_pmux_input_en(const qm_pin_id_t pin, const bool enable)
{
  1826a9:	57                   	push   %edi
  1826aa:	56                   	push   %esi
  1826ab:	53                   	push   %ebx
  1826ac:	89 c7                	mov    %eax,%edi
  1826ae:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);

	uint32_t reg = pin_to_register(pin, 1);
  1826b0:	ba 01 00 00 00       	mov    $0x1,%edx
  1826b5:	e8 52 ff ff ff       	call   18260c <pin_to_register>
  1826ba:	89 c3                	mov    %eax,%ebx
	uint32_t mask = MASK_1BIT << pin_to_offset(pin, 1);
  1826bc:	ba 01 00 00 00       	mov    $0x1,%edx
  1826c1:	89 f8                	mov    %edi,%eax
  1826c3:	e8 64 ff ff ff       	call   18262c <pin_to_offset>
  1826c8:	ba 01 00 00 00       	mov    $0x1,%edx
  1826cd:	88 c1                	mov    %al,%cl
  1826cf:	d3 e2                	shl    %cl,%edx

	if (enable == false) {
  1826d1:	89 f0                	mov    %esi,%eax
  1826d3:	84 c0                	test   %al,%al
  1826d5:	75 17                	jne    1826ee <qm_pmux_input_en+0x45>
		QM_SCSS_PMUX->pmux_in_en[reg] &= ~mask;
  1826d7:	83 c3 08             	add    $0x8,%ebx
  1826da:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  1826e1:	f7 d2                	not    %edx
  1826e3:	21 c2                	and    %eax,%edx
  1826e5:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
  1826ec:	eb 13                	jmp    182701 <qm_pmux_input_en+0x58>
	} else {
		QM_SCSS_PMUX->pmux_in_en[reg] |= mask;
  1826ee:	83 c3 08             	add    $0x8,%ebx
  1826f1:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  1826f8:	09 c2                	or     %eax,%edx
  1826fa:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	}
	return 0;
}
  182701:	b8 00 00 00 00       	mov    $0x0,%eax
  182706:	5b                   	pop    %ebx
  182707:	5e                   	pop    %esi
  182708:	5f                   	pop    %edi
  182709:	c3                   	ret    

0018270a <qm_pmux_pullup_en>:

int qm_pmux_pullup_en(const qm_pin_id_t pin, const bool enable)
{
  18270a:	57                   	push   %edi
  18270b:	56                   	push   %esi
  18270c:	53                   	push   %ebx
  18270d:	89 c7                	mov    %eax,%edi
  18270f:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);

	uint32_t reg = pin_to_register(pin, 1);
  182711:	ba 01 00 00 00       	mov    $0x1,%edx
  182716:	e8 f1 fe ff ff       	call   18260c <pin_to_register>
  18271b:	89 c3                	mov    %eax,%ebx
	uint32_t mask = MASK_1BIT << pin_to_offset(pin, 1);
  18271d:	ba 01 00 00 00       	mov    $0x1,%edx
  182722:	89 f8                	mov    %edi,%eax
  182724:	e8 03 ff ff ff       	call   18262c <pin_to_offset>
  182729:	ba 01 00 00 00       	mov    $0x1,%edx
  18272e:	88 c1                	mov    %al,%cl
  182730:	d3 e2                	shl    %cl,%edx

	if (enable == false) {
  182732:	89 f0                	mov    %esi,%eax
  182734:	84 c0                	test   %al,%al
  182736:	75 14                	jne    18274c <qm_pmux_pullup_en+0x42>
		QM_SCSS_PMUX->pmux_pullup[reg] &= ~mask;
  182738:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  18273f:	f7 d2                	not    %edx
  182741:	21 c2                	and    %eax,%edx
  182743:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
  18274a:	eb 10                	jmp    18275c <qm_pmux_pullup_en+0x52>
	} else {
		QM_SCSS_PMUX->pmux_pullup[reg] |= mask;
  18274c:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  182753:	09 c2                	or     %eax,%edx
  182755:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	}
	return 0;
}
  18275c:	b8 00 00 00 00       	mov    $0x0,%eax
  182761:	5b                   	pop    %ebx
  182762:	5e                   	pop    %esi
  182763:	5f                   	pop    %edi
  182764:	c3                   	ret    

00182765 <k_cpu_idle>:
	_sys_k_event_logger_enter_sleep();
#if defined(CONFIG_BOOT_TIME_MEASUREMENT)
	__idle_tsc = _tsc_read();
#endif

	__asm__ volatile (
  182765:	fb                   	sti    
  182766:	f4                   	hlt    
  182767:	c3                   	ret    

00182768 <_SysFatalErrorHandler>:
{
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
  182768:	e8 e5 11 00 00       	call   183952 <k_is_in_isr>
  18276d:	85 c0                	test   %eax,%eax
  18276f:	75 09                	jne    18277a <_SysFatalErrorHandler+0x12>
  182771:	e8 ea 11 00 00       	call   183960 <_is_thread_essential>
  182776:	85 c0                	test   %eax,%eax
  182778:	74 25                	je     18279f <_SysFatalErrorHandler+0x37>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
  18277a:	e8 d3 11 00 00       	call   183952 <k_is_in_isr>
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
  18277f:	85 c0                	test   %eax,%eax
  182781:	74 07                	je     18278a <_SysFatalErrorHandler+0x22>
  182783:	b8 50 4a 18 00       	mov    $0x184a50,%eax
  182788:	eb 05                	jmp    18278f <_SysFatalErrorHandler+0x27>
  18278a:	b8 54 4a 18 00       	mov    $0x184a54,%eax
  18278f:	50                   	push   %eax
  182790:	68 a4 4a 18 00       	push   $0x184aa4
  182795:	e8 19 f3 ff ff       	call   181ab3 <printk>
  18279a:	83 c4 08             	add    $0x8,%esp
  18279d:	eb fe                	jmp    18279d <_SysFatalErrorHandler+0x35>
		       k_is_in_isr() ? "ISR" : "essential thread");
		for (;;)
			; /* spin forever */
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
  18279f:	ff 35 28 01 28 00    	pushl  0x280128
  1827a5:	68 c4 4a 18 00       	push   $0x184ac4
  1827aa:	e8 04 f3 ff ff       	call   181ab3 <printk>
  1827af:	83 c4 08             	add    $0x8,%esp
	k_thread_abort(_current);
  1827b2:	a1 28 01 28 00       	mov    0x280128,%eax
  1827b7:	e8 ee 13 00 00       	call   183baa <k_thread_abort>

001827bc <_cache_line_size_get>:
	#define CPUID_CACHE_LINE_MASK (0xff << 8)

	GTEXT(_cache_line_size_get)

SECTION_FUNC(TEXT, _cache_line_size_get)
	pushl %ebx
  1827bc:	53                   	push   %ebx
	movl $1, %eax
  1827bd:	b8 01 00 00 00       	mov    $0x1,%eax
	cpuid
  1827c2:	0f a2                	cpuid  
	movl %ebx, %eax
  1827c4:	89 d8                	mov    %ebx,%eax
	andl $CPUID_CACHE_LINE_MASK, %eax
  1827c6:	25 00 ff 00 00       	and    $0xff00,%eax
	shrl $5,%eax	/* shift right 8 to get value, then multiple by 8
  1827cb:	c1 e8 05             	shr    $0x5,%eax
					 * to get cache line size */
	popl %ebx
  1827ce:	5b                   	pop    %ebx
	ret
  1827cf:	c3                   	ret    

001827d0 <init_cache_line_size>:

#if defined(CONFIG_CACHE_LINE_SIZE_DETECT)
size_t sys_cache_line_size;
static void init_cache_line_size(void)
{
	sys_cache_line_size = _cache_line_size_get();
  1827d0:	e8 e7 ff ff ff       	call   1827bc <_cache_line_size_get>
  1827d5:	a3 a4 02 28 00       	mov    %eax,0x2802a4
  1827da:	c3                   	ret    

001827db <init_cache>:
static int init_cache(struct device *unused)
{
	ARG_UNUSED(unused);

	init_cache_flush();
	init_cache_line_size();
  1827db:	e8 f0 ff ff ff       	call   1827d0 <init_cache_line_size>

	return 0;
}
  1827e0:	b8 00 00 00 00       	mov    $0x0,%eax
  1827e5:	c3                   	ret    

001827e6 <_exception_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * exception exits.
	 */

	cld
  1827e6:	fc                   	cld    


	/*
	 * Swap ecx and handler function on the current stack;
	 */
	xchgl	%ecx, (%esp)
  1827e7:	87 0c 24             	xchg   %ecx,(%esp)

	/*
	 * Push the remaining volatile registers on the existing stack.
	 */

	pushl	%eax
  1827ea:	50                   	push   %eax
	pushl	%edx
  1827eb:	52                   	push   %edx
	/*
	 * Push the cooperative registers on the existing stack as they are
	 * required by debug tools.
	 */

	pushl	%edi
  1827ec:	57                   	push   %edi
	pushl	%esi
  1827ed:	56                   	push   %esi
	pushl	%ebx
  1827ee:	53                   	push   %ebx
	pushl	%ebp
  1827ef:	55                   	push   %ebp

	leal	44(%esp), %eax   /* Calculate ESP before interrupt occurred */
  1827f0:	8d 44 24 2c          	lea    0x2c(%esp),%eax
	pushl	%eax             /* Save calculated ESP */
  1827f4:	50                   	push   %eax

	/* ESP is pointing to the ESF at this point */

#if defined(CONFIG_FP_SHARING) ||  defined(CONFIG_GDB_INFO)

	movl	_kernel + _kernel_offset_to_current, %edx
  1827f5:	8b 15 28 01 28 00    	mov    0x280128,%edx

	/* inc exception nest count */
	incl	_thread_offset_to_excNestCount(%edx)
  1827fb:	ff 42 44             	incl   0x44(%edx)
     * the current execution context if this is the outermost exception.
     * The ESF pointer is used by debug tools to locate the volatile
     * registers and the stack of the preempted thread.
     */

	testb	$_EXC_ACTIVE, _thread_offset_to_thread_state(%edx)
  1827fe:	f6 42 09 40          	testb  $0x40,0x9(%edx)
	jne	alreadyInException
  182802:	75 03                	jne    182807 <alreadyInException>
	movl	%esp, _thread_offset_to_esf(%edx)
  182804:	89 62 40             	mov    %esp,0x40(%edx)

00182807 <alreadyInException>:
	 * (where needed) if the exception handler causes a context switch.
	 * It also indicates to debug tools that an exception is being
	 * handled in the event of a context switch.
	 */

	orb	$_EXC_ACTIVE, _thread_offset_to_thread_state(%edx)
  182807:	80 4a 09 40          	orb    $0x40,0x9(%edx)
	 * Test IF bit of saved EFLAGS and re-enable interrupts if IF=1.
	 */

	/* ESP is still pointing to the ESF at this point */

	testl	$0x200, __NANO_ESF_eflags_OFFSET(%esp)
  18280b:	f7 44 24 2c 00 02 00 	testl  $0x200,0x2c(%esp)
  182812:	00 
	je	allDone
  182813:	74 01                	je     182816 <allDone>
	sti
  182815:	fb                   	sti    

00182816 <allDone>:

allDone:
#if CONFIG_X86_IAMCU
	movl	%esp, %eax		/* NANO_ESF * parameter */
  182816:	89 e0                	mov    %esp,%eax
#else
	pushl	%esp			/* push NANO_ESF * parameter */
#endif
	call	*%ecx			/* call exception handler */
  182818:	ff d1                	call   *%ecx
	addl	$0x4, %esp
#endif

#if defined(CONFIG_FP_SHARING) || defined(CONFIG_GDB_INFO)

	movl	_kernel + _kernel_offset_to_current, %ecx
  18281a:	8b 0d 28 01 28 00    	mov    0x280128,%ecx
	 * Must lock interrupts to prevent outside interference.
	 * (Using "lock" prefix would be nicer, but this won't work
	 * on platforms that don't respect the CPU's bus lock signal.)
	 */

	cli
  182820:	fa                   	cli    

	/*
	 * Determine whether exiting from a nested interrupt.
	 */

	decl	_thread_offset_to_excNestCount(%ecx)
  182821:	ff 49 44             	decl   0x44(%ecx)

	cmpl	$0, _thread_offset_to_excNestCount(%ecx)
  182824:	83 79 44 00          	cmpl   $0x0,0x44(%ecx)
	jne	nestedException
  182828:	75 04                	jne    18282e <nestedException>
	 * Clear the _EXC_ACTIVE bit in the k_thread of the current execution
	 * context if we are not in a nested exception (ie, when we exit the
	 * outermost exception).
	 */

	andb	$~_EXC_ACTIVE, _thread_offset_to_thread_state(%ecx)
  18282a:	80 61 09 bf          	andb   $0xbf,0x9(%ecx)

0018282e <nestedException>:
	 * Pop the non-volatile registers from the stack.
	 * Note that debug tools may have altered the saved register values while
	 * the task was stopped, and we want to pick up the altered values.
	 */

	popl	%ebp		/* Discard saved ESP */
  18282e:	5d                   	pop    %ebp
	popl	%ebp
  18282f:	5d                   	pop    %ebp
	popl	%ebx
  182830:	5b                   	pop    %ebx
	popl	%esi
  182831:	5e                   	pop    %esi
	popl	%edi
  182832:	5f                   	pop    %edi

	/* restore edx and ecx which are always saved on the stack */

	popl	%edx
  182833:	5a                   	pop    %edx
	popl	%eax
  182834:	58                   	pop    %eax
	popl	%ecx
  182835:	59                   	pop    %ecx

	addl	$4, %esp	/* "pop" error code */
  182836:	83 c4 04             	add    $0x4,%esp

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  182839:	cf                   	iret   

0018283a <_interrupt_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * interrupt exits via the IRET instruction.
	 */

	cld
  18283a:	fc                   	cld    

	/*
	 * Swap EAX with isr_param and EDX with isr.
	 * Push ECX onto the stack
	 */
	xchgl	%eax, 4(%esp)
  18283b:	87 44 24 04          	xchg   %eax,0x4(%esp)
	xchgl	%edx, (%esp)
  18283f:	87 14 24             	xchg   %edx,(%esp)
	pushl	%ecx
  182842:	51                   	push   %ecx

	/* Push EDI as we will use it for scratch space.
	 * Rest of the callee-saved regs get saved by invocation of C
	 * functions (isr handler, _Swap(), etc)
	 */
	pushl	%edi
  182843:	57                   	push   %edi
	popl	%eax
#endif

	/* load %ecx with &_kernel */

	movl	$_kernel, %ecx
  182844:	b9 20 01 28 00       	mov    $0x280120,%ecx

	/* switch to the interrupt stack for the non-nested case */

	incl	_kernel_offset_to_nested(%ecx)
  182849:	ff 01                	incl   (%ecx)

	/* use interrupt stack if not nested */
	cmpl	$1, _kernel_offset_to_nested(%ecx)
  18284b:	83 39 01             	cmpl   $0x1,(%ecx)
#ifdef CONFIG_DEBUG_INFO
	jne	nested_save_isf
#else
	jne	alreadyOnIntStack
  18284e:	75 06                	jne    182856 <alreadyOnIntStack>
	/*
	 * switch to base of the interrupt stack: save esp in edi, then load
	 * irq_stack pointer
	 */

	movl	%esp, %edi
  182850:	89 e7                	mov    %esp,%edi
	movl	_kernel_offset_to_irq_stack(%ecx), %esp
  182852:	8b 61 04             	mov    0x4(%ecx),%esp


	/* save thread's stack pointer onto base of interrupt stack */

	pushl	%edi			/* Save stack pointer */
  182855:	57                   	push   %edi

00182856 <alreadyOnIntStack>:
	 * stack for sys V calling convention
	 */
	push	%eax
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	sti			/* re-enable interrupts */
  182856:	fb                   	sti    
#endif
	/* Now call the interrupt handler */
	call	*%edx
  182857:	ff d2                	call   *%edx
#ifndef CONFIG_X86_IAMCU
	/* Discard ISR argument */
	addl	$0x4, %esp
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	cli			/* disable interrupts again */
  182859:	fa                   	cli    
#endif

	/* irq_controller.h interface */
	_irq_controller_eoi_macro
  18285a:	31 c0                	xor    %eax,%eax
  18285c:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_start
#endif

	/* determine whether exiting from a nested interrupt */
	movl	$_kernel, %ecx
  182861:	b9 20 01 28 00       	mov    $0x280120,%ecx
#ifdef CONFIG_DEBUG_INFO
	popl	_kernel_offset_to_isf(%ecx)    /* Restore old ISF */
#endif
	decl	_kernel_offset_to_nested(%ecx)	/* dec interrupt nest count */
  182866:	ff 09                	decl   (%ecx)
	jne	nestedInterrupt                 /* 'iret' if nested case */
  182868:	75 2b                	jne    182895 <nestedInterrupt>


#ifdef CONFIG_PREEMPT_ENABLED
	movl	_kernel_offset_to_current(%ecx), %edx
  18286a:	8b 51 08             	mov    0x8(%ecx),%edx

	/*
	 * Non-preemptible thread ? Do not schedule (see explanation of
	 * preempt field in kernel_struct.h).
	 */
	cmpw	$_NON_PREEMPT_THRESHOLD, _thread_offset_to_preempt(%edx)
  18286d:	66 81 7a 0a 80 00    	cmpw   $0x80,0xa(%edx)
	jae	noReschedule
  182873:	73 1f                	jae    182894 <noReschedule>


	/* reschedule only if the scheduler says that we must do so */
	cmpl	%edx, _kernel_offset_to_ready_q_cache(%ecx)
  182875:	39 51 14             	cmp    %edx,0x14(%ecx)
	je	noReschedule
  182878:	74 1a                	je     182894 <noReschedule>
	 * preserved using the lazy save/restore algorithm, or to indicate to
	 * debug tools that a preemptive context switch has occurred.
	 */

#if defined(CONFIG_FP_SHARING) ||  defined(CONFIG_GDB_INFO)
	orb	$_INT_ACTIVE, _thread_offset_to_thread_state(%edx)
  18287a:	80 4a 09 80          	orb    $0x80,0x9(%edx)
	 * the existing _Swap() primitive to save the remaining
	 * thread's registers (including floating point) and perform
	 * a switch to the new thread.
	 */

	popl	%esp	/* switch back to outgoing thread's stack */
  18287e:	5c                   	pop    %esp
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif

	pushfl			/* push KERNEL_LOCK_KEY argument */
  18287f:	9c                   	pushf  
#ifdef CONFIG_X86_IAMCU
	/* IAMCU first argument goes into a register, not the stack.
	 */
	popl	%eax
  182880:	58                   	pop    %eax
#endif
	call	_Swap
  182881:	e8 30 00 00 00       	call   1828b6 <_Swap>
	 * _Swap() has restored the floating point registers, if needed.
	 * Clear the _INT_ACTIVE bit in the interrupted thread's state
	 * since it has served its purpose.
	 */

	movl	_kernel + _kernel_offset_to_current, %eax
  182886:	a1 28 01 28 00       	mov    0x280128,%eax
	andb	$~_INT_ACTIVE, _thread_offset_to_thread_state(%eax)
  18288b:	80 60 09 7f          	andb   $0x7f,0x9(%eax)

	/* Restore volatile registers and return to the interrupted thread */
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_stop
#endif
	popl	%edi
  18288f:	5f                   	pop    %edi
	popl	%ecx
  182890:	59                   	pop    %ecx
	popl	%edx
  182891:	5a                   	pop    %edx
	popl	%eax
  182892:	58                   	pop    %eax

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  182893:	cf                   	iret   

00182894 <noReschedule>:
	/*
	 * A thread reschedule is not required; switch back to the
	 * interrupted thread's stack and restore volatile registers
	 */

	popl	%esp		/* pop thread stack pointer */
  182894:	5c                   	pop    %esp

00182895 <nestedInterrupt>:
	popl	%ebp        /* Discard saved ESP */
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif
	popl	%edi
  182895:	5f                   	pop    %edi
	popl	%ecx		/* pop volatile registers in reverse order */
  182896:	59                   	pop    %ecx
	popl	%edx
  182897:	5a                   	pop    %edx
	popl	%eax
  182898:	58                   	pop    %eax
	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  182899:	cf                   	iret   

0018289a <_SpuriousIntNoErrCodeHandler>:
 * thus _SpuriousIntNoErrCodeHandler()/_SpuriousIntHandler() shall be
 * invoked with interrupts disabled.
 */
SECTION_FUNC(TEXT, _SpuriousIntNoErrCodeHandler)

	pushl	$0			/* push dummy err code onto stk */
  18289a:	6a 00                	push   $0x0

0018289c <_SpuriousIntHandler>:
	/* fall through to _SpuriousIntHandler */


SECTION_FUNC(TEXT, _SpuriousIntHandler)

	cld				/* Clear direction flag */
  18289c:	fc                   	cld    

	/* Create the ESF */

	pushl %eax
  18289d:	50                   	push   %eax
	pushl %ecx
  18289e:	51                   	push   %ecx
	pushl %edx
  18289f:	52                   	push   %edx
	pushl %edi
  1828a0:	57                   	push   %edi
	pushl %esi
  1828a1:	56                   	push   %esi
	pushl %ebx
  1828a2:	53                   	push   %ebx
	pushl %ebp
  1828a3:	55                   	push   %ebp

	leal	44(%esp), %ecx   /* Calculate ESP before exception occurred */
  1828a4:	8d 4c 24 2c          	lea    0x2c(%esp),%ecx
	pushl	%ecx             /* Save calculated ESP */
  1828a8:	51                   	push   %ecx

#ifndef CONFIG_X86_IAMCU
	pushl	%esp			/* push cur stack pointer: pEsf arg */
#else
	mov	%esp, %edx
  1828a9:	89 e2                	mov    %esp,%edx
#endif

	/* re-enable interrupts */
	sti
  1828ab:	fb                   	sti    

	/* push the 'unsigned int reason' parameter */
#ifndef CONFIG_X86_IAMCU
	pushl	$_NANO_ERR_SPURIOUS_INT
#else
	movl	$_NANO_ERR_SPURIOUS_INT, %eax
  1828ac:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
	/* call the fatal error handler */
	call	_NanoFatalErrorHandler
  1828b1:	e8 d5 00 00 00       	call   18298b <_NanoFatalErrorHandler>

001828b6 <_Swap>:
SECTION_FUNC(TEXT, _Swap)
#ifdef CONFIG_X86_IAMCU
	/* save EFLAGS on stack right before return address, just as SYSV would
	 * have done
	 */
	pushl	0(%esp)
  1828b6:	ff 34 24             	pushl  (%esp)
	movl	%eax, 4(%esp)
  1828b9:	89 44 24 04          	mov    %eax,0x4(%esp)
	 * any of these registers into the k_thread.  Only the 'esp' register
	 * after all the pushes have been performed) will be stored in the
	 * k_thread.
	 */

	pushl	%edi
  1828bd:	57                   	push   %edi

	movl	$_kernel, %edi
  1828be:	bf 20 01 28 00       	mov    $0x280120,%edi

	pushl	%esi
  1828c3:	56                   	push   %esi
	pushl	%ebx
  1828c4:	53                   	push   %ebx
	pushl	%ebp
  1828c5:	55                   	push   %ebp
	 * -EAGAIN eliminates the need for the timeout code to set it.
	 * If another value is ever needed, it can be modified with
	 * _set_thread_return_value().
	 */

	pushl   _k_neg_eagain
  1828c6:	ff 35 a4 4c 18 00    	pushl  0x184ca4


	/* save esp into k_thread structure */

	movl	_kernel_offset_to_current(%edi), %ecx
  1828cc:	8b 4f 08             	mov    0x8(%edi),%ecx
	movl	%esp, _thread_offset_to_esp(%ecx)
  1828cf:	89 61 28             	mov    %esp,0x28(%ecx)

#ifdef CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH
	/* Register the context switch */
	call	_sys_k_event_logger_context_switch
#endif
	movl	_kernel_offset_to_ready_q_cache(%edi), %eax
  1828d2:	8b 47 14             	mov    0x14(%edi),%eax

#endif /* CONFIG_FP_SHARING */

	/* update _kernel.current to reflect incoming thread */

	movl    %eax, _kernel_offset_to_current(%edi)
  1828d5:	89 47 08             	mov    %eax,0x8(%edi)

	/* recover task/fiber stack pointer from k_thread */

	movl	_thread_offset_to_esp(%eax), %esp
  1828d8:	8b 60 28             	mov    0x28(%eax),%esp


	/* load return value from a possible _set_thread_return_value() */

	popl	%eax
  1828db:	58                   	pop    %eax

	/* pop the non-volatile registers from the stack */

	popl	%ebp
  1828dc:	5d                   	pop    %ebp
	popl	%ebx
  1828dd:	5b                   	pop    %ebx
	popl	%esi
  1828de:	5e                   	pop    %esi
	popl	%edi
  1828df:	5f                   	pop    %edi
	 * - in unified kernel, -EINVAL
	 */

	/* Utilize the 'eflags' parameter to _Swap() */

	pushl	4(%esp)
  1828e0:	ff 74 24 04          	pushl  0x4(%esp)
	/* restore _Swap's %eax */
	popl	%eax

skipIntLatencyStop:
#endif
	popfl
  1828e4:	9d                   	popf   
#if CONFIG_X86_IAMCU
	/* Remember that eflags we stuck into the stack before the return
	 * address? need to get it out of there since the calling convention
	 * will not do that for us.
	 */
	popl	%edx
  1828e5:	5a                   	pop    %edx
	movl	%edx, (%esp)
  1828e6:	89 14 24             	mov    %edx,(%esp)
#endif
	ret
  1828e9:	c3                   	ret    

001828ea <_new_thread_internal>:
 * @return N/A
 */
static void _new_thread_internal(char *pStackMem, unsigned stackSize,
				 int priority,
				 unsigned options)
{
  1828ea:	56                   	push   %esi
  1828eb:	53                   	push   %ebx
  1828ec:	89 c3                	mov    %eax,%ebx
  1828ee:	89 d6                	mov    %edx,%esi
  1828f0:	89 ca                	mov    %ecx,%edx
	unsigned long *pInitialCtx;
	/* ptr to the new task's k_thread */
	struct k_thread *thread = (struct k_thread *)pStackMem;

#if (defined(CONFIG_FP_SHARING) || defined(CONFIG_GDB_INFO))
	thread->arch.excNestCount = 0;
  1828f2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
#endif /* CONFIG_FP_SHARING || CONFIG_GDB_INFO */

	_init_thread_base(&thread->base, priority, _THREAD_PRESTART, options);
  1828f9:	ff 74 24 0c          	pushl  0xc(%esp)
  1828fd:	b9 04 00 00 00       	mov    $0x4,%ecx
  182902:	e8 73 12 00 00       	call   183b7a <_init_thread_base>
  182907:	83 c4 04             	add    $0x4,%esp

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
  18290a:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
	thread->fn_abort = NULL;
  182911:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
	 * the base address of the stack which is past the initial stack frame.
	 * Therefore some of the calculations done in the other routines that
	 * initialize the stack frame need to be repeated.
	 */

	pInitialCtx = (unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
  182918:	8d 14 33             	lea    (%ebx,%esi,1),%edx
  18291b:	83 e2 fc             	and    $0xfffffffc,%edx
#ifdef CONFIG_THREAD_MONITOR
	/*
	 * In debug mode thread->entry give direct access to the thread entry
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitialCtx -
  18291e:	8d 42 c0             	lea    -0x40(%edx),%eax
  182921:	89 43 34             	mov    %eax,0x34(%ebx)
	 *  - 4 thread entry routine parameters
	 *  - eflags
	 *  - eip (so that _Swap() "returns" to the entry point)
	 *  - edi, esi, ebx, ebp,  eax
	 */
	pInitialCtx -= 11;
  182924:	83 ea 2c             	sub    $0x2c,%edx

	thread->callee_saved.esp = (unsigned long)pInitialCtx;
  182927:	89 53 28             	mov    %edx,0x28(%ebx)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  18292a:	9c                   	pushf  
  18292b:	fa                   	cli    
  18292c:	58                   	pop    %eax
static ALWAYS_INLINE void thread_monitor_init(struct k_thread *thread)
{
	unsigned int key;

	key = irq_lock();
	thread->next_thread = _kernel.threads;
  18292d:	8b 15 3c 02 28 00    	mov    0x28023c,%edx
  182933:	89 53 38             	mov    %edx,0x38(%ebx)
	_kernel.threads = thread;
  182936:	89 1d 3c 02 28 00    	mov    %ebx,0x28023c
  18293c:	f6 c4 02             	test   $0x2,%ah
  18293f:	74 01                	je     182942 <_new_thread_internal+0x58>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  182941:	fb                   	sti    
	PRINTK("\nInitial context ESP = 0x%x\n", thread->coopReg.esp);

	PRINTK("\nstruct thread * = 0x%x", thread);

	thread_monitor_init(thread);
}
  182942:	5b                   	pop    %ebx
  182943:	5e                   	pop    %esi
  182944:	c3                   	ret    

00182945 <_new_thread>:
 */
void _new_thread(char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
  182945:	56                   	push   %esi
  182946:	53                   	push   %ebx
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitialThread =
		(unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
  182947:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  18294a:	83 e3 fc             	and    $0xfffffffc,%ebx
	 * primitive.
	 */

	/* push arguments required by _thread_entry() */

	*--pInitialThread = (unsigned long)parameter3;
  18294d:	8b 74 24 14          	mov    0x14(%esp),%esi
  182951:	89 73 fc             	mov    %esi,-0x4(%ebx)
	*--pInitialThread = (unsigned long)parameter2;
  182954:	8b 74 24 10          	mov    0x10(%esp),%esi
  182958:	89 73 f8             	mov    %esi,-0x8(%ebx)
	*--pInitialThread = (unsigned long)parameter1;
  18295b:	8b 74 24 0c          	mov    0xc(%esp),%esi
  18295f:	89 73 f4             	mov    %esi,-0xc(%ebx)
	*--pInitialThread = (unsigned long)pEntry;
  182962:	89 4b f0             	mov    %ecx,-0x10(%ebx)
 */
static inline unsigned int EflagsGet(void)
{
	unsigned int eflags; /* EFLAGS register contents */

	__asm__ volatile(
  182965:	9c                   	pushf  
  182966:	59                   	pop    %ecx

	/* push initial EFLAGS; only modify IF and IOPL bits */

	*--pInitialThread = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
  182967:	80 e5 cd             	and    $0xcd,%ch
  18296a:	80 cd 02             	or     $0x2,%ch
  18296d:	89 4b ec             	mov    %ecx,-0x14(%ebx)
	/*
	 * Arrange for the _thread_entry_wrapper() function to be called
	 * to adjust the stack before _thread_entry() is invoked.
	 */

	*--pInitialThread = (unsigned long)_thread_entry_wrapper;
  182970:	c7 43 e8 60 00 18 00 	movl   $0x180060,-0x18(%ebx)
	/*
	 * The k_thread structure is located at the "low end" of memory set
	 * aside for the thread's stack.
	 */

	_new_thread_internal(pStackMem, stackSize, priority, options);
  182977:	ff 74 24 1c          	pushl  0x1c(%esp)
  18297b:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  18297f:	e8 66 ff ff ff       	call   1828ea <_new_thread_internal>
  182984:	83 c4 04             	add    $0x4,%esp
}
  182987:	5b                   	pop    %ebx
  182988:	5e                   	pop    %esi
  182989:	c3                   	ret    

0018298a <_debug_fatal_hook>:
#include <misc/printk.h>
#include <arch/x86/irq_controller.h>
#include <arch/x86/segmentation.h>
#include <exception.h>

__weak void _debug_fatal_hook(const NANO_ESF *esf) { ARG_UNUSED(esf); }
  18298a:	c3                   	ret    

0018298b <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
  18298b:	55                   	push   %ebp
  18298c:	57                   	push   %edi
  18298d:	56                   	push   %esi
  18298e:	53                   	push   %ebx
  18298f:	83 ec 24             	sub    $0x24,%esp
  182992:	89 c6                	mov    %eax,%esi
  182994:	89 d7                	mov    %edx,%edi
	_debug_fatal_hook(pEsf);
  182996:	89 d0                	mov    %edx,%eax
  182998:	e8 ed ff ff ff       	call   18298a <_debug_fatal_hook>

#ifdef CONFIG_PRINTK

	/* Display diagnostic information about the error */

	switch (reason) {
  18299d:	83 fe 03             	cmp    $0x3,%esi
  1829a0:	74 4c                	je     1829ee <_NanoFatalErrorHandler+0x63>
  1829a2:	83 fe 03             	cmp    $0x3,%esi
  1829a5:	77 06                	ja     1829ad <_NanoFatalErrorHandler+0x22>
  1829a7:	85 f6                	test   %esi,%esi
  1829a9:	74 0e                	je     1829b9 <_NanoFatalErrorHandler+0x2e>
  1829ab:	eb 5f                	jmp    182a0c <_NanoFatalErrorHandler+0x81>
  1829ad:	83 fe 05             	cmp    $0x5,%esi
  1829b0:	74 4b                	je     1829fd <_NanoFatalErrorHandler+0x72>
  1829b2:	83 fe 06             	cmp    $0x6,%esi
  1829b5:	74 63                	je     182a1a <_NanoFatalErrorHandler+0x8f>
  1829b7:	eb 53                	jmp    182a0c <_NanoFatalErrorHandler+0x81>
 * @return the vector of the interrupt that is currently being processed, or
 * -1 if this can't be determined
 */
static inline int _irq_controller_isr_vector_get(void)
{
	return __irq_controller_isr_vector_get();
  1829b9:	e8 7a dc ff ff       	call   180638 <__irq_controller_isr_vector_get>
  1829be:	89 c3                	mov    %eax,%ebx
		break;

	case _NANO_ERR_SPURIOUS_INT: {
		int vector = _irq_controller_isr_vector_get();

		printk("***** Unhandled interrupt vector ");
  1829c0:	68 ec 4a 18 00       	push   $0x184aec
  1829c5:	e8 e9 f0 ff ff       	call   181ab3 <printk>
  1829ca:	83 c4 04             	add    $0x4,%esp
		if (vector >= 0) {
  1829cd:	85 db                	test   %ebx,%ebx
  1829cf:	78 0e                	js     1829df <_NanoFatalErrorHandler+0x54>
			printk("%d ", vector);
  1829d1:	53                   	push   %ebx
  1829d2:	68 65 4a 18 00       	push   $0x184a65
  1829d7:	e8 d7 f0 ff ff       	call   181ab3 <printk>
  1829dc:	83 c4 08             	add    $0x8,%esp
		}
		printk("*****\n");
  1829df:	68 69 4a 18 00       	push   $0x184a69
  1829e4:	e8 ca f0 ff ff       	call   181ab3 <printk>
  1829e9:	83 c4 04             	add    $0x4,%esp
		break;
  1829ec:	eb 2c                	jmp    182a1a <_NanoFatalErrorHandler+0x8f>
	}
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
  1829ee:	68 10 4b 18 00       	push   $0x184b10
  1829f3:	e8 bb f0 ff ff       	call   181ab3 <printk>
  1829f8:	83 c4 04             	add    $0x4,%esp
		break;
  1829fb:	eb 1d                	jmp    182a1a <_NanoFatalErrorHandler+0x8f>
		break;
#endif /* CONFIG_STACK_CANARIES */


	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
  1829fd:	68 3c 4b 18 00       	push   $0x184b3c
  182a02:	e8 ac f0 ff ff       	call   181ab3 <printk>
  182a07:	83 c4 04             	add    $0x4,%esp
		break;
  182a0a:	eb 0e                	jmp    182a1a <_NanoFatalErrorHandler+0x8f>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
  182a0c:	56                   	push   %esi
  182a0d:	68 64 4b 18 00       	push   $0x184b64
  182a12:	e8 9c f0 ff ff       	call   181ab3 <printk>
  182a17:	83 c4 08             	add    $0x8,%esp
		break;
	}

	printk("Current thread ID = %p\n"
  182a1a:	8b 6f 2c             	mov    0x2c(%edi),%ebp
  182a1d:	8b 07                	mov    (%edi),%eax
  182a1f:	89 04 24             	mov    %eax,(%esp)
  182a22:	8b 4f 04             	mov    0x4(%edi),%ecx
  182a25:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  182a29:	8b 5f 10             	mov    0x10(%edi),%ebx
  182a2c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  182a30:	8b 57 0c             	mov    0xc(%edi),%edx
  182a33:	89 54 24 0c          	mov    %edx,0xc(%esp)
  182a37:	8b 47 14             	mov    0x14(%edi),%eax
  182a3a:	89 44 24 10          	mov    %eax,0x10(%esp)
  182a3e:	8b 4f 1c             	mov    0x1c(%edi),%ecx
  182a41:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  182a45:	8b 5f 08             	mov    0x8(%edi),%ebx
  182a48:	89 5c 24 18          	mov    %ebx,0x18(%esp)
  182a4c:	8b 57 18             	mov    0x18(%edi),%edx
  182a4f:	89 54 24 1c          	mov    %edx,0x1c(%esp)
  182a53:	8b 47 24             	mov    0x24(%edi),%eax
  182a56:	89 44 24 20          	mov    %eax,0x20(%esp)
	       "Faulting segment:address = 0x%x:0x%x\n"
	       "eax: 0x%x, ebx: 0x%x, ecx: 0x%x, edx: 0x%x\n"
	       "esi: 0x%x, edi: 0x%x, ebp: 0%x, esp: 0x%x\n"
	       "eflags: 0x%x\n",
	       k_current_get(),
	       pEsf->cs & 0xFFFF, pEsf->eip,
  182a5a:	8b 5f 28             	mov    0x28(%edi),%ebx
	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}

	printk("Current thread ID = %p\n"
  182a5d:	e8 ae 07 00 00       	call   183210 <k_current_get>
  182a62:	55                   	push   %ebp
  182a63:	ff 74 24 04          	pushl  0x4(%esp)
  182a67:	ff 74 24 0c          	pushl  0xc(%esp)
  182a6b:	ff 74 24 14          	pushl  0x14(%esp)
  182a6f:	ff 74 24 1c          	pushl  0x1c(%esp)
  182a73:	ff 74 24 24          	pushl  0x24(%esp)
  182a77:	ff 74 24 2c          	pushl  0x2c(%esp)
  182a7b:	ff 74 24 34          	pushl  0x34(%esp)
  182a7f:	ff 74 24 3c          	pushl  0x3c(%esp)
  182a83:	ff 74 24 44          	pushl  0x44(%esp)
  182a87:	0f b7 d3             	movzwl %bx,%edx
  182a8a:	52                   	push   %edx
  182a8b:	50                   	push   %eax
  182a8c:	68 88 4b 18 00       	push   $0x184b88
  182a91:	e8 1d f0 ff ff       	call   181ab3 <printk>
  182a96:	83 c4 34             	add    $0x34,%esp
	/*
	 * Error was fatal to a kernel task or a fiber; invoke the system
	 * fatal error handling policy defined for the platform.
	 */

	_SysFatalErrorHandler(reason, pEsf);
  182a99:	89 fa                	mov    %edi,%edx
  182a9b:	89 f0                	mov    %esi,%eax
  182a9d:	e8 c6 fc ff ff       	call   182768 <_SysFatalErrorHandler>

00182aa2 <generic_exc_handle>:

#if CONFIG_EXCEPTION_DEBUG

static FUNC_NORETURN void generic_exc_handle(unsigned int vector,
					     const NANO_ESF *pEsf)
{
  182aa2:	56                   	push   %esi
  182aa3:	53                   	push   %ebx
  182aa4:	89 c3                	mov    %eax,%ebx
  182aa6:	89 d6                	mov    %edx,%esi
	printk("***** CPU exception %d\n", vector);
  182aa8:	50                   	push   %eax
  182aa9:	68 70 4a 18 00       	push   $0x184a70
  182aae:	e8 00 f0 ff ff       	call   181ab3 <printk>
  182ab3:	83 c4 08             	add    $0x8,%esp
	if ((1 << vector) & _EXC_ERROR_CODE_FAULTS) {
  182ab6:	b8 00 7d 02 00       	mov    $0x27d00,%eax
  182abb:	88 d9                	mov    %bl,%cl
  182abd:	d3 f8                	sar    %cl,%eax
  182abf:	a8 01                	test   $0x1,%al
  182ac1:	74 10                	je     182ad3 <generic_exc_handle+0x31>
		printk("***** Exception code: 0x%x\n", pEsf->errorCode);
  182ac3:	ff 76 20             	pushl  0x20(%esi)
  182ac6:	68 88 4a 18 00       	push   $0x184a88
  182acb:	e8 e3 ef ff ff       	call   181ab3 <printk>
  182ad0:	83 c4 08             	add    $0x8,%esp
	}
	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
  182ad3:	89 f2                	mov    %esi,%edx
  182ad5:	b8 06 00 00 00       	mov    $0x6,%eax
  182ada:	e8 ac fe ff ff       	call   18298b <_NanoFatalErrorHandler>

00182adf <handle_exc_0>:
	_EXC_FUNC_NOCODE(vector)

#define EXC_FUNC_CODE(vector) \
	_EXC_FUNC_CODE(vector)

EXC_FUNC_NOCODE(IV_DIVIDE_ERROR);
  182adf:	89 c2                	mov    %eax,%edx
  182ae1:	b8 00 00 00 00       	mov    $0x0,%eax
  182ae6:	e8 b7 ff ff ff       	call   182aa2 <generic_exc_handle>

00182aeb <handle_exc_2>:
EXC_FUNC_NOCODE(IV_NON_MASKABLE_INTERRUPT);
  182aeb:	89 c2                	mov    %eax,%edx
  182aed:	b8 02 00 00 00       	mov    $0x2,%eax
  182af2:	e8 ab ff ff ff       	call   182aa2 <generic_exc_handle>

00182af7 <handle_exc_4>:
EXC_FUNC_NOCODE(IV_OVERFLOW);
  182af7:	89 c2                	mov    %eax,%edx
  182af9:	b8 04 00 00 00       	mov    $0x4,%eax
  182afe:	e8 9f ff ff ff       	call   182aa2 <generic_exc_handle>

00182b03 <handle_exc_5>:
EXC_FUNC_NOCODE(IV_BOUND_RANGE);
  182b03:	89 c2                	mov    %eax,%edx
  182b05:	b8 05 00 00 00       	mov    $0x5,%eax
  182b0a:	e8 93 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b0f <handle_exc_6>:
EXC_FUNC_NOCODE(IV_INVALID_OPCODE);
  182b0f:	89 c2                	mov    %eax,%edx
  182b11:	b8 06 00 00 00       	mov    $0x6,%eax
  182b16:	e8 87 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b1b <handle_exc_7>:
EXC_FUNC_NOCODE(IV_DEVICE_NOT_AVAILABLE);
  182b1b:	89 c2                	mov    %eax,%edx
  182b1d:	b8 07 00 00 00       	mov    $0x7,%eax
  182b22:	e8 7b ff ff ff       	call   182aa2 <generic_exc_handle>

00182b27 <handle_exc_8>:
EXC_FUNC_CODE(IV_DOUBLE_FAULT);
  182b27:	89 c2                	mov    %eax,%edx
  182b29:	b8 08 00 00 00       	mov    $0x8,%eax
  182b2e:	e8 6f ff ff ff       	call   182aa2 <generic_exc_handle>

00182b33 <handle_exc_10>:
EXC_FUNC_CODE(IV_INVALID_TSS);
  182b33:	89 c2                	mov    %eax,%edx
  182b35:	b8 0a 00 00 00       	mov    $0xa,%eax
  182b3a:	e8 63 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b3f <handle_exc_11>:
EXC_FUNC_CODE(IV_SEGMENT_NOT_PRESENT);
  182b3f:	89 c2                	mov    %eax,%edx
  182b41:	b8 0b 00 00 00       	mov    $0xb,%eax
  182b46:	e8 57 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b4b <handle_exc_12>:
EXC_FUNC_CODE(IV_STACK_FAULT);
  182b4b:	89 c2                	mov    %eax,%edx
  182b4d:	b8 0c 00 00 00       	mov    $0xc,%eax
  182b52:	e8 4b ff ff ff       	call   182aa2 <generic_exc_handle>

00182b57 <handle_exc_13>:
EXC_FUNC_CODE(IV_GENERAL_PROTECTION);
  182b57:	89 c2                	mov    %eax,%edx
  182b59:	b8 0d 00 00 00       	mov    $0xd,%eax
  182b5e:	e8 3f ff ff ff       	call   182aa2 <generic_exc_handle>

00182b63 <handle_exc_14>:
EXC_FUNC_CODE(IV_PAGE_FAULT);
  182b63:	89 c2                	mov    %eax,%edx
  182b65:	b8 0e 00 00 00       	mov    $0xe,%eax
  182b6a:	e8 33 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b6f <handle_exc_16>:
EXC_FUNC_NOCODE(IV_X87_FPU_FP_ERROR);
  182b6f:	89 c2                	mov    %eax,%edx
  182b71:	b8 10 00 00 00       	mov    $0x10,%eax
  182b76:	e8 27 ff ff ff       	call   182aa2 <generic_exc_handle>

00182b7b <handle_exc_17>:
EXC_FUNC_CODE(IV_ALIGNMENT_CHECK);
  182b7b:	89 c2                	mov    %eax,%edx
  182b7d:	b8 11 00 00 00       	mov    $0x11,%eax
  182b82:	e8 1b ff ff ff       	call   182aa2 <generic_exc_handle>

00182b87 <handle_exc_18>:
EXC_FUNC_NOCODE(IV_MACHINE_CHECK);
  182b87:	89 c2                	mov    %eax,%edx
  182b89:	b8 12 00 00 00       	mov    $0x12,%eax
  182b8e:	e8 0f ff ff ff       	call   182aa2 <generic_exc_handle>

00182b93 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
  182b93:	56                   	push   %esi
  182b94:	53                   	push   %ebx
  182b95:	89 c6                	mov    %eax,%esi
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
  182b97:	8b 1c 85 80 4c 18 00 	mov    0x184c80(,%eax,4),%ebx
  182b9e:	eb 0a                	jmp    182baa <_sys_device_do_config_level+0x17>
		struct device_config *device = info->config;
  182ba0:	8b 13                	mov    (%ebx),%edx

		device->init(info);
  182ba2:	89 d8                	mov    %ebx,%eax
  182ba4:	ff 52 04             	call   *0x4(%edx)
 */
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
  182ba7:	83 c3 0c             	add    $0xc,%ebx
  182baa:	3b 1c b5 84 4c 18 00 	cmp    0x184c84(,%esi,4),%ebx
  182bb1:	72 ed                	jb     182ba0 <_sys_device_do_config_level+0xd>
		struct device_config *device = info->config;

		device->init(info);
	}
}
  182bb3:	5b                   	pop    %ebx
  182bb4:	5e                   	pop    %esi
  182bb5:	c3                   	ret    

00182bb6 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
  182bb6:	56                   	push   %esi
  182bb7:	53                   	push   %ebx
  182bb8:	89 c6                	mov    %eax,%esi
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
  182bba:	bb 2c 00 28 00       	mov    $0x28002c,%ebx
  182bbf:	eb 18                	jmp    182bd9 <device_get_binding+0x23>
		if (info->driver_api && !strcmp(name, info->config->name)) {
  182bc1:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  182bc5:	74 0f                	je     182bd6 <device_get_binding+0x20>
  182bc7:	8b 03                	mov    (%ebx),%eax
  182bc9:	8b 10                	mov    (%eax),%edx
  182bcb:	89 f0                	mov    %esi,%eax
  182bcd:	e8 00 eb ff ff       	call   1816d2 <strcmp>
  182bd2:	85 c0                	test   %eax,%eax
  182bd4:	74 12                	je     182be8 <device_get_binding+0x32>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
  182bd6:	83 c3 0c             	add    $0xc,%ebx
  182bd9:	81 fb a4 00 28 00    	cmp    $0x2800a4,%ebx
  182bdf:	75 e0                	jne    182bc1 <device_get_binding+0xb>
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
  182be1:	b8 00 00 00 00       	mov    $0x0,%eax
  182be6:	eb 02                	jmp    182bea <device_get_binding+0x34>
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
  182be8:	89 d8                	mov    %ebx,%eax
		}
	}

	return NULL;
}
  182bea:	5b                   	pop    %ebx
  182beb:	5e                   	pop    %esi
  182bec:	c3                   	ret    

00182bed <device_busy_set>:
}

#endif

void device_busy_set(struct device *busy_dev)
{
  182bed:	c3                   	ret    

00182bee <device_busy_clear>:
	ARG_UNUSED(busy_dev);
#endif
}

void device_busy_clear(struct device *busy_dev)
{
  182bee:	c3                   	ret    

00182bef <prepare_multithreading>:
	 * initialization.  However, don't waste effort initializing the
	 * fields of the dummy thread beyond those needed to identify it as a
	 * dummy thread.
	 */

	_current = dummy_thread;
  182bef:	a3 28 01 28 00       	mov    %eax,0x280128

	dummy_thread->base.user_options = K_ESSENTIAL;
  182bf4:	c6 40 08 01          	movb   $0x1,0x8(%eax)

	_IntLibInit();

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
  182bf8:	b8 00 00 00 00       	mov    $0x0,%eax
  182bfd:	eb 1a                	jmp    182c19 <prepare_multithreading+0x2a>
		sys_dlist_init(&_ready_q.q[ii]);
  182bff:	8d 50 01             	lea    0x1(%eax),%edx
  182c02:	8d 0c d5 34 01 28 00 	lea    0x280134(,%edx,8),%ecx
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  182c09:	89 0c d5 34 01 28 00 	mov    %ecx,0x280134(,%edx,8)
	list->tail = (sys_dnode_t *)list;
  182c10:	89 0c c5 40 01 28 00 	mov    %ecx,0x280140(,%eax,8)

	_IntLibInit();

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
  182c17:	89 d0                	mov    %edx,%eax
  182c19:	83 f8 1f             	cmp    $0x1f,%eax
  182c1c:	7e e1                	jle    182bff <prepare_multithreading+0x10>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
  182c1e:	c7 05 34 01 28 00 c0 	movl   $0x2804c0,0x280134
  182c25:	04 28 00 

	_new_thread(_main_stack, MAIN_STACK_SIZE,
  182c28:	6a 01                	push   $0x1
  182c2a:	6a 00                	push   $0x0
  182c2c:	6a 00                	push   $0x0
  182c2e:	6a 00                	push   $0x0
  182c30:	6a 00                	push   $0x0
  182c32:	b9 de 2c 18 00       	mov    $0x182cde,%ecx
  182c37:	ba 00 02 00 00       	mov    $0x200,%edx
  182c3c:	b8 c0 04 28 00       	mov    $0x2804c0,%eax
  182c41:	e8 ff fc ff ff       	call   182945 <_new_thread>
  182c46:	83 c4 14             	add    $0x14,%esp
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  182c49:	a0 c9 04 28 00       	mov    0x2804c9,%al
  182c4e:	83 e0 fb             	and    $0xfffffffb,%eax
  182c51:	a2 c9 04 28 00       	mov    %al,0x2804c9
		    _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
  182c56:	b8 c0 04 28 00       	mov    $0x2804c0,%eax
  182c5b:	e8 3b 01 00 00       	call   182d9b <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_stack, IDLE_STACK_SIZE,
  182c60:	6a 01                	push   $0x1
  182c62:	6a 0f                	push   $0xf
  182c64:	6a 00                	push   $0x0
  182c66:	6a 00                	push   $0x0
  182c68:	6a 00                	push   $0x0
  182c6a:	b9 dc 3b 18 00       	mov    $0x183bdc,%ecx
  182c6f:	ba 00 01 00 00       	mov    $0x100,%edx
  182c74:	b8 c0 03 28 00       	mov    $0x2803c0,%eax
  182c79:	e8 c7 fc ff ff       	call   182945 <_new_thread>
  182c7e:	83 c4 14             	add    $0x14,%esp
  182c81:	a0 c9 03 28 00       	mov    0x2803c9,%al
  182c86:	83 e0 fb             	and    $0xfffffffb,%eax
  182c89:	a2 c9 03 28 00       	mov    %al,0x2803c9
		    idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
  182c8e:	b8 c0 03 28 00       	mov    $0x2803c0,%eax
  182c93:	e8 03 01 00 00       	call   182d9b <_add_thread_to_ready_q>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  182c98:	c7 05 2c 01 28 00 2c 	movl   $0x28012c,0x28012c
  182c9f:	01 28 00 
	list->tail = (sys_dnode_t *)list;
  182ca2:	c7 05 30 01 28 00 2c 	movl   $0x28012c,0x280130
  182ca9:	01 28 00 
	extern void *_dummy_exception_vector_stub;
	extern char _interrupt_stack[CONFIG_ISR_STACK_SIZE];

	extern void _exception_enter(void);

	_kernel.nested = 0;
  182cac:	c7 05 20 01 28 00 00 	movl   $0x0,0x280120
  182cb3:	00 00 00 

	_kernel.irq_stack = _interrupt_stack + CONFIG_ISR_STACK_SIZE;
  182cb6:	c7 05 24 01 28 00 c0 	movl   $0x2803c0,0x280124
  182cbd:	03 28 00 
	 * Forces the inclusion of the spurious interrupt handlers. If a
	 * reference isn't made then intconnect.o is never pulled in by the
	 * linker.
	 */

	_dummy_spurious_interrupt = &__isr___SpuriousIntHandler;
  182cc0:	c7 05 a8 02 28 00 00 	movl   $0x200,0x2802a8
  182cc7:	02 00 00 
	 * Forces the inclusion of the exception vector stub code. If a
	 * reference isn't made then excstubs.o is never pulled in by the
	 * linker.
	 */

	_dummy_exception_vector_stub = &_exception_enter;
  182cca:	c7 05 a0 02 28 00 e6 	movl   $0x1827e6,0x2802a0
  182cd1:	27 18 00 
  182cd4:	c3                   	ret    

00182cd5 <switch_to_main_thread>:

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  182cd5:	9c                   	pushf  
  182cd6:	fa                   	cli    
  182cd7:	58                   	pop    %eax
	 * Context switch to main task (entry function is _main()): the
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */

	_Swap(irq_lock());
  182cd8:	e8 d9 fb ff ff       	call   1828b6 <_Swap>
  182cdd:	c3                   	ret    

00182cde <_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
  182cde:	b8 02 00 00 00       	mov    $0x2,%eax
  182ce3:	e8 ab fe ff ff       	call   182b93 <_sys_device_do_config_level>

	/* These 3 are deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_SECONDARY);
  182ce8:	b8 05 00 00 00       	mov    $0x5,%eax
  182ced:	e8 a1 fe ff ff       	call   182b93 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_NANOKERNEL);
  182cf2:	b8 06 00 00 00       	mov    $0x6,%eax
  182cf7:	e8 97 fe ff ff       	call   182b93 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_MICROKERNEL);
  182cfc:	b8 07 00 00 00       	mov    $0x7,%eax
  182d01:	e8 8d fe ff ff       	call   182b93 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
  182d06:	b8 03 00 00 00       	mov    $0x3,%eax
  182d0b:	e8 83 fe ff ff       	call   182b93 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
  182d10:	e8 dc 0d 00 00       	call   183af1 <_init_static_threads>
	 */
#if defined(MDEF_MAIN_THREAD_PRIORITY) && \
		(MDEF_MAIN_THREAD_PRIORITY != CONFIG_MAIN_THREAD_PRIORITY)
	k_thread_priority_set(_main_thread, MDEF_MAIN_THREAD_PRIORITY);
#endif
	main();
  182d15:	e8 04 d4 ff ff       	call   18011e <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
  182d1a:	a0 c8 04 28 00       	mov    0x2804c8,%al
  182d1f:	83 e0 fe             	and    $0xfffffffe,%eax
  182d22:	a2 c8 04 28 00       	mov    %al,0x2804c8
  182d27:	c3                   	ret    

00182d28 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
  182d28:	83 ec 48             	sub    $0x48,%esp
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
  182d2b:	89 e0                	mov    %esp,%eax
  182d2d:	e8 bd fe ff ff       	call   182bef <prepare_multithreading>

	/* Deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRIMARY);
  182d32:	b8 04 00 00 00       	mov    $0x4,%eax
  182d37:	e8 57 fe ff ff       	call   182b93 <_sys_device_do_config_level>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
  182d3c:	b8 00 00 00 00       	mov    $0x0,%eax
  182d41:	e8 4d fe ff ff       	call   182b93 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
  182d46:	b8 01 00 00 00       	mov    $0x1,%eax
  182d4b:	e8 43 fe ff ff       	call   182b93 <_sys_device_do_config_level>

	/* display boot banner */

	PRINT_BOOT_BANNER();

	switch_to_main_thread();
  182d50:	e8 80 ff ff ff       	call   182cd5 <switch_to_main_thread>

00182d55 <_set_ready_q_prio_bit>:
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
  182d55:	8d 48 10             	lea    0x10(%eax),%ecx
  182d58:	89 ca                	mov    %ecx,%edx
  182d5a:	c1 fa 05             	sar    $0x5,%edx
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  182d5d:	b8 01 00 00 00       	mov    $0x1,%eax
  182d62:	d3 e0                	shl    %cl,%eax
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
  182d64:	09 04 95 38 01 28 00 	or     %eax,0x280138(,%edx,4)
  182d6b:	c3                   	ret    

00182d6c <_clear_ready_q_prio_bit>:
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
  182d6c:	8d 48 10             	lea    0x10(%eax),%ecx
  182d6f:	89 c8                	mov    %ecx,%eax
  182d71:	c1 f8 05             	sar    $0x5,%eax
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  182d74:	ba 01 00 00 00       	mov    $0x1,%edx
  182d79:	d3 e2                	shl    %cl,%edx
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
  182d7b:	f7 d2                	not    %edx
  182d7d:	21 14 85 38 01 28 00 	and    %edx,0x280138(,%eax,4)
  182d84:	c3                   	ret    

00182d85 <_get_ready_q_head>:

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	unsigned int bitpos;

	__asm__ volatile (
  182d85:	0f bc 05 38 01 28 00 	bsf    0x280138,%eax
  182d8c:	75 05                	jne    182d93 <_get_ready_q_head+0xe>
  182d8e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 * @return a pointer to the head element
 */

static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
	return list->head;
  182d93:	8b 04 c5 3c 01 28 00 	mov    0x28013c(,%eax,8),%eax

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
  182d9a:	c3                   	ret    

00182d9b <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
  182d9b:	57                   	push   %edi
  182d9c:	56                   	push   %esi
  182d9d:	53                   	push   %ebx
  182d9e:	89 c6                	mov    %eax,%esi
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  182da0:	0f be 58 0a          	movsbl 0xa(%eax),%ebx
	sys_dlist_t *q = &_ready_q.q[q_index];
  182da4:	8d 3c dd bc 01 28 00 	lea    0x2801bc(,%ebx,8),%edi

	_set_ready_q_prio_bit(thread->base.prio);
  182dab:	89 d8                	mov    %ebx,%eax
  182dad:	e8 a3 ff ff ff       	call   182d55 <_set_ready_q_prio_bit>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  182db2:	89 3e                	mov    %edi,(%esi)
	node->prev = list->tail;
  182db4:	83 c3 14             	add    $0x14,%ebx
  182db7:	8b 04 dd 20 01 28 00 	mov    0x280120(,%ebx,8),%eax
  182dbe:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  182dc1:	8b 04 dd 20 01 28 00 	mov    0x280120(,%ebx,8),%eax
  182dc8:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  182dca:	89 34 dd 20 01 28 00 	mov    %esi,0x280120(,%ebx,8)
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
  182dd1:	a1 34 01 28 00       	mov    0x280134,%eax
  182dd6:	8a 50 0a             	mov    0xa(%eax),%dl
  182dd9:	38 56 0a             	cmp    %dl,0xa(%esi)
  182ddc:	7d 02                	jge    182de0 <_add_thread_to_ready_q+0x45>
  182dde:	89 f0                	mov    %esi,%eax
  182de0:	a3 34 01 28 00       	mov    %eax,0x280134
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
  182de5:	5b                   	pop    %ebx
  182de6:	5e                   	pop    %esi
  182de7:	5f                   	pop    %edi
  182de8:	c3                   	ret    

00182de9 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
  182de9:	56                   	push   %esi
  182dea:	53                   	push   %ebx
  182deb:	89 c3                	mov    %eax,%ebx
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  182ded:	0f be 40 0a          	movsbl 0xa(%eax),%eax
	sys_dlist_t *q = &_ready_q.q[q_index];
  182df1:	83 c0 11             	add    $0x11,%eax
  182df4:	8d 14 c5 34 01 28 00 	lea    0x280134(,%eax,8),%edx
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  182dfb:	8b 4b 04             	mov    0x4(%ebx),%ecx
  182dfe:	8b 33                	mov    (%ebx),%esi
  182e00:	89 31                	mov    %esi,(%ecx)
	node->next->prev = node->prev;
  182e02:	8b 0b                	mov    (%ebx),%ecx
  182e04:	8b 73 04             	mov    0x4(%ebx),%esi
  182e07:	89 71 04             	mov    %esi,0x4(%ecx)

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
  182e0a:	3b 14 c5 34 01 28 00 	cmp    0x280134(,%eax,8),%edx
  182e11:	75 09                	jne    182e1c <_remove_thread_from_ready_q+0x33>
		_clear_ready_q_prio_bit(thread->base.prio);
  182e13:	0f be 43 0a          	movsbl 0xa(%ebx),%eax
  182e17:	e8 50 ff ff ff       	call   182d6c <_clear_ready_q_prio_bit>
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  182e1c:	a1 34 01 28 00       	mov    0x280134,%eax
  182e21:	39 c3                	cmp    %eax,%ebx
  182e23:	75 05                	jne    182e2a <_remove_thread_from_ready_q+0x41>
  182e25:	e8 5b ff ff ff       	call   182d85 <_get_ready_q_head>
  182e2a:	a3 34 01 28 00       	mov    %eax,0x280134
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
  182e2f:	5b                   	pop    %ebx
  182e30:	5e                   	pop    %esi
  182e31:	c3                   	ret    

00182e32 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, int32_t timeout)
{
  182e32:	57                   	push   %edi
  182e33:	56                   	push   %esi
  182e34:	53                   	push   %ebx
  182e35:	89 c3                	mov    %eax,%ebx
  182e37:	89 d6                	mov    %edx,%esi
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  182e39:	8b 12                	mov    (%edx),%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  182e3b:	39 d6                	cmp    %edx,%esi
  182e3d:	75 49                	jne    182e88 <_pend_thread+0x56>
  182e3f:	ba 00 00 00 00       	mov    $0x0,%edx
  182e44:	eb 42                	jmp    182e88 <_pend_thread+0x56>
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
  182e46:	8a 43 0a             	mov    0xa(%ebx),%al
  182e49:	38 42 0a             	cmp    %al,0xa(%edx)
  182e4c:	7e 28                	jle    182e76 <_pend_thread+0x44>
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  182e4e:	85 d2                	test   %edx,%edx
  182e50:	75 12                	jne    182e64 <_pend_thread+0x32>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  182e52:	89 33                	mov    %esi,(%ebx)
	node->prev = list->tail;
  182e54:	8b 46 04             	mov    0x4(%esi),%eax
  182e57:	89 43 04             	mov    %eax,0x4(%ebx)

	list->tail->next = node;
  182e5a:	8b 46 04             	mov    0x4(%esi),%eax
  182e5d:	89 18                	mov    %ebx,(%eax)
	list->tail = node;
  182e5f:	89 5e 04             	mov    %ebx,0x4(%esi)
  182e62:	eb 38                	jmp    182e9c <_pend_thread+0x6a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  182e64:	8b 42 04             	mov    0x4(%edx),%eax
  182e67:	89 43 04             	mov    %eax,0x4(%ebx)
		node->next = insert_point;
  182e6a:	89 13                	mov    %edx,(%ebx)
		insert_point->prev->next = node;
  182e6c:	8b 42 04             	mov    0x4(%edx),%eax
  182e6f:	89 18                	mov    %ebx,(%eax)
		insert_point->prev = node;
  182e71:	89 5a 04             	mov    %ebx,0x4(%edx)
  182e74:	eb 26                	jmp    182e9c <_pend_thread+0x6a>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182e76:	85 d2                	test   %edx,%edx
  182e78:	74 0e                	je     182e88 <_pend_thread+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  182e7a:	3b 56 04             	cmp    0x4(%esi),%edx
  182e7d:	74 04                	je     182e83 <_pend_thread+0x51>
  182e7f:	8b 12                	mov    (%edx),%edx
  182e81:	eb 05                	jmp    182e88 <_pend_thread+0x56>
  182e83:	ba 00 00 00 00       	mov    $0x0,%edx
{
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
  182e88:	85 d2                	test   %edx,%edx
  182e8a:	75 ba                	jne    182e46 <_pend_thread+0x14>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  182e8c:	89 33                	mov    %esi,(%ebx)
	node->prev = list->tail;
  182e8e:	8b 46 04             	mov    0x4(%esi),%eax
  182e91:	89 43 04             	mov    %eax,0x4(%ebx)

	list->tail->next = node;
  182e94:	8b 46 04             	mov    0x4(%esi),%eax
  182e97:	89 18                	mov    %ebx,(%eax)
	list->tail = node;
  182e99:	89 5e 04             	mov    %ebx,0x4(%esi)
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
  182e9c:	80 4b 09 02          	orb    $0x2,0x9(%ebx)
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
  182ea0:	83 f9 ff             	cmp    $0xffffffff,%ecx
  182ea3:	0f 84 03 01 00 00    	je     182fac <_pend_thread+0x17a>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern int32_t _ms_to_ticks(int32_t ms);
#else
static ALWAYS_INLINE int32_t _ms_to_ticks(int32_t ms)
{
	return (int32_t)ceiling_fraction((uint32_t)ms, _ms_per_tick);
  182ea9:	83 c1 09             	add    $0x9,%ecx
  182eac:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  182eb1:	89 c8                	mov    %ecx,%eax
  182eb3:	f7 e2                	mul    %edx
  182eb5:	c1 ea 03             	shr    $0x3,%edx
		int32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
  182eb8:	42                   	inc    %edx

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  182eb9:	8d 7b 10             	lea    0x10(%ebx),%edi
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
  182ebc:	89 57 10             	mov    %edx,0x10(%edi)
	timeout->thread = thread;
  182ebf:	89 5f 08             	mov    %ebx,0x8(%edi)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  182ec2:	89 77 0c             	mov    %esi,0xc(%edi)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  182ec5:	a1 2c 01 28 00       	mov    0x28012c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  182eca:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  182ecf:	75 07                	jne    182ed8 <_pend_thread+0xa6>
  182ed1:	ba 00 00 00 00       	mov    $0x0,%edx
  182ed6:	eb 02                	jmp    182eda <_pend_thread+0xa8>
  182ed8:	89 c2                	mov    %eax,%edx
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  182eda:	85 d2                	test   %edx,%edx
  182edc:	74 15                	je     182ef3 <_pend_thread+0xc1>
  182ede:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  182ee3:	0f 85 9f 00 00 00    	jne    182f88 <_pend_thread+0x156>
  182ee9:	b8 00 00 00 00       	mov    $0x0,%eax
  182eee:	e9 95 00 00 00       	jmp    182f88 <_pend_thread+0x156>
  182ef3:	b8 00 00 00 00       	mov    $0x0,%eax
  182ef8:	e9 8b 00 00 00       	jmp    182f88 <_pend_thread+0x156>
		if (*delta <= in_q->delta_ticks_from_prev) {
  182efd:	8b 57 10             	mov    0x10(%edi),%edx
  182f00:	8b 48 10             	mov    0x10(%eax),%ecx
  182f03:	39 ca                	cmp    %ecx,%edx
  182f05:	7f 3a                	jg     182f41 <_pend_thread+0x10f>
			in_q->delta_ticks_from_prev -= *delta;
  182f07:	29 d1                	sub    %edx,%ecx
  182f09:	89 48 10             	mov    %ecx,0x10(%eax)
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  182f0c:	85 c0                	test   %eax,%eax
  182f0e:	75 1e                	jne    182f2e <_pend_thread+0xfc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  182f10:	c7 43 10 2c 01 28 00 	movl   $0x28012c,0x10(%ebx)
	node->prev = list->tail;
  182f17:	a1 30 01 28 00       	mov    0x280130,%eax
  182f1c:	89 47 04             	mov    %eax,0x4(%edi)

	list->tail->next = node;
  182f1f:	a1 30 01 28 00       	mov    0x280130,%eax
  182f24:	89 38                	mov    %edi,(%eax)
	list->tail = node;
  182f26:	89 3d 30 01 28 00    	mov    %edi,0x280130
  182f2c:	eb 7e                	jmp    182fac <_pend_thread+0x17a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  182f2e:	8b 50 04             	mov    0x4(%eax),%edx
  182f31:	89 57 04             	mov    %edx,0x4(%edi)
		node->next = insert_point;
  182f34:	89 43 10             	mov    %eax,0x10(%ebx)
		insert_point->prev->next = node;
  182f37:	8b 50 04             	mov    0x4(%eax),%edx
  182f3a:	89 3a                	mov    %edi,(%edx)
		insert_point->prev = node;
  182f3c:	89 78 04             	mov    %edi,0x4(%eax)
  182f3f:	eb 6b                	jmp    182fac <_pend_thread+0x17a>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
  182f41:	29 ca                	sub    %ecx,%edx
  182f43:	89 57 10             	mov    %edx,0x10(%edi)
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  182f46:	89 c2                	mov    %eax,%edx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182f48:	85 c0                	test   %eax,%eax
  182f4a:	74 0c                	je     182f58 <_pend_thread+0x126>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  182f4c:	3b 05 30 01 28 00    	cmp    0x280130,%eax
  182f52:	74 08                	je     182f5c <_pend_thread+0x12a>
  182f54:	8b 08                	mov    (%eax),%ecx
  182f56:	eb 09                	jmp    182f61 <_pend_thread+0x12f>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182f58:	89 c1                	mov    %eax,%ecx
  182f5a:	eb 05                	jmp    182f61 <_pend_thread+0x12f>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  182f5c:	b9 00 00 00 00       	mov    $0x0,%ecx
  182f61:	85 c9                	test   %ecx,%ecx
  182f63:	74 1e                	je     182f83 <_pend_thread+0x151>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182f65:	85 d2                	test   %edx,%edx
  182f67:	74 0c                	je     182f75 <_pend_thread+0x143>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  182f69:	3b 15 30 01 28 00    	cmp    0x280130,%edx
  182f6f:	74 0b                	je     182f7c <_pend_thread+0x14a>
  182f71:	8b 00                	mov    (%eax),%eax
  182f73:	eb 13                	jmp    182f88 <_pend_thread+0x156>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182f75:	b8 00 00 00 00       	mov    $0x0,%eax
  182f7a:	eb 0c                	jmp    182f88 <_pend_thread+0x156>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  182f7c:	b8 00 00 00 00       	mov    $0x0,%eax
  182f81:	eb 05                	jmp    182f88 <_pend_thread+0x156>
  182f83:	b8 00 00 00 00       	mov    $0x0,%eax
  182f88:	85 c0                	test   %eax,%eax
  182f8a:	0f 85 6d ff ff ff    	jne    182efd <_pend_thread+0xcb>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  182f90:	c7 43 10 2c 01 28 00 	movl   $0x28012c,0x10(%ebx)
	node->prev = list->tail;
  182f97:	a1 30 01 28 00       	mov    0x280130,%eax
  182f9c:	89 47 04             	mov    %eax,0x4(%edi)

	list->tail->next = node;
  182f9f:	a1 30 01 28 00       	mov    0x280130,%eax
  182fa4:	89 38                	mov    %edi,(%eax)
	list->tail = node;
  182fa6:	89 3d 30 01 28 00    	mov    %edi,0x280130

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
  182fac:	5b                   	pop    %ebx
  182fad:	5e                   	pop    %esi
  182fae:	5f                   	pop    %edi
  182faf:	c3                   	ret    

00182fb0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
  182fb0:	56                   	push   %esi
  182fb1:	53                   	push   %ebx
  182fb2:	89 c3                	mov    %eax,%ebx
  182fb4:	89 d6                	mov    %edx,%esi
	_remove_thread_from_ready_q(_current);
  182fb6:	a1 28 01 28 00       	mov    0x280128,%eax
  182fbb:	e8 29 fe ff ff       	call   182de9 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
  182fc0:	89 f1                	mov    %esi,%ecx
  182fc2:	89 da                	mov    %ebx,%edx
  182fc4:	a1 28 01 28 00       	mov    0x280128,%eax
  182fc9:	e8 64 fe ff ff       	call   182e32 <_pend_thread>
}
  182fce:	5b                   	pop    %ebx
  182fcf:	5e                   	pop    %esi
  182fd0:	c3                   	ret    

00182fd1 <__must_switch_threads>:
		_current->base.prio, _get_highest_ready_prio());

	extern void _dump_ready_q(void);
	_dump_ready_q();

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
  182fd1:	a1 28 01 28 00       	mov    0x280128,%eax
  182fd6:	0f be 50 0a          	movsbl 0xa(%eax),%edx
  182fda:	0f bc 05 38 01 28 00 	bsf    0x280138,%eax
  182fe1:	75 05                	jne    182fe8 <__must_switch_threads+0x17>
  182fe3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

	int abs_prio = (find_lsb_set(ready_range) - 1) + (bitmap << 5);

	__ASSERT(abs_prio < K_NUM_PRIORITIES, "prio out-of-range\n");

	return abs_prio - _NUM_COOP_PRIO;
  182fe8:	83 e8 10             	sub    $0x10,%eax
	return _is_prio1_higher_than_or_equal_to_prio2(prio1, prio2);
}

static inline int _is_prio1_higher_than_prio2(int prio1, int prio2)
{
	return prio1 < prio2;
  182feb:	39 c2                	cmp    %eax,%edx
  182fed:	0f 9f c0             	setg   %al
  182ff0:	0f b6 c0             	movzbl %al,%eax
#else
	return 0;
#endif
}
  182ff3:	c3                   	ret    

00182ff4 <_reschedule_threads>:

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
  182ff4:	53                   	push   %ebx
  182ff5:	89 c3                	mov    %eax,%ebx
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
  182ff7:	a1 28 01 28 00       	mov    0x280128,%eax
  182ffc:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  183001:	77 10                	ja     183013 <_reschedule_threads+0x1f>
  183003:	e8 c9 ff ff ff       	call   182fd1 <__must_switch_threads>
  183008:	85 c0                	test   %eax,%eax
  18300a:	74 0c                	je     183018 <_reschedule_threads+0x24>
  18300c:	b8 01 00 00 00       	mov    $0x1,%eax
  183011:	eb 05                	jmp    183018 <_reschedule_threads+0x24>
  183013:	b8 00 00 00 00       	mov    $0x0,%eax
#ifdef CONFIG_PREEMPT_ENABLED
	K_DEBUG("rescheduling threads\n");

	if (_must_switch_threads()) {
  183018:	85 c0                	test   %eax,%eax
  18301a:	74 09                	je     183025 <_reschedule_threads+0x31>
		K_DEBUG("context-switching out %p\n", _current);
		_Swap(key);
  18301c:	89 d8                	mov    %ebx,%eax
  18301e:	e8 93 f8 ff ff       	call   1828b6 <_Swap>
  183023:	eb 06                	jmp    18302b <_reschedule_threads+0x37>
  183025:	f6 c7 02             	test   $0x2,%bh
  183028:	74 01                	je     18302b <_reschedule_threads+0x37>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  18302a:	fb                   	sti    
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
  18302b:	5b                   	pop    %ebx
  18302c:	c3                   	ret    

0018302d <k_sched_unlock>:

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  18302d:	9c                   	pushf  
  18302e:	fa                   	cli    
  18302f:	58                   	pop    %eax

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
  183030:	8b 0d 28 01 28 00    	mov    0x280128,%ecx
  183036:	8a 51 0b             	mov    0xb(%ecx),%dl
  183039:	42                   	inc    %edx
  18303a:	88 51 0b             	mov    %dl,0xb(%ecx)

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
  18303d:	e8 b2 ff ff ff       	call   182ff4 <_reschedule_threads>
  183042:	c3                   	ret    

00183043 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  183043:	0f be 48 0a          	movsbl 0xa(%eax),%ecx
	sys_dlist_t *q = &_ready_q.q[q_index];

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
  183047:	3b 04 cd c0 01 28 00 	cmp    0x2801c0(,%ecx,8),%eax
  18304e:	74 53                	je     1830a3 <_move_thread_to_end_of_prio_q+0x60>
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
  183050:	56                   	push   %esi
  183051:	53                   	push   %ebx
  183052:	8d 51 10             	lea    0x10(%ecx),%edx
  183055:	8d 1c cd bc 01 28 00 	lea    0x2801bc(,%ecx,8),%ebx
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  18305c:	8b 48 04             	mov    0x4(%eax),%ecx
  18305f:	8b 30                	mov    (%eax),%esi
  183061:	89 31                	mov    %esi,(%ecx)
	node->next->prev = node->prev;
  183063:	8b 08                	mov    (%eax),%ecx
  183065:	8b 70 04             	mov    0x4(%eax),%esi
  183068:	89 71 04             	mov    %esi,0x4(%ecx)
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  18306b:	89 18                	mov    %ebx,(%eax)
	node->prev = list->tail;
  18306d:	83 c2 04             	add    $0x4,%edx
  183070:	8b 0c d5 20 01 28 00 	mov    0x280120(,%edx,8),%ecx
  183077:	89 48 04             	mov    %ecx,0x4(%eax)

	list->tail->next = node;
  18307a:	8b 0c d5 20 01 28 00 	mov    0x280120(,%edx,8),%ecx
  183081:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
  183083:	89 04 d5 20 01 28 00 	mov    %eax,0x280120(,%edx,8)
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  18308a:	8b 15 34 01 28 00    	mov    0x280134,%edx
  183090:	39 d0                	cmp    %edx,%eax
  183092:	75 07                	jne    18309b <_move_thread_to_end_of_prio_q+0x58>
  183094:	e8 ec fc ff ff       	call   182d85 <_get_ready_q_head>
  183099:	89 c2                	mov    %eax,%edx
  18309b:	89 15 34 01 28 00    	mov    %edx,0x280134
#endif
}
  1830a1:	5b                   	pop    %ebx
  1830a2:	5e                   	pop    %esi
  1830a3:	c3                   	ret    

001830a4 <k_yield>:

void k_yield(void)
{
  1830a4:	53                   	push   %ebx
  1830a5:	9c                   	pushf  
  1830a6:	fa                   	cli    
  1830a7:	5b                   	pop    %ebx
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
  1830a8:	a1 28 01 28 00       	mov    0x280128,%eax
  1830ad:	e8 91 ff ff ff       	call   183043 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
  1830b2:	a1 34 01 28 00       	mov    0x280134,%eax
  1830b7:	39 05 28 01 28 00    	cmp    %eax,0x280128
  1830bd:	75 08                	jne    1830c7 <k_yield+0x23>
  1830bf:	f6 c7 02             	test   $0x2,%bh
  1830c2:	74 0a                	je     1830ce <k_yield+0x2a>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1830c4:	fb                   	sti    
  1830c5:	eb 07                	jmp    1830ce <k_yield+0x2a>
		irq_unlock(key);
	} else {
		_Swap(key);
  1830c7:	89 d8                	mov    %ebx,%eax
  1830c9:	e8 e8 f7 ff ff       	call   1828b6 <_Swap>
	}
}
  1830ce:	5b                   	pop    %ebx
  1830cf:	c3                   	ret    

001830d0 <k_sleep>:

void k_sleep(int32_t duration)
{
  1830d0:	57                   	push   %edi
  1830d1:	56                   	push   %esi
  1830d2:	53                   	push   %ebx
  1830d3:	83 ec 04             	sub    $0x4,%esp
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
  1830d6:	85 c0                	test   %eax,%eax
  1830d8:	75 0a                	jne    1830e4 <k_sleep+0x14>
		k_yield();
  1830da:	e8 c5 ff ff ff       	call   1830a4 <k_yield>
		return;
  1830df:	e9 25 01 00 00       	jmp    183209 <k_sleep+0x139>
  1830e4:	83 c0 09             	add    $0x9,%eax
  1830e7:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1830ec:	f7 e2                	mul    %edx
  1830ee:	c1 ea 03             	shr    $0x3,%edx
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
  1830f1:	42                   	inc    %edx
  1830f2:	89 14 24             	mov    %edx,(%esp)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1830f5:	9c                   	pushf  
  1830f6:	fa                   	cli    
  1830f7:	5b                   	pop    %ebx
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
  1830f8:	a1 28 01 28 00       	mov    0x280128,%eax
  1830fd:	e8 e7 fc ff ff       	call   182de9 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
  183102:	8b 04 24             	mov    (%esp),%eax
  183105:	8b 3d 28 01 28 00    	mov    0x280128,%edi

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  18310b:	8d 77 10             	lea    0x10(%edi),%esi
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
  18310e:	89 46 10             	mov    %eax,0x10(%esi)
	timeout->thread = thread;
  183111:	89 7e 08             	mov    %edi,0x8(%esi)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  183114:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  18311b:	a1 2c 01 28 00       	mov    0x28012c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  183120:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  183125:	75 07                	jne    18312e <k_sleep+0x5e>
  183127:	ba 00 00 00 00       	mov    $0x0,%edx
  18312c:	eb 02                	jmp    183130 <k_sleep+0x60>
  18312e:	89 c2                	mov    %eax,%edx
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  183130:	85 d2                	test   %edx,%edx
  183132:	74 15                	je     183149 <k_sleep+0x79>
  183134:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  183139:	0f 85 9f 00 00 00    	jne    1831de <k_sleep+0x10e>
  18313f:	b8 00 00 00 00       	mov    $0x0,%eax
  183144:	e9 95 00 00 00       	jmp    1831de <k_sleep+0x10e>
  183149:	b8 00 00 00 00       	mov    $0x0,%eax
  18314e:	e9 8b 00 00 00       	jmp    1831de <k_sleep+0x10e>
		if (*delta <= in_q->delta_ticks_from_prev) {
  183153:	8b 56 10             	mov    0x10(%esi),%edx
  183156:	8b 48 10             	mov    0x10(%eax),%ecx
  183159:	39 ca                	cmp    %ecx,%edx
  18315b:	7f 3a                	jg     183197 <k_sleep+0xc7>
			in_q->delta_ticks_from_prev -= *delta;
  18315d:	29 d1                	sub    %edx,%ecx
  18315f:	89 48 10             	mov    %ecx,0x10(%eax)
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  183162:	85 c0                	test   %eax,%eax
  183164:	75 1e                	jne    183184 <k_sleep+0xb4>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  183166:	c7 47 10 2c 01 28 00 	movl   $0x28012c,0x10(%edi)
	node->prev = list->tail;
  18316d:	a1 30 01 28 00       	mov    0x280130,%eax
  183172:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  183175:	a1 30 01 28 00       	mov    0x280130,%eax
  18317a:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  18317c:	89 35 30 01 28 00    	mov    %esi,0x280130
  183182:	eb 7e                	jmp    183202 <k_sleep+0x132>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  183184:	8b 50 04             	mov    0x4(%eax),%edx
  183187:	89 56 04             	mov    %edx,0x4(%esi)
		node->next = insert_point;
  18318a:	89 47 10             	mov    %eax,0x10(%edi)
		insert_point->prev->next = node;
  18318d:	8b 50 04             	mov    0x4(%eax),%edx
  183190:	89 32                	mov    %esi,(%edx)
		insert_point->prev = node;
  183192:	89 70 04             	mov    %esi,0x4(%eax)
  183195:	eb 6b                	jmp    183202 <k_sleep+0x132>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
  183197:	29 ca                	sub    %ecx,%edx
  183199:	89 56 10             	mov    %edx,0x10(%esi)
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  18319c:	89 c2                	mov    %eax,%edx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  18319e:	85 c0                	test   %eax,%eax
  1831a0:	74 0c                	je     1831ae <k_sleep+0xde>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1831a2:	3b 05 30 01 28 00    	cmp    0x280130,%eax
  1831a8:	74 08                	je     1831b2 <k_sleep+0xe2>
  1831aa:	8b 08                	mov    (%eax),%ecx
  1831ac:	eb 09                	jmp    1831b7 <k_sleep+0xe7>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1831ae:	89 c1                	mov    %eax,%ecx
  1831b0:	eb 05                	jmp    1831b7 <k_sleep+0xe7>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1831b2:	b9 00 00 00 00       	mov    $0x0,%ecx
  1831b7:	85 c9                	test   %ecx,%ecx
  1831b9:	74 1e                	je     1831d9 <k_sleep+0x109>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1831bb:	85 d2                	test   %edx,%edx
  1831bd:	74 0c                	je     1831cb <k_sleep+0xfb>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1831bf:	3b 15 30 01 28 00    	cmp    0x280130,%edx
  1831c5:	74 0b                	je     1831d2 <k_sleep+0x102>
  1831c7:	8b 00                	mov    (%eax),%eax
  1831c9:	eb 13                	jmp    1831de <k_sleep+0x10e>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1831cb:	b8 00 00 00 00       	mov    $0x0,%eax
  1831d0:	eb 0c                	jmp    1831de <k_sleep+0x10e>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1831d2:	b8 00 00 00 00       	mov    $0x0,%eax
  1831d7:	eb 05                	jmp    1831de <k_sleep+0x10e>
  1831d9:	b8 00 00 00 00       	mov    $0x0,%eax
  1831de:	85 c0                	test   %eax,%eax
  1831e0:	0f 85 6d ff ff ff    	jne    183153 <k_sleep+0x83>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  1831e6:	c7 47 10 2c 01 28 00 	movl   $0x28012c,0x10(%edi)
	node->prev = list->tail;
  1831ed:	a1 30 01 28 00       	mov    0x280130,%eax
  1831f2:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  1831f5:	a1 30 01 28 00       	mov    0x280130,%eax
  1831fa:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  1831fc:	89 35 30 01 28 00    	mov    %esi,0x280130

	_Swap(key);
  183202:	89 d8                	mov    %ebx,%eax
  183204:	e8 ad f6 ff ff       	call   1828b6 <_Swap>
#endif
}
  183209:	83 c4 04             	add    $0x4,%esp
  18320c:	5b                   	pop    %ebx
  18320d:	5e                   	pop    %esi
  18320e:	5f                   	pop    %edi
  18320f:	c3                   	ret    

00183210 <k_current_get>:
}

k_tid_t k_current_get(void)
{
	return _current;
}
  183210:	a1 28 01 28 00       	mov    0x280128,%eax
  183215:	c3                   	ret    

00183216 <init_sem_module>:
{
	ARG_UNUSED(dev);

	struct k_sem *sem;

	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
  183216:	b8 a4 00 28 00       	mov    $0x2800a4,%eax
  18321b:	eb 1a                	jmp    183237 <init_sem_module+0x21>
  18321d:	9c                   	pushf  
  18321e:	fa                   	cli    
  18321f:	5a                   	pop    %edx
		SYS_TRACING_OBJ_INIT(k_sem, sem);
  183220:	8b 0d ac 02 28 00    	mov    0x2802ac,%ecx
  183226:	89 48 10             	mov    %ecx,0x10(%eax)
  183229:	a3 ac 02 28 00       	mov    %eax,0x2802ac
  18322e:	f6 c6 02             	test   $0x2,%dh
  183231:	74 01                	je     183234 <init_sem_module+0x1e>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183233:	fb                   	sti    
{
	ARG_UNUSED(dev);

	struct k_sem *sem;

	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
  183234:	83 c0 14             	add    $0x14,%eax
  183237:	3d a4 00 28 00       	cmp    $0x2800a4,%eax
  18323c:	72 df                	jb     18321d <init_sem_module+0x7>
		SYS_TRACING_OBJ_INIT(k_sem, sem);
	}
	return 0;
}
  18323e:	b8 00 00 00 00       	mov    $0x0,%eax
  183243:	c3                   	ret    

00183244 <handle_sem_group>:
	return 0;
}

/* cancel all but specified semaphore in list if part of a semphore group */
static void handle_sem_group(struct k_sem *sem, struct sem_thread *sem_thread)
{
  183244:	55                   	push   %ebp
  183245:	57                   	push   %edi
  183246:	56                   	push   %esi
  183247:	53                   	push   %ebx
  183248:	83 ec 04             	sub    $0x4,%esp
	struct sem_desc *desc = NULL;
	sys_dlist_t *list;
	sys_dnode_t *node;
	sys_dnode_t *next;

	list = (sys_dlist_t *)sem_thread->desc.thread->base.swap_data;
  18324b:	8b 52 30             	mov    0x30(%edx),%edx
  18324e:	8b 72 0c             	mov    0xc(%edx),%esi
  183251:	89 34 24             	mov    %esi,(%esp)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  183254:	8b 1e                	mov    (%esi),%ebx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  183256:	39 de                	cmp    %ebx,%esi
  183258:	75 09                	jne    183263 <handle_sem_group+0x1f>
  18325a:	bb 00 00 00 00       	mov    $0x0,%ebx
  18325f:	eb 02                	jmp    183263 <handle_sem_group+0x1f>

		if (desc->sem != sem) {
			sys_dlist_remove(node);
		}

		node = next;
  183261:	89 f3                	mov    %esi,%ebx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183263:	85 db                	test   %ebx,%ebx
  183265:	74 0c                	je     183273 <handle_sem_group+0x2f>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183267:	8b 34 24             	mov    (%esp),%esi
  18326a:	3b 5e 04             	cmp    0x4(%esi),%ebx
  18326d:	74 08                	je     183277 <handle_sem_group+0x33>
  18326f:	8b 33                	mov    (%ebx),%esi
  183271:	eb 09                	jmp    18327c <handle_sem_group+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183273:	89 de                	mov    %ebx,%esi
  183275:	eb 05                	jmp    18327c <handle_sem_group+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183277:	be 00 00 00 00       	mov    $0x0,%esi
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
  18327c:	8d 53 e8             	lea    -0x18(%ebx),%edx
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  18327f:	8b 7a 10             	mov    0x10(%edx),%edi
  183282:	83 ff ff             	cmp    $0xffffffff,%edi
  183285:	74 36                	je     1832bd <handle_sem_group+0x79>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  183287:	89 d1                	mov    %edx,%ecx
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
  183289:	8b 2d 30 01 28 00    	mov    0x280130,%ebp
  18328f:	39 ea                	cmp    %ebp,%edx
  183291:	74 14                	je     1832a7 <handle_sem_group+0x63>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183293:	85 d2                	test   %edx,%edx
  183295:	74 0d                	je     1832a4 <handle_sem_group+0x60>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183297:	39 ea                	cmp    %ebp,%edx
  183299:	74 04                	je     18329f <handle_sem_group+0x5b>
  18329b:	8b 0a                	mov    (%edx),%ecx
  18329d:	eb 05                	jmp    1832a4 <handle_sem_group+0x60>
  18329f:	b9 00 00 00 00       	mov    $0x0,%ecx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  1832a4:	01 79 10             	add    %edi,0x10(%ecx)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  1832a7:	8b 4a 04             	mov    0x4(%edx),%ecx
  1832aa:	8b 3a                	mov    (%edx),%edi
  1832ac:	89 39                	mov    %edi,(%ecx)
	node->next->prev = node->prev;
  1832ae:	8b 0a                	mov    (%edx),%ecx
  1832b0:	8b 7a 04             	mov    0x4(%edx),%edi
  1832b3:	89 79 04             	mov    %edi,0x4(%ecx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  1832b6:	c7 42 10 ff ff ff ff 	movl   $0xffffffff,0x10(%edx)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  1832bd:	8b 53 dc             	mov    -0x24(%ebx),%edx
  1832c0:	8b 4b d8             	mov    -0x28(%ebx),%ecx
  1832c3:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  1832c5:	8b 53 d8             	mov    -0x28(%ebx),%edx
  1832c8:	8b 4b dc             	mov    -0x24(%ebx),%ecx
  1832cb:	89 4a 04             	mov    %ecx,0x4(%edx)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  1832ce:	80 63 e1 fd          	andb   $0xfd,-0x1f(%ebx)
		 * where the timeout of the dummy thread might have expired.
		 */
		_abort_thread_timeout(dummy);
		_unpend_thread(dummy);

		if (desc->sem != sem) {
  1832d2:	39 43 0c             	cmp    %eax,0xc(%ebx)
  1832d5:	74 0f                	je     1832e6 <handle_sem_group+0xa2>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  1832d7:	8b 53 04             	mov    0x4(%ebx),%edx
  1832da:	8b 0b                	mov    (%ebx),%ecx
  1832dc:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  1832de:	8b 13                	mov    (%ebx),%edx
  1832e0:	8b 4b 04             	mov    0x4(%ebx),%ecx
  1832e3:	89 4a 04             	mov    %ecx,0x4(%edx)
			sys_dlist_remove(node);
		}

		node = next;
	} while (node != NULL);
  1832e6:	85 f6                	test   %esi,%esi
  1832e8:	0f 85 73 ff ff ff    	jne    183261 <handle_sem_group+0x1d>
	 * As this code may be executed several times by a semaphore group give
	 * operation, it is important to ensure that the attempt to ready the
	 * master thread is done only once.
	 */

	if (!_is_thread_ready(desc->thread)) {
  1832ee:	8b 43 08             	mov    0x8(%ebx),%eax
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  1832f1:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
  1832f5:	75 0d                	jne    183304 <handle_sem_group+0xc0>
  1832f7:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  1832fb:	75 0e                	jne    18330b <handle_sem_group+0xc7>
  1832fd:	b9 01 00 00 00       	mov    $0x1,%ecx
  183302:	eb 0c                	jmp    183310 <handle_sem_group+0xcc>
  183304:	b9 00 00 00 00       	mov    $0x0,%ecx
  183309:	eb 05                	jmp    183310 <handle_sem_group+0xcc>
  18330b:	b9 00 00 00 00       	mov    $0x0,%ecx
  183310:	85 c9                	test   %ecx,%ecx
  183312:	75 68                	jne    18337c <handle_sem_group+0x138>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
  183314:	8d 50 10             	lea    0x10(%eax),%edx
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  183317:	8b 7a 10             	mov    0x10(%edx),%edi
  18331a:	83 ff ff             	cmp    $0xffffffff,%edi
  18331d:	74 39                	je     183358 <handle_sem_group+0x114>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  18331f:	89 d6                	mov    %edx,%esi
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
  183321:	8b 2d 30 01 28 00    	mov    0x280130,%ebp
  183327:	39 ea                	cmp    %ebp,%edx
  183329:	74 15                	je     183340 <handle_sem_group+0xfc>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  18332b:	85 d2                	test   %edx,%edx
  18332d:	74 0e                	je     18333d <handle_sem_group+0xf9>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  18332f:	39 ea                	cmp    %ebp,%edx
  183331:	74 05                	je     183338 <handle_sem_group+0xf4>
  183333:	8b 70 10             	mov    0x10(%eax),%esi
  183336:	eb 05                	jmp    18333d <handle_sem_group+0xf9>
  183338:	be 00 00 00 00       	mov    $0x0,%esi
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  18333d:	01 7e 10             	add    %edi,0x10(%esi)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183340:	8b 72 04             	mov    0x4(%edx),%esi
  183343:	8b 78 10             	mov    0x10(%eax),%edi
  183346:	89 3e                	mov    %edi,(%esi)
	node->next->prev = node->prev;
  183348:	8b 40 10             	mov    0x10(%eax),%eax
  18334b:	8b 72 04             	mov    0x4(%edx),%esi
  18334e:	89 70 04             	mov    %esi,0x4(%eax)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  183351:	c7 42 10 ff ff ff ff 	movl   $0xffffffff,0x10(%edx)
		_abort_thread_timeout(desc->thread);
		_mark_thread_as_not_pending(desc->thread);
  183358:	8b 43 08             	mov    0x8(%ebx),%eax
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  18335b:	80 60 09 fd          	andb   $0xfd,0x9(%eax)
		if (_is_thread_ready(desc->thread)) {
  18335f:	8b 43 08             	mov    0x8(%ebx),%eax
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  183362:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
  183366:	75 0b                	jne    183373 <handle_sem_group+0x12f>
  183368:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  18336c:	75 05                	jne    183373 <handle_sem_group+0x12f>
  18336e:	b9 01 00 00 00       	mov    $0x1,%ecx
  183373:	85 c9                	test   %ecx,%ecx
  183375:	74 05                	je     18337c <handle_sem_group+0x138>
			_add_thread_to_ready_q(desc->thread);
  183377:	e8 1f fa ff ff       	call   182d9b <_add_thread_to_ready_q>
		}
	}
	_set_thread_return_value(desc->thread, 0);
  18337c:	8b 43 08             	mov    0x8(%ebx),%eax
static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	/* write into 'eax' slot created in _Swap() entry */

	*(unsigned int *)(thread->callee_saved.esp) = value;
  18337f:	8b 40 28             	mov    0x28(%eax),%eax
  183382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  183388:	83 c4 04             	add    $0x4,%esp
  18338b:	5b                   	pop    %ebx
  18338c:	5e                   	pop    %esi
  18338d:	5f                   	pop    %edi
  18338e:	5d                   	pop    %ebp
  18338f:	c3                   	ret    

00183390 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
  183390:	57                   	push   %edi
  183391:	56                   	push   %esi
  183392:	53                   	push   %ebx
#ifdef CONFIG_SEMAPHORE_GROUPS
	struct k_thread *thread = NULL;
  183393:	bb 00 00 00 00       	mov    $0x0,%ebx

again:
	thread = _find_first_thread_to_unpend(&sem->wait_q, thread);
  183398:	89 c1                	mov    %eax,%ecx
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
  18339a:	8b 15 b0 02 28 00    	mov    0x2802b0,%edx
  1833a0:	85 d2                	test   %edx,%edx
  1833a2:	74 3f                	je     1833e3 <do_sem_give+0x53>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
  1833a4:	85 db                	test   %ebx,%ebx
  1833a6:	74 10                	je     1833b8 <do_sem_give+0x28>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1833a8:	3b 58 04             	cmp    0x4(%eax),%ebx
  1833ab:	74 04                	je     1833b1 <do_sem_give+0x21>
  1833ad:	8b 1b                	mov    (%ebx),%ebx
  1833af:	eb 2c                	jmp    1833dd <do_sem_give+0x4d>
  1833b1:	bb 00 00 00 00       	mov    $0x0,%ebx
  1833b6:	eb 25                	jmp    1833dd <do_sem_give+0x4d>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  1833b8:	8b 18                	mov    (%eax),%ebx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  1833ba:	39 d8                	cmp    %ebx,%eax
  1833bc:	75 1f                	jne    1833dd <do_sem_give+0x4d>
  1833be:	bb 00 00 00 00       	mov    $0x0,%ebx
  1833c3:	eb 18                	jmp    1833dd <do_sem_give+0x4d>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
  1833c5:	83 7b 20 fe          	cmpl   $0xfffffffe,0x20(%ebx)
  1833c9:	75 23                	jne    1833ee <do_sem_give+0x5e>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1833cb:	85 db                	test   %ebx,%ebx
  1833cd:	74 0e                	je     1833dd <do_sem_give+0x4d>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1833cf:	3b 59 04             	cmp    0x4(%ecx),%ebx
  1833d2:	74 04                	je     1833d8 <do_sem_give+0x48>
  1833d4:	8b 1b                	mov    (%ebx),%ebx
  1833d6:	eb 05                	jmp    1833dd <do_sem_give+0x4d>
  1833d8:	bb 00 00 00 00       	mov    $0x0,%ebx
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
  1833dd:	85 db                	test   %ebx,%ebx
  1833df:	75 e4                	jne    1833c5 <do_sem_give+0x35>
  1833e1:	eb 0b                	jmp    1833ee <do_sem_give+0x5e>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  1833e3:	8b 18                	mov    (%eax),%ebx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  1833e5:	39 d8                	cmp    %ebx,%eax
  1833e7:	75 05                	jne    1833ee <do_sem_give+0x5e>
  1833e9:	bb 00 00 00 00       	mov    $0x0,%ebx
	if (!thread) {
  1833ee:	85 db                	test   %ebx,%ebx
  1833f0:	75 1b                	jne    18340d <do_sem_give+0x7d>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
  1833f2:	8b 48 08             	mov    0x8(%eax),%ecx
  1833f5:	3b 48 0c             	cmp    0xc(%eax),%ecx
  1833f8:	0f 95 c2             	setne  %dl
  1833fb:	0f b6 d2             	movzbl %dl,%edx
  1833fe:	01 ca                	add    %ecx,%edx
  183400:	89 50 08             	mov    %edx,0x8(%eax)

again:
	thread = _find_first_thread_to_unpend(&sem->wait_q, thread);
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
  183403:	b8 00 00 00 00       	mov    $0x0,%eax
  183408:	e9 e2 00 00 00       	jmp    1834ef <do_sem_give+0x15f>
	thread->base.thread_state &= ~states;
}

static inline int _is_thread_state_set(struct k_thread *thread, uint32_t state)
{
	return !!(thread->base.thread_state & state);
  18340d:	0f b6 53 09          	movzbl 0x9(%ebx),%edx
  183411:	83 e2 01             	and    $0x1,%edx
  183414:	89 d1                	mov    %edx,%ecx
	}

	if (unlikely(_is_thread_dummy(thread))) {
  183416:	85 d2                	test   %edx,%edx
  183418:	74 19                	je     183433 <do_sem_give+0xa3>
		/*
		 * The awakened thread is a dummy struct sem_thread and thus
		 * was involved in a semaphore group operation.
		 */
		struct sem_thread *sem_thread = (struct sem_thread *)thread;
		struct k_thread *real_thread = sem_thread->desc.thread;
  18341a:	8b 53 30             	mov    0x30(%ebx),%edx
		 * care of signalling the waiter that its operation has
		 * timedout. In that case, we look for the next thread not part
		 * of the same k_sem_group_take operation to give it the
		 * semaphore.
		 */
		if (_is_thread_timeout_expired(real_thread)) {
  18341d:	83 7a 20 fe          	cmpl   $0xfffffffe,0x20(%edx)
  183421:	0f 84 71 ff ff ff    	je     183398 <do_sem_give+0x8>
		/*
		 * Do not dequeue the dummy thread: that will be done when
		 * looping through the list of dummy waiters in
		 * handle_sem_group().
		 */
		handle_sem_group(sem, sem_thread);
  183427:	89 da                	mov    %ebx,%edx
  183429:	e8 16 fe ff ff       	call   183244 <handle_sem_group>
  18342e:	e9 82 00 00 00       	jmp    1834b5 <do_sem_give+0x125>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183433:	8b 43 04             	mov    0x4(%ebx),%eax
  183436:	8b 13                	mov    (%ebx),%edx
  183438:	89 10                	mov    %edx,(%eax)
	node->next->prev = node->prev;
  18343a:	8b 03                	mov    (%ebx),%eax
  18343c:	8b 53 04             	mov    0x4(%ebx),%edx
  18343f:	89 50 04             	mov    %edx,0x4(%eax)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  183442:	80 63 09 fd          	andb   $0xfd,0x9(%ebx)
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
  183446:	8d 43 10             	lea    0x10(%ebx),%eax
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  183449:	8b 70 10             	mov    0x10(%eax),%esi
  18344c:	83 fe ff             	cmp    $0xffffffff,%esi
  18344f:	74 36                	je     183487 <do_sem_give+0xf7>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  183451:	89 c2                	mov    %eax,%edx
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
  183453:	8b 3d 30 01 28 00    	mov    0x280130,%edi
  183459:	39 f8                	cmp    %edi,%eax
  18345b:	74 14                	je     183471 <do_sem_give+0xe1>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  18345d:	85 c0                	test   %eax,%eax
  18345f:	74 0d                	je     18346e <do_sem_give+0xde>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183461:	39 f8                	cmp    %edi,%eax
  183463:	74 04                	je     183469 <do_sem_give+0xd9>
  183465:	8b 10                	mov    (%eax),%edx
  183467:	eb 05                	jmp    18346e <do_sem_give+0xde>
  183469:	ba 00 00 00 00       	mov    $0x0,%edx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  18346e:	01 72 10             	add    %esi,0x10(%edx)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183471:	8b 50 04             	mov    0x4(%eax),%edx
  183474:	8b 30                	mov    (%eax),%esi
  183476:	89 32                	mov    %esi,(%edx)
	node->next->prev = node->prev;
  183478:	8b 10                	mov    (%eax),%edx
  18347a:	8b 70 04             	mov    0x4(%eax),%esi
  18347d:	89 72 04             	mov    %esi,0x4(%edx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  183480:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  183487:	8a 43 09             	mov    0x9(%ebx),%al
  18348a:	88 c2                	mov    %al,%dl
  18348c:	83 e2 fb             	and    $0xfffffffb,%edx
  18348f:	88 53 09             	mov    %dl,0x9(%ebx)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  183492:	a8 1b                	test   $0x1b,%al
  183494:	75 0b                	jne    1834a1 <do_sem_give+0x111>
  183496:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  18349a:	75 05                	jne    1834a1 <do_sem_give+0x111>
  18349c:	b9 01 00 00 00       	mov    $0x1,%ecx
		 thread, thread->base.prio, K_HIGHEST_THREAD_PRIO);

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  1834a1:	85 c9                	test   %ecx,%ecx
  1834a3:	74 07                	je     1834ac <do_sem_give+0x11c>
		_add_thread_to_ready_q(thread);
  1834a5:	89 d8                	mov    %ebx,%eax
  1834a7:	e8 ef f8 ff ff       	call   182d9b <_add_thread_to_ready_q>
  1834ac:	8b 43 28             	mov    0x28(%ebx),%eax
  1834af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
#endif

	return !_is_in_isr() && _must_switch_threads();
  1834b5:	83 3d 20 01 28 00 00 	cmpl   $0x0,0x280120
  1834bc:	75 2c                	jne    1834ea <do_sem_give+0x15a>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
  1834be:	a1 28 01 28 00       	mov    0x280128,%eax
  1834c3:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  1834c8:	77 10                	ja     1834da <do_sem_give+0x14a>
  1834ca:	e8 02 fb ff ff       	call   182fd1 <__must_switch_threads>
  1834cf:	85 c0                	test   %eax,%eax
  1834d1:	74 0c                	je     1834df <do_sem_give+0x14f>
  1834d3:	b8 01 00 00 00       	mov    $0x1,%eax
  1834d8:	eb 05                	jmp    1834df <do_sem_give+0x14f>
  1834da:	b8 00 00 00 00       	mov    $0x0,%eax
  1834df:	85 c0                	test   %eax,%eax
  1834e1:	74 0c                	je     1834ef <do_sem_give+0x15f>
  1834e3:	b8 01 00 00 00       	mov    $0x1,%eax
  1834e8:	eb 05                	jmp    1834ef <do_sem_give+0x15f>
  1834ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1834ef:	5b                   	pop    %ebx
  1834f0:	5e                   	pop    %esi
  1834f1:	5f                   	pop    %edi
  1834f2:	c3                   	ret    

001834f3 <k_sem_init>:
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
  1834f3:	89 50 08             	mov    %edx,0x8(%eax)
	sem->limit = limit;
  1834f6:	89 48 0c             	mov    %ecx,0xc(%eax)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  1834f9:	89 00                	mov    %eax,(%eax)
	list->tail = (sys_dnode_t *)list;
  1834fb:	89 40 04             	mov    %eax,0x4(%eax)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1834fe:	9c                   	pushf  
  1834ff:	fa                   	cli    
  183500:	5a                   	pop    %edx
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);

	SYS_TRACING_OBJ_INIT(k_sem, sem);
  183501:	8b 0d ac 02 28 00    	mov    0x2802ac,%ecx
  183507:	89 48 10             	mov    %ecx,0x10(%eax)
  18350a:	a3 ac 02 28 00       	mov    %eax,0x2802ac
  18350f:	f6 c6 02             	test   $0x2,%dh
  183512:	74 01                	je     183515 <k_sem_init+0x22>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183514:	fb                   	sti    
  183515:	c3                   	ret    

00183516 <k_sem_give>:
	irq_unlock(key);
}
#endif

void k_sem_give(struct k_sem *sem)
{
  183516:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183517:	9c                   	pushf  
  183518:	fa                   	cli    
  183519:	5b                   	pop    %ebx
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
  18351a:	e8 71 fe ff ff       	call   183390 <do_sem_give>
  18351f:	85 c0                	test   %eax,%eax
  183521:	74 09                	je     18352c <k_sem_give+0x16>
		_Swap(key);
  183523:	89 d8                	mov    %ebx,%eax
  183525:	e8 8c f3 ff ff       	call   1828b6 <_Swap>
  18352a:	eb 06                	jmp    183532 <k_sem_give+0x1c>
  18352c:	f6 c7 02             	test   $0x2,%bh
  18352f:	74 01                	je     183532 <k_sem_give+0x1c>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183531:	fb                   	sti    
	} else {
		irq_unlock(key);
	}
}
  183532:	5b                   	pop    %ebx
  183533:	c3                   	ret    

00183534 <k_sem_take>:

int k_sem_take(struct k_sem *sem, int32_t timeout)
{
  183534:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183535:	9c                   	pushf  
  183536:	fa                   	cli    
  183537:	5b                   	pop    %ebx
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
  183538:	8b 48 08             	mov    0x8(%eax),%ecx
  18353b:	85 c9                	test   %ecx,%ecx
  18353d:	74 11                	je     183550 <k_sem_take+0x1c>
		sem->count--;
  18353f:	49                   	dec    %ecx
  183540:	89 48 08             	mov    %ecx,0x8(%eax)
  183543:	f6 c7 02             	test   $0x2,%bh
  183546:	74 27                	je     18356f <k_sem_take+0x3b>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183548:	fb                   	sti    
		irq_unlock(key);
		return 0;
  183549:	b8 00 00 00 00       	mov    $0x0,%eax
  18354e:	eb 2b                	jmp    18357b <k_sem_take+0x47>
	}

	if (timeout == K_NO_WAIT) {
  183550:	85 d2                	test   %edx,%edx
  183552:	75 0d                	jne    183561 <k_sem_take+0x2d>
  183554:	f6 c7 02             	test   $0x2,%bh
  183557:	74 1d                	je     183576 <k_sem_take+0x42>
  183559:	fb                   	sti    
		irq_unlock(key);
		return -EBUSY;
  18355a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  18355f:	eb 1a                	jmp    18357b <k_sem_take+0x47>
	}

	_pend_current_thread(&sem->wait_q, timeout);
  183561:	e8 4a fa ff ff       	call   182fb0 <_pend_current_thread>

	return _Swap(key);
  183566:	89 d8                	mov    %ebx,%eax
  183568:	e8 49 f3 ff ff       	call   1828b6 <_Swap>
  18356d:	eb 0c                	jmp    18357b <k_sem_take+0x47>
	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
		sem->count--;
		irq_unlock(key);
		return 0;
  18356f:	b8 00 00 00 00       	mov    $0x0,%eax
  183574:	eb 05                	jmp    18357b <k_sem_take+0x47>
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
  183576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
  18357b:	5b                   	pop    %ebx
  18357c:	c3                   	ret    

0018357d <handle_time_slicing>:
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(int32_t ticks)
{
	if (_time_slice_duration == 0) {
  18357d:	8b 15 44 02 28 00    	mov    0x280244,%edx
  183583:	85 d2                	test   %edx,%edx
  183585:	74 50                	je     1835d7 <handle_time_slicing+0x5a>
		return;
	}

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
  183587:	8b 0d 28 01 28 00    	mov    0x280128,%ecx
  18358d:	0f be 49 0a          	movsbl 0xa(%ecx),%ecx
  183591:	39 0d 40 02 28 00    	cmp    %ecx,0x280240
  183597:	7f 3e                	jg     1835d7 <handle_time_slicing+0x5a>
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(int32_t ticks)
{
  183599:	57                   	push   %edi
  18359a:	56                   	push   %esi
  18359b:	53                   	push   %ebx
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (uint64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (uint64_t)ticks * _ms_per_tick;
  18359c:	89 c1                	mov    %eax,%ecx
  18359e:	89 c6                	mov    %eax,%esi
  1835a0:	01 c6                	add    %eax,%esi
  1835a2:	c1 e1 03             	shl    $0x3,%ecx
  1835a5:	01 f1                	add    %esi,%ecx

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
  1835a7:	03 0d b4 02 28 00    	add    0x2802b4,%ecx
  1835ad:	89 0d b4 02 28 00    	mov    %ecx,0x2802b4
	if (_time_slice_elapsed >= _time_slice_duration) {
  1835b3:	39 ca                	cmp    %ecx,%edx
  1835b5:	7f 1d                	jg     1835d4 <handle_time_slicing+0x57>

		unsigned int key;

		_time_slice_elapsed = 0;
  1835b7:	c7 05 b4 02 28 00 00 	movl   $0x0,0x2802b4
  1835be:	00 00 00 

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1835c1:	9c                   	pushf  
  1835c2:	fa                   	cli    
  1835c3:	5b                   	pop    %ebx

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
  1835c4:	a1 28 01 28 00       	mov    0x280128,%eax
  1835c9:	e8 75 fa ff ff       	call   183043 <_move_thread_to_end_of_prio_q>
  1835ce:	f6 c7 02             	test   $0x2,%bh
  1835d1:	74 01                	je     1835d4 <handle_time_slicing+0x57>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1835d3:	fb                   	sti    
		irq_unlock(key);
	}
}
  1835d4:	5b                   	pop    %ebx
  1835d5:	5e                   	pop    %esi
  1835d6:	5f                   	pop    %edi
  1835d7:	c3                   	ret    

001835d8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(int32_t ticks)
{
  1835d8:	57                   	push   %edi
  1835d9:	56                   	push   %esi
  1835da:	53                   	push   %ebx
  1835db:	83 ec 08             	sub    $0x8,%esp
  1835de:	89 c6                	mov    %eax,%esi

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1835e0:	9c                   	pushf  
  1835e1:	fa                   	cli    
  1835e2:	58                   	pop    %eax

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
  1835e3:	89 f3                	mov    %esi,%ebx
  1835e5:	c1 fb 1f             	sar    $0x1f,%ebx
  1835e8:	01 35 b8 02 28 00    	add    %esi,0x2802b8
  1835ee:	11 1d bc 02 28 00    	adc    %ebx,0x2802bc
  1835f4:	f6 c4 02             	test   $0x2,%ah
  1835f7:	74 01                	je     1835fa <_nano_sys_clock_tick_announce+0x22>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1835f9:	fb                   	sti    
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  1835fa:	89 24 24             	mov    %esp,(%esp)
	list->tail = (sys_dnode_t *)list;
  1835fd:	89 64 24 04          	mov    %esp,0x4(%esp)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183601:	9c                   	pushf  
  183602:	fa                   	cli    
  183603:	59                   	pop    %ecx
  183604:	89 ca                	mov    %ecx,%edx
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  183606:	a1 2c 01 28 00       	mov    0x28012c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  18360b:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  183610:	75 05                	jne    183617 <_nano_sys_clock_tick_announce+0x3f>
  183612:	b8 00 00 00 00       	mov    $0x0,%eax
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
  183617:	85 c0                	test   %eax,%eax
  183619:	75 0f                	jne    18362a <_nano_sys_clock_tick_announce+0x52>
  18361b:	f6 c5 02             	test   $0x2,%ch
  18361e:	0f 84 52 01 00 00    	je     183776 <_nano_sys_clock_tick_announce+0x19e>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183624:	fb                   	sti    
  183625:	e9 4c 01 00 00       	jmp    183776 <_nano_sys_clock_tick_announce+0x19e>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
  18362a:	29 70 10             	sub    %esi,0x10(%eax)
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
  18362d:	c7 05 b0 02 28 00 01 	movl   $0x1,0x2802b0
  183634:	00 00 00 
  183637:	eb 41                	jmp    18367a <_nano_sys_clock_tick_announce+0xa2>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183639:	8b 48 04             	mov    0x4(%eax),%ecx
  18363c:	8b 18                	mov    (%eax),%ebx
  18363e:	89 19                	mov    %ebx,(%ecx)
	node->next->prev = node->prev;
  183640:	8b 08                	mov    (%eax),%ecx
  183642:	8b 58 04             	mov    0x4(%eax),%ebx
  183645:	89 59 04             	mov    %ebx,0x4(%ecx)
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
  183648:	8b 0c 24             	mov    (%esp),%ecx
  18364b:	89 08                	mov    %ecx,(%eax)
	node->prev = list;
  18364d:	89 60 04             	mov    %esp,0x4(%eax)

	list->head->prev = node;
  183650:	8b 0c 24             	mov    (%esp),%ecx
  183653:	89 41 04             	mov    %eax,0x4(%ecx)
	list->head = node;
  183656:	89 04 24             	mov    %eax,(%esp)
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
  183659:	c7 40 10 fe ff ff ff 	movl   $0xfffffffe,0x10(%eax)
  183660:	f6 c6 02             	test   $0x2,%dh
  183663:	74 01                	je     183666 <_nano_sys_clock_tick_announce+0x8e>
  183665:	fb                   	sti    

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183666:	9c                   	pushf  
  183667:	fa                   	cli    
  183668:	5a                   	pop    %edx
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  183669:	a1 2c 01 28 00       	mov    0x28012c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  18366e:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  183673:	75 05                	jne    18367a <_nano_sys_clock_tick_announce+0xa2>
  183675:	b8 00 00 00 00       	mov    $0x0,%eax
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
  18367a:	85 c0                	test   %eax,%eax
  18367c:	74 06                	je     183684 <_nano_sys_clock_tick_announce+0xac>
  18367e:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  183682:	74 b5                	je     183639 <_nano_sys_clock_tick_announce+0x61>
  183684:	f6 c6 02             	test   $0x2,%dh
  183687:	74 01                	je     18368a <_nano_sys_clock_tick_announce+0xb2>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183689:	fb                   	sti    
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  18368a:	8b 14 24             	mov    (%esp),%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  18368d:	39 e2                	cmp    %esp,%edx
  18368f:	75 05                	jne    183696 <_nano_sys_clock_tick_announce+0xbe>
  183691:	ba 00 00 00 00       	mov    $0x0,%edx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183696:	85 d2                	test   %edx,%edx
  183698:	74 0d                	je     1836a7 <_nano_sys_clock_tick_announce+0xcf>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  18369a:	3b 54 24 04          	cmp    0x4(%esp),%edx
  18369e:	74 0e                	je     1836ae <_nano_sys_clock_tick_announce+0xd6>
  1836a0:	8b 1a                	mov    (%edx),%ebx
  1836a2:	e9 bd 00 00 00       	jmp    183764 <_nano_sys_clock_tick_announce+0x18c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1836a7:	89 d3                	mov    %edx,%ebx
  1836a9:	e9 b6 00 00 00       	jmp    183764 <_nano_sys_clock_tick_announce+0x18c>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1836ae:	bb 00 00 00 00       	mov    $0x0,%ebx
  1836b3:	e9 ac 00 00 00       	jmp    183764 <_nano_sys_clock_tick_announce+0x18c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  1836b8:	8b 42 04             	mov    0x4(%edx),%eax
  1836bb:	8b 0a                	mov    (%edx),%ecx
  1836bd:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
  1836bf:	8b 02                	mov    (%edx),%eax
  1836c1:	8b 4a 04             	mov    0x4(%edx),%ecx
  1836c4:	89 48 04             	mov    %ecx,0x4(%eax)
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
  1836c7:	8b 42 08             	mov    0x8(%edx),%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1836ca:	9c                   	pushf  
  1836cb:	fa                   	cli    
  1836cc:	5f                   	pop    %edi
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
  1836cd:	c7 42 10 ff ff ff ff 	movl   $0xffffffff,0x10(%edx)

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
  1836d4:	85 c0                	test   %eax,%eax
  1836d6:	74 5d                	je     183735 <_nano_sys_clock_tick_announce+0x15d>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
  1836d8:	83 7a 0c 00          	cmpl   $0x0,0xc(%edx)
  1836dc:	74 1a                	je     1836f8 <_nano_sys_clock_tick_announce+0x120>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  1836de:	8b 50 04             	mov    0x4(%eax),%edx
  1836e1:	8b 08                	mov    (%eax),%ecx
  1836e3:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  1836e5:	8b 10                	mov    (%eax),%edx
  1836e7:	8b 48 04             	mov    0x4(%eax),%ecx
  1836ea:	89 4a 04             	mov    %ecx,0x4(%edx)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  1836ed:	80 60 09 fd          	andb   $0xfd,0x9(%eax)
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
  1836f1:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  1836f8:	8a 50 09             	mov    0x9(%eax),%dl
  1836fb:	88 d1                	mov    %dl,%cl
  1836fd:	83 e1 fb             	and    $0xfffffffb,%ecx
  183700:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  183703:	f6 c2 1b             	test   $0x1b,%dl
  183706:	75 0d                	jne    183715 <_nano_sys_clock_tick_announce+0x13d>
  183708:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  18370c:	75 0e                	jne    18371c <_nano_sys_clock_tick_announce+0x144>
  18370e:	ba 01 00 00 00       	mov    $0x1,%edx
  183713:	eb 0c                	jmp    183721 <_nano_sys_clock_tick_announce+0x149>
  183715:	ba 00 00 00 00       	mov    $0x0,%edx
  18371a:	eb 05                	jmp    183721 <_nano_sys_clock_tick_announce+0x149>
  18371c:	ba 00 00 00 00       	mov    $0x0,%edx
		 thread, thread->base.prio, K_HIGHEST_THREAD_PRIO);

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  183721:	85 d2                	test   %edx,%edx
  183723:	74 05                	je     18372a <_nano_sys_clock_tick_announce+0x152>
		_add_thread_to_ready_q(thread);
  183725:	e8 71 f6 ff ff       	call   182d9b <_add_thread_to_ready_q>
  18372a:	f7 c7 00 02 00 00    	test   $0x200,%edi
  183730:	74 17                	je     183749 <_nano_sys_clock_tick_announce+0x171>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183732:	fb                   	sti    
  183733:	eb 14                	jmp    183749 <_nano_sys_clock_tick_announce+0x171>
  183735:	f7 c7 00 02 00 00    	test   $0x200,%edi
  18373b:	74 01                	je     18373e <_nano_sys_clock_tick_announce+0x166>
  18373d:	fb                   	sti    
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
  18373e:	8b 4a 14             	mov    0x14(%edx),%ecx
  183741:	85 c9                	test   %ecx,%ecx
  183743:	74 04                	je     183749 <_nano_sys_clock_tick_announce+0x171>
			timeout->func(timeout);
  183745:	89 d0                	mov    %edx,%eax
  183747:	ff d1                	call   *%ecx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183749:	85 db                	test   %ebx,%ebx
  18374b:	74 0a                	je     183757 <_nano_sys_clock_tick_announce+0x17f>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  18374d:	3b 5c 24 04          	cmp    0x4(%esp),%ebx
  183751:	74 08                	je     18375b <_nano_sys_clock_tick_announce+0x183>
  183753:	8b 03                	mov    (%ebx),%eax
  183755:	eb 09                	jmp    183760 <_nano_sys_clock_tick_announce+0x188>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183757:	89 d8                	mov    %ebx,%eax
  183759:	eb 05                	jmp    183760 <_nano_sys_clock_tick_announce+0x188>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  18375b:	b8 00 00 00 00       	mov    $0x0,%eax

static inline void _handle_expired_timeouts(sys_dlist_t *expired)
{
	sys_dnode_t *timeout, *next;

	SYS_DLIST_FOR_EACH_NODE_SAFE(expired, timeout, next) {
  183760:	89 da                	mov    %ebx,%edx
  183762:	89 c3                	mov    %eax,%ebx
  183764:	85 d2                	test   %edx,%edx
  183766:	0f 85 4c ff ff ff    	jne    1836b8 <_nano_sys_clock_tick_announce+0xe0>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
  18376c:	c7 05 b0 02 28 00 00 	movl   $0x0,0x2802b0
  183773:	00 00 00 
	irq_unlock(key);

	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
  183776:	89 f0                	mov    %esi,%eax
  183778:	e8 00 fe ff ff       	call   18357d <handle_time_slicing>
}
  18377d:	83 c4 08             	add    $0x8,%esp
  183780:	5b                   	pop    %ebx
  183781:	5e                   	pop    %esi
  183782:	5f                   	pop    %edi
  183783:	c3                   	ret    

00183784 <_k_thread_single_start>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  183784:	8a 50 09             	mov    0x9(%eax),%dl
  183787:	88 d1                	mov    %dl,%cl
  183789:	83 e1 fb             	and    $0xfffffffb,%ecx
  18378c:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  18378f:	f6 c2 1b             	test   $0x1b,%dl
  183792:	75 0d                	jne    1837a1 <_k_thread_single_start+0x1d>
  183794:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  183798:	75 0e                	jne    1837a8 <_k_thread_single_start+0x24>
  18379a:	ba 01 00 00 00       	mov    $0x1,%edx
  18379f:	eb 0c                	jmp    1837ad <_k_thread_single_start+0x29>
  1837a1:	ba 00 00 00 00       	mov    $0x0,%edx
  1837a6:	eb 05                	jmp    1837ad <_k_thread_single_start+0x29>
  1837a8:	ba 00 00 00 00       	mov    $0x0,%edx

void _k_thread_single_start(struct k_thread *thread)
{
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  1837ad:	85 d2                	test   %edx,%edx
  1837af:	74 05                	je     1837b6 <_k_thread_single_start+0x32>
		_add_thread_to_ready_q(thread);
  1837b1:	e8 e5 f5 ff ff       	call   182d9b <_add_thread_to_ready_q>
  1837b6:	c3                   	ret    

001837b7 <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
  1837b7:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1837b8:	9c                   	pushf  
  1837b9:	fa                   	cli    
  1837ba:	5b                   	pop    %ebx
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  1837bb:	8a 50 09             	mov    0x9(%eax),%dl
  1837be:	88 d1                	mov    %dl,%cl
  1837c0:	83 e1 fb             	and    $0xfffffffb,%ecx
  1837c3:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  1837c6:	f6 c2 1b             	test   $0x1b,%dl
  1837c9:	75 0d                	jne    1837d8 <start_thread+0x21>
  1837cb:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  1837cf:	75 0e                	jne    1837df <start_thread+0x28>
  1837d1:	ba 01 00 00 00       	mov    $0x1,%edx
  1837d6:	eb 0c                	jmp    1837e4 <start_thread+0x2d>
  1837d8:	ba 00 00 00 00       	mov    $0x0,%edx
  1837dd:	eb 05                	jmp    1837e4 <start_thread+0x2d>
  1837df:	ba 00 00 00 00       	mov    $0x0,%edx
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  1837e4:	85 d2                	test   %edx,%edx
  1837e6:	74 33                	je     18381b <start_thread+0x64>
		_add_thread_to_ready_q(thread);
  1837e8:	e8 ae f5 ff ff       	call   182d9b <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
  1837ed:	a1 28 01 28 00       	mov    0x280128,%eax
  1837f2:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  1837f7:	77 10                	ja     183809 <start_thread+0x52>
  1837f9:	e8 d3 f7 ff ff       	call   182fd1 <__must_switch_threads>
  1837fe:	85 c0                	test   %eax,%eax
  183800:	74 0c                	je     18380e <start_thread+0x57>
  183802:	b8 01 00 00 00       	mov    $0x1,%eax
  183807:	eb 05                	jmp    18380e <start_thread+0x57>
  183809:	b8 00 00 00 00       	mov    $0x0,%eax
		if (_must_switch_threads()) {
  18380e:	85 c0                	test   %eax,%eax
  183810:	74 09                	je     18381b <start_thread+0x64>
			_Swap(key);
  183812:	89 d8                	mov    %ebx,%eax
  183814:	e8 9d f0 ff ff       	call   1828b6 <_Swap>
			return;
  183819:	eb 06                	jmp    183821 <start_thread+0x6a>
  18381b:	f6 c7 02             	test   $0x2,%bh
  18381e:	74 01                	je     183821 <start_thread+0x6a>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183820:	fb                   	sti    
		}
	}

	irq_unlock(key);
}
  183821:	5b                   	pop    %ebx
  183822:	c3                   	ret    

00183823 <schedule_new_thread>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, int32_t delay)
{
  183823:	57                   	push   %edi
  183824:	56                   	push   %esi
  183825:	53                   	push   %ebx
  183826:	89 c6                	mov    %eax,%esi
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
  183828:	85 d2                	test   %edx,%edx
  18382a:	75 0a                	jne    183836 <schedule_new_thread+0x13>
		start_thread(thread);
  18382c:	e8 86 ff ff ff       	call   1837b7 <start_thread>
  183831:	e9 18 01 00 00       	jmp    18394e <schedule_new_thread+0x12b>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern int32_t _ms_to_ticks(int32_t ms);
#else
static ALWAYS_INLINE int32_t _ms_to_ticks(int32_t ms)
{
	return (int32_t)ceiling_fraction((uint32_t)ms, _ms_per_tick);
  183836:	83 c2 09             	add    $0x9,%edx
  183839:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
  18383e:	89 d0                	mov    %edx,%eax
  183840:	f7 e1                	mul    %ecx
  183842:	c1 ea 03             	shr    $0x3,%edx
	} else {
		int32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
  183845:	42                   	inc    %edx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183846:	9c                   	pushf  
  183847:	fa                   	cli    
  183848:	5f                   	pop    %edi

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  183849:	8d 46 10             	lea    0x10(%esi),%eax
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
  18384c:	89 50 10             	mov    %edx,0x10(%eax)
	timeout->thread = thread;
  18384f:	89 70 08             	mov    %esi,0x8(%eax)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  183852:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  183859:	8b 15 2c 01 28 00    	mov    0x28012c,%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  18385f:	81 fa 2c 01 28 00    	cmp    $0x28012c,%edx
  183865:	75 07                	jne    18386e <schedule_new_thread+0x4b>
  183867:	b9 00 00 00 00       	mov    $0x0,%ecx
  18386c:	eb 02                	jmp    183870 <schedule_new_thread+0x4d>
  18386e:	89 d1                	mov    %edx,%ecx
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  183870:	85 c9                	test   %ecx,%ecx
  183872:	74 16                	je     18388a <schedule_new_thread+0x67>
  183874:	81 fa 2c 01 28 00    	cmp    $0x28012c,%edx
  18387a:	0f 85 a0 00 00 00    	jne    183920 <schedule_new_thread+0xfd>
  183880:	ba 00 00 00 00       	mov    $0x0,%edx
  183885:	e9 96 00 00 00       	jmp    183920 <schedule_new_thread+0xfd>
  18388a:	ba 00 00 00 00       	mov    $0x0,%edx
  18388f:	e9 8c 00 00 00       	jmp    183920 <schedule_new_thread+0xfd>
		if (*delta <= in_q->delta_ticks_from_prev) {
  183894:	8b 48 10             	mov    0x10(%eax),%ecx
  183897:	8b 5a 10             	mov    0x10(%edx),%ebx
  18389a:	39 d9                	cmp    %ebx,%ecx
  18389c:	7f 3b                	jg     1838d9 <schedule_new_thread+0xb6>
			in_q->delta_ticks_from_prev -= *delta;
  18389e:	29 cb                	sub    %ecx,%ebx
  1838a0:	89 5a 10             	mov    %ebx,0x10(%edx)
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  1838a3:	85 d2                	test   %edx,%edx
  1838a5:	75 1f                	jne    1838c6 <schedule_new_thread+0xa3>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  1838a7:	c7 46 10 2c 01 28 00 	movl   $0x28012c,0x10(%esi)
	node->prev = list->tail;
  1838ae:	8b 15 30 01 28 00    	mov    0x280130,%edx
  1838b4:	89 50 04             	mov    %edx,0x4(%eax)

	list->tail->next = node;
  1838b7:	8b 15 30 01 28 00    	mov    0x280130,%edx
  1838bd:	89 02                	mov    %eax,(%edx)
	list->tail = node;
  1838bf:	a3 30 01 28 00       	mov    %eax,0x280130
  1838c4:	eb 7f                	jmp    183945 <schedule_new_thread+0x122>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  1838c6:	8b 4a 04             	mov    0x4(%edx),%ecx
  1838c9:	89 48 04             	mov    %ecx,0x4(%eax)
		node->next = insert_point;
  1838cc:	89 56 10             	mov    %edx,0x10(%esi)
		insert_point->prev->next = node;
  1838cf:	8b 4a 04             	mov    0x4(%edx),%ecx
  1838d2:	89 01                	mov    %eax,(%ecx)
		insert_point->prev = node;
  1838d4:	89 42 04             	mov    %eax,0x4(%edx)
  1838d7:	eb 6c                	jmp    183945 <schedule_new_thread+0x122>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
  1838d9:	29 d9                	sub    %ebx,%ecx
  1838db:	89 48 10             	mov    %ecx,0x10(%eax)
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  1838de:	89 d1                	mov    %edx,%ecx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1838e0:	85 d2                	test   %edx,%edx
  1838e2:	74 0c                	je     1838f0 <schedule_new_thread+0xcd>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1838e4:	3b 15 30 01 28 00    	cmp    0x280130,%edx
  1838ea:	74 08                	je     1838f4 <schedule_new_thread+0xd1>
  1838ec:	8b 1a                	mov    (%edx),%ebx
  1838ee:	eb 09                	jmp    1838f9 <schedule_new_thread+0xd6>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1838f0:	89 d3                	mov    %edx,%ebx
  1838f2:	eb 05                	jmp    1838f9 <schedule_new_thread+0xd6>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  1838f4:	bb 00 00 00 00       	mov    $0x0,%ebx
  1838f9:	85 db                	test   %ebx,%ebx
  1838fb:	74 1e                	je     18391b <schedule_new_thread+0xf8>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  1838fd:	85 c9                	test   %ecx,%ecx
  1838ff:	74 0c                	je     18390d <schedule_new_thread+0xea>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183901:	3b 0d 30 01 28 00    	cmp    0x280130,%ecx
  183907:	74 0b                	je     183914 <schedule_new_thread+0xf1>
  183909:	8b 12                	mov    (%edx),%edx
  18390b:	eb 13                	jmp    183920 <schedule_new_thread+0xfd>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  18390d:	ba 00 00 00 00       	mov    $0x0,%edx
  183912:	eb 0c                	jmp    183920 <schedule_new_thread+0xfd>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183914:	ba 00 00 00 00       	mov    $0x0,%edx
  183919:	eb 05                	jmp    183920 <schedule_new_thread+0xfd>
  18391b:	ba 00 00 00 00       	mov    $0x0,%edx
  183920:	85 d2                	test   %edx,%edx
  183922:	0f 85 6c ff ff ff    	jne    183894 <schedule_new_thread+0x71>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  183928:	c7 46 10 2c 01 28 00 	movl   $0x28012c,0x10(%esi)
	node->prev = list->tail;
  18392f:	8b 15 30 01 28 00    	mov    0x280130,%edx
  183935:	89 50 04             	mov    %edx,0x4(%eax)

	list->tail->next = node;
  183938:	8b 15 30 01 28 00    	mov    0x280130,%edx
  18393e:	89 02                	mov    %eax,(%edx)
	list->tail = node;
  183940:	a3 30 01 28 00       	mov    %eax,0x280130
  183945:	f7 c7 00 02 00 00    	test   $0x200,%edi
  18394b:	74 01                	je     18394e <schedule_new_thread+0x12b>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  18394d:	fb                   	sti    
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
  18394e:	5b                   	pop    %ebx
  18394f:	5e                   	pop    %esi
  183950:	5f                   	pop    %edi
  183951:	c3                   	ret    

00183952 <k_is_in_isr>:
}
#endif

int k_is_in_isr(void)
{
	return _is_in_isr();
  183952:	83 3d 20 01 28 00 00 	cmpl   $0x0,0x280120
  183959:	0f 95 c0             	setne  %al
  18395c:	0f b6 c0             	movzbl %al,%eax
}
  18395f:	c3                   	ret    

00183960 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
  183960:	a1 28 01 28 00       	mov    0x280128,%eax
  183965:	8a 40 08             	mov    0x8(%eax),%al
  183968:	83 e0 01             	and    $0x1,%eax
}
  18396b:	c3                   	ret    

0018396c <_thread_monitor_exit>:
#if defined(CONFIG_THREAD_MONITOR)
/*
 * Remove a thread from the kernel's list of active threads.
 */
void _thread_monitor_exit(struct k_thread *thread)
{
  18396c:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  18396d:	9c                   	pushf  
  18396e:	fa                   	cli    
  18396f:	5b                   	pop    %ebx
	unsigned int key = irq_lock();

	if (thread == _kernel.threads) {
  183970:	8b 0d 3c 02 28 00    	mov    0x28023c,%ecx
  183976:	39 c1                	cmp    %eax,%ecx
  183978:	75 0c                	jne    183986 <_thread_monitor_exit+0x1a>
		_kernel.threads = _kernel.threads->next_thread;
  18397a:	8b 41 38             	mov    0x38(%ecx),%eax
  18397d:	a3 3c 02 28 00       	mov    %eax,0x28023c
  183982:	eb 0f                	jmp    183993 <_thread_monitor_exit+0x27>
	} else {
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while (thread != prev_thread->next_thread) {
			prev_thread = prev_thread->next_thread;
  183984:	89 d1                	mov    %edx,%ecx
		_kernel.threads = _kernel.threads->next_thread;
	} else {
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while (thread != prev_thread->next_thread) {
  183986:	8b 51 38             	mov    0x38(%ecx),%edx
  183989:	39 d0                	cmp    %edx,%eax
  18398b:	75 f7                	jne    183984 <_thread_monitor_exit+0x18>
			prev_thread = prev_thread->next_thread;
		}
		prev_thread->next_thread = thread->next_thread;
  18398d:	8b 40 38             	mov    0x38(%eax),%eax
  183990:	89 41 38             	mov    %eax,0x38(%ecx)
  183993:	f6 c7 02             	test   $0x2,%bh
  183996:	74 01                	je     183999 <_thread_monitor_exit+0x2d>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183998:	fb                   	sti    
	}

	irq_unlock(key);
}
  183999:	5b                   	pop    %ebx
  18399a:	c3                   	ret    

0018399b <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
  18399b:	53                   	push   %ebx
  18399c:	89 c3                	mov    %eax,%ebx
  18399e:	89 d0                	mov    %edx,%eax
  1839a0:	89 ca                	mov    %ecx,%edx
	entry(p1, p2, p3);
  1839a2:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  1839a6:	ff d3                	call   *%ebx

#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
  1839a8:	e8 b3 ff ff ff       	call   183960 <_is_thread_essential>
  1839ad:	85 c0                	test   %eax,%eax
  1839af:	74 0f                	je     1839c0 <_thread_entry+0x25>
		_NanoFatalErrorHandler(_NANO_ERR_INVALID_TASK_EXIT,
  1839b1:	ba 40 4c 18 00       	mov    $0x184c40,%edx
  1839b6:	b8 03 00 00 00       	mov    $0x3,%eax
  1839bb:	e8 cb ef ff ff       	call   18298b <_NanoFatalErrorHandler>
				       &_default_esf);
	}

	k_thread_abort(_current);
  1839c0:	a1 28 01 28 00       	mov    0x280128,%eax
  1839c5:	e8 e0 01 00 00       	call   183baa <k_thread_abort>

001839ca <_k_thread_group_op>:
{
	return !!(thread_data->init_groups & groups);
}

void _k_thread_group_op(uint32_t groups, void (*func)(struct k_thread *))
{
  1839ca:	55                   	push   %ebp
  1839cb:	57                   	push   %edi
  1839cc:	56                   	push   %esi
  1839cd:	53                   	push   %ebx
  1839ce:	89 c6                	mov    %eax,%esi
  1839d0:	89 d5                	mov    %edx,%ebp
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
  1839d2:	8b 15 28 01 28 00    	mov    0x280128,%edx
  1839d8:	8a 42 0b             	mov    0xb(%edx),%al
  1839db:	48                   	dec    %eax
  1839dc:	88 42 0b             	mov    %al,0xb(%edx)

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
  1839df:	bb a4 00 28 00       	mov    $0x2800a4,%ebx
  1839e4:	eb 18                	jmp    1839fe <_k_thread_group_op+0x34>
		if (is_in_any_group(thread_data, groups)) {
  1839e6:	85 73 28             	test   %esi,0x28(%ebx)
  1839e9:	74 10                	je     1839fb <_k_thread_group_op+0x31>

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1839eb:	9c                   	pushf  
  1839ec:	fa                   	cli    
  1839ed:	5f                   	pop    %edi
			key = irq_lock();
			func(thread_data->thread);
  1839ee:	8b 03                	mov    (%ebx),%eax
  1839f0:	ff d5                	call   *%ebp
  1839f2:	f7 c7 00 02 00 00    	test   $0x200,%edi
  1839f8:	74 01                	je     1839fb <_k_thread_group_op+0x31>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1839fa:	fb                   	sti    

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
  1839fb:	83 c3 2c             	add    $0x2c,%ebx
  1839fe:	81 fb a4 00 28 00    	cmp    $0x2800a4,%ebx
  183a04:	72 e0                	jb     1839e6 <_k_thread_group_op+0x1c>

	/*
	 * If the current thread is still in a ready state, then let the
	 * "unlock scheduler" code determine if any rescheduling is needed.
	 */
	if (_is_thread_ready(_current)) {
  183a06:	a1 28 01 28 00       	mov    0x280128,%eax
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  183a0b:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
  183a0f:	75 0d                	jne    183a1e <_k_thread_group_op+0x54>
  183a11:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  183a15:	75 0e                	jne    183a25 <_k_thread_group_op+0x5b>
  183a17:	b8 01 00 00 00       	mov    $0x1,%eax
  183a1c:	eb 0c                	jmp    183a2a <_k_thread_group_op+0x60>
  183a1e:	b8 00 00 00 00       	mov    $0x0,%eax
  183a23:	eb 05                	jmp    183a2a <_k_thread_group_op+0x60>
  183a25:	b8 00 00 00 00       	mov    $0x0,%eax
  183a2a:	85 c0                	test   %eax,%eax
  183a2c:	74 07                	je     183a35 <_k_thread_group_op+0x6b>
		k_sched_unlock();
  183a2e:	e8 fa f5 ff ff       	call   18302d <k_sched_unlock>
		return;
  183a33:	eb 15                	jmp    183a4a <_k_thread_group_op+0x80>

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183a35:	9c                   	pushf  
  183a36:	fa                   	cli    
  183a37:	58                   	pop    %eax
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 0, "");

	compiler_barrier();

	++_current->base.sched_locked;
  183a38:	8b 0d 28 01 28 00    	mov    0x280128,%ecx
  183a3e:	8a 51 0b             	mov    0xb(%ecx),%dl
  183a41:	42                   	inc    %edx
  183a42:	88 51 0b             	mov    %dl,0xb(%ecx)
	}

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
  183a45:	e8 6c ee ff ff       	call   1828b6 <_Swap>
}
  183a4a:	5b                   	pop    %ebx
  183a4b:	5e                   	pop    %esi
  183a4c:	5f                   	pop    %edi
  183a4d:	5d                   	pop    %ebp
  183a4e:	c3                   	ret    

00183a4f <_k_thread_single_abort>:

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
  183a4f:	56                   	push   %esi
  183a50:	53                   	push   %ebx
  183a51:	89 c3                	mov    %eax,%ebx
	if (thread->fn_abort != NULL) {
  183a53:	8b 40 30             	mov    0x30(%eax),%eax
  183a56:	85 c0                	test   %eax,%eax
  183a58:	74 02                	je     183a5c <_k_thread_single_abort+0xd>
		thread->fn_abort();
  183a5a:	ff d0                	call   *%eax
	return !(thread->base.thread_state & _THREAD_PRESTART);
}

static inline int _is_thread_prevented_from_running(struct k_thread *thread)
{
	uint8_t state = thread->base.thread_state;
  183a5c:	8a 43 09             	mov    0x9(%ebx),%al
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  183a5f:	a8 1f                	test   $0x1f,%al
  183a61:	75 0d                	jne    183a70 <_k_thread_single_abort+0x21>
  183a63:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  183a67:	75 0e                	jne    183a77 <_k_thread_single_abort+0x28>
  183a69:	ba 01 00 00 00       	mov    $0x1,%edx
  183a6e:	eb 0c                	jmp    183a7c <_k_thread_single_abort+0x2d>
  183a70:	ba 00 00 00 00       	mov    $0x0,%edx
  183a75:	eb 05                	jmp    183a7c <_k_thread_single_abort+0x2d>
  183a77:	ba 00 00 00 00       	mov    $0x0,%edx
	}

	if (_is_thread_ready(thread)) {
  183a7c:	85 d2                	test   %edx,%edx
  183a7e:	74 09                	je     183a89 <_k_thread_single_abort+0x3a>
		_remove_thread_from_ready_q(thread);
  183a80:	89 d8                	mov    %ebx,%eax
  183a82:	e8 62 f3 ff ff       	call   182de9 <_remove_thread_from_ready_q>
  183a87:	eb 61                	jmp    183aea <_k_thread_single_abort+0x9b>
	} else {
		if (_is_thread_pending(thread)) {
  183a89:	a8 02                	test   $0x2,%al
  183a8b:	74 13                	je     183aa0 <_k_thread_single_abort+0x51>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183a8d:	8b 43 04             	mov    0x4(%ebx),%eax
  183a90:	8b 13                	mov    (%ebx),%edx
  183a92:	89 10                	mov    %edx,(%eax)
	node->next->prev = node->prev;
  183a94:	8b 03                	mov    (%ebx),%eax
  183a96:	8b 53 04             	mov    0x4(%ebx),%edx
  183a99:	89 50 04             	mov    %edx,0x4(%eax)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  183a9c:	80 63 09 fd          	andb   $0xfd,0x9(%ebx)
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
  183aa0:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  183aa4:	74 44                	je     183aea <_k_thread_single_abort+0x9b>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
  183aa6:	8d 43 10             	lea    0x10(%ebx),%eax
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  183aa9:	8b 48 10             	mov    0x10(%eax),%ecx
  183aac:	83 f9 ff             	cmp    $0xffffffff,%ecx
  183aaf:	74 39                	je     183aea <_k_thread_single_abort+0x9b>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  183ab1:	89 c2                	mov    %eax,%edx
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
  183ab3:	8b 35 30 01 28 00    	mov    0x280130,%esi
  183ab9:	39 f0                	cmp    %esi,%eax
  183abb:	74 15                	je     183ad2 <_k_thread_single_abort+0x83>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  183abd:	85 c0                	test   %eax,%eax
  183abf:	74 0e                	je     183acf <_k_thread_single_abort+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  183ac1:	39 f0                	cmp    %esi,%eax
  183ac3:	74 05                	je     183aca <_k_thread_single_abort+0x7b>
  183ac5:	8b 53 10             	mov    0x10(%ebx),%edx
  183ac8:	eb 05                	jmp    183acf <_k_thread_single_abort+0x80>
  183aca:	ba 00 00 00 00       	mov    $0x0,%edx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  183acf:	01 4a 10             	add    %ecx,0x10(%edx)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  183ad2:	8b 50 04             	mov    0x4(%eax),%edx
  183ad5:	8b 4b 10             	mov    0x10(%ebx),%ecx
  183ad8:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  183ada:	8b 53 10             	mov    0x10(%ebx),%edx
  183add:	8b 48 04             	mov    0x4(%eax),%ecx
  183ae0:	89 4a 04             	mov    %ecx,0x4(%edx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  183ae3:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
  183aea:	80 4b 09 08          	orb    $0x8,0x9(%ebx)
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
  183aee:	5b                   	pop    %ebx
  183aef:	5e                   	pop    %esi
  183af0:	c3                   	ret    

00183af1 <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
  183af1:	56                   	push   %esi
  183af2:	53                   	push   %ebx
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
  183af3:	bb a4 00 28 00       	mov    $0x2800a4,%ebx
  183af8:	eb 27                	jmp    183b21 <_init_static_threads+0x30>
		_task_group_adjust(thread_data);
		_new_thread(
  183afa:	8b 4b 08             	mov    0x8(%ebx),%ecx
  183afd:	8b 53 04             	mov    0x4(%ebx),%edx
  183b00:	ff 73 1c             	pushl  0x1c(%ebx)
  183b03:	ff 73 18             	pushl  0x18(%ebx)
  183b06:	ff 73 14             	pushl  0x14(%ebx)
  183b09:	ff 73 10             	pushl  0x10(%ebx)
  183b0c:	ff 73 0c             	pushl  0xc(%ebx)
  183b0f:	8b 03                	mov    (%ebx),%eax
  183b11:	e8 2f ee ff ff       	call   182945 <_new_thread>
  183b16:	83 c4 14             	add    $0x14,%esp
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->thread->init_data = thread_data;
  183b19:	8b 03                	mov    (%ebx),%eax
  183b1b:	89 58 2c             	mov    %ebx,0x2c(%eax)
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
  183b1e:	83 c3 2c             	add    $0x2c,%ebx
  183b21:	81 fb a4 00 28 00    	cmp    $0x2800a4,%ebx
  183b27:	72 d1                	jb     183afa <_init_static_threads+0x9>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
  183b29:	8b 15 28 01 28 00    	mov    0x280128,%edx
  183b2f:	8a 42 0b             	mov    0xb(%edx),%al
  183b32:	48                   	dec    %eax
  183b33:	88 42 0b             	mov    %al,0xb(%edx)
	}

	_sched_lock();
#if defined(CONFIG_LEGACY_KERNEL)
	/* Start all (legacy) threads that are part of the EXE task group */
	_k_thread_group_op(K_TASK_GROUP_EXE, _k_thread_single_start);
  183b36:	ba 84 37 18 00       	mov    $0x183784,%edx
  183b3b:	b8 01 00 00 00       	mov    $0x1,%eax
  183b40:	e8 85 fe ff ff       	call   1839ca <_k_thread_group_op>
  183b45:	9c                   	pushf  
  183b46:	fa                   	cli    
  183b47:	5e                   	pop    %esi
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
  183b48:	bb a4 00 28 00       	mov    $0x2800a4,%ebx
  183b4d:	eb 12                	jmp    183b61 <_init_static_threads+0x70>
		if (thread_data->init_delay != K_FOREVER) {
  183b4f:	8b 53 20             	mov    0x20(%ebx),%edx
  183b52:	83 fa ff             	cmp    $0xffffffff,%edx
  183b55:	74 07                	je     183b5e <_init_static_threads+0x6d>
			schedule_new_thread(thread_data->thread,
  183b57:	8b 03                	mov    (%ebx),%eax
  183b59:	e8 c5 fc ff ff       	call   183823 <schedule_new_thread>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
  183b5e:	83 c3 2c             	add    $0x2c,%ebx
  183b61:	81 fb a4 00 28 00    	cmp    $0x2800a4,%ebx
  183b67:	72 e6                	jb     183b4f <_init_static_threads+0x5e>
  183b69:	f7 c6 00 02 00 00    	test   $0x200,%esi
  183b6f:	74 01                	je     183b72 <_init_static_threads+0x81>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  183b71:	fb                   	sti    
			schedule_new_thread(thread_data->thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
  183b72:	e8 b6 f4 ff ff       	call   18302d <k_sched_unlock>
}
  183b77:	5b                   	pop    %ebx
  183b78:	5e                   	pop    %esi
  183b79:	c3                   	ret    

00183b7a <_init_thread_base>:
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
  183b7a:	53                   	push   %ebx
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
  183b7b:	8a 5c 24 08          	mov    0x8(%esp),%bl
  183b7f:	88 58 08             	mov    %bl,0x8(%eax)
	thread_base->thread_state = (uint8_t)initial_state;
  183b82:	88 48 09             	mov    %cl,0x9(%eax)

	thread_base->prio = priority;
  183b85:	88 50 0a             	mov    %dl,0xa(%eax)

	thread_base->sched_locked = 0;
  183b88:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
  183b8c:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%eax)

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
  183b93:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
  183b9a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
  183ba1:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
  183ba8:	5b                   	pop    %ebx
  183ba9:	c3                   	ret    

00183baa <k_thread_abort>:

extern void _k_thread_single_abort(struct k_thread *thread);

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void k_thread_abort(k_tid_t thread)
{
  183baa:	56                   	push   %esi
  183bab:	53                   	push   %ebx
  183bac:	89 c3                	mov    %eax,%ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  183bae:	9c                   	pushf  
  183baf:	fa                   	cli    
  183bb0:	5e                   	pop    %esi
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
  183bb1:	e8 99 fe ff ff       	call   183a4f <_k_thread_single_abort>
	_thread_monitor_exit(thread);
  183bb6:	89 d8                	mov    %ebx,%eax
  183bb8:	e8 af fd ff ff       	call   18396c <_thread_monitor_exit>

	if (_current == thread) {
  183bbd:	3b 1d 28 01 28 00    	cmp    0x280128,%ebx
  183bc3:	75 07                	jne    183bcc <k_thread_abort+0x22>
		_Swap(key);
  183bc5:	89 f0                	mov    %esi,%eax
  183bc7:	e8 ea ec ff ff       	call   1828b6 <_Swap>
		CODE_UNREACHABLE;
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
  183bcc:	89 f0                	mov    %esi,%eax
  183bce:	e8 21 f4 ff ff       	call   182ff4 <_reschedule_threads>
}
  183bd3:	5b                   	pop    %ebx
  183bd4:	5e                   	pop    %esi
  183bd5:	c3                   	ret    

00183bd6 <_sys_power_save_idle>:
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
  183bd6:	e8 8a eb ff ff       	call   182765 <k_cpu_idle>
  183bdb:	c3                   	ret    

00183bdc <idle>:
  183bdc:	9c                   	pushf  
  183bdd:	fa                   	cli    
  183bde:	58                   	pop    %eax
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  183bdf:	a1 2c 01 28 00       	mov    0x28012c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  183be4:	3d 2c 01 28 00       	cmp    $0x28012c,%eax
  183be9:	75 05                	jne    183bf0 <idle+0x14>
  183beb:	b8 00 00 00 00       	mov    $0x0,%eax
static inline int32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
  183bf0:	85 c0                	test   %eax,%eax
  183bf2:	74 05                	je     183bf9 <idle+0x1d>
  183bf4:	8b 40 10             	mov    0x10(%eax),%eax
  183bf7:	eb 05                	jmp    183bfe <idle+0x22>
  183bf9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	__idle_tsc = _tsc_read();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
  183bfe:	e8 d3 ff ff ff       	call   183bd6 <_sys_power_save_idle>

		IDLE_YIELD_IF_COOP();
	}
  183c03:	eb d7                	jmp    183bdc <idle>

00183c05 <_OffsetAbsSyms>:
  183c05:	c3                   	ret    

00183c06 <__addsf3>:
  183c06:	55                   	push   %ebp
  183c07:	89 d1                	mov    %edx,%ecx
  183c09:	c1 e9 17             	shr    $0x17,%ecx
  183c0c:	57                   	push   %edi
  183c0d:	89 c7                	mov    %eax,%edi
  183c0f:	56                   	push   %esi
  183c10:	53                   	push   %ebx
  183c11:	89 c3                	mov    %eax,%ebx
  183c13:	c1 e8 17             	shr    $0x17,%eax
  183c16:	89 d6                	mov    %edx,%esi
  183c18:	0f b6 c0             	movzbl %al,%eax
  183c1b:	81 e3 ff ff 7f 00    	and    $0x7fffff,%ebx
  183c21:	81 e6 ff ff 7f 00    	and    $0x7fffff,%esi
  183c27:	0f b6 e9             	movzbl %cl,%ebp
  183c2a:	c1 ef 1f             	shr    $0x1f,%edi
  183c2d:	89 c1                	mov    %eax,%ecx
  183c2f:	c1 ea 1f             	shr    $0x1f,%edx
  183c32:	29 e9                	sub    %ebp,%ecx
  183c34:	c1 e3 03             	shl    $0x3,%ebx
  183c37:	c1 e6 03             	shl    $0x3,%esi
  183c3a:	39 d7                	cmp    %edx,%edi
  183c3c:	0f 85 6c 01 00 00    	jne    183dae <__addsf3+0x1a8>
  183c42:	83 f9 00             	cmp    $0x0,%ecx
  183c45:	7e 3c                	jle    183c83 <__addsf3+0x7d>
  183c47:	85 ed                	test   %ebp,%ebp
  183c49:	75 22                	jne    183c6d <__addsf3+0x67>
  183c4b:	85 f6                	test   %esi,%esi
  183c4d:	0f 84 60 03 00 00    	je     183fb3 <__addsf3+0x3ad>
  183c53:	49                   	dec    %ecx
  183c54:	75 07                	jne    183c5d <__addsf3+0x57>
  183c56:	01 f3                	add    %esi,%ebx
  183c58:	e9 25 01 00 00       	jmp    183d82 <__addsf3+0x17c>
  183c5d:	3d ff 00 00 00       	cmp    $0xff,%eax
  183c62:	0f 85 f6 00 00 00    	jne    183d5e <__addsf3+0x158>
  183c68:	e9 46 03 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183c6d:	81 ce 00 00 00 04    	or     $0x4000000,%esi
  183c73:	3d ff 00 00 00       	cmp    $0xff,%eax
  183c78:	0f 85 e0 00 00 00    	jne    183d5e <__addsf3+0x158>
  183c7e:	e9 30 03 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183c83:	74 5d                	je     183ce2 <__addsf3+0xdc>
  183c85:	85 c0                	test   %eax,%eax
  183c87:	75 1a                	jne    183ca3 <__addsf3+0x9d>
  183c89:	85 db                	test   %ebx,%ebx
  183c8b:	0f 84 d8 02 00 00    	je     183f69 <__addsf3+0x363>
  183c91:	83 f1 ff             	xor    $0xffffffff,%ecx
  183c94:	74 43                	je     183cd9 <__addsf3+0xd3>
  183c96:	81 fd ff 00 00 00    	cmp    $0xff,%ebp
  183c9c:	75 19                	jne    183cb7 <__addsf3+0xb1>
  183c9e:	e9 d0 02 00 00       	jmp    183f73 <__addsf3+0x36d>
  183ca3:	81 fd ff 00 00 00    	cmp    $0xff,%ebp
  183ca9:	0f 84 c4 02 00 00    	je     183f73 <__addsf3+0x36d>
  183caf:	f7 d9                	neg    %ecx
  183cb1:	81 cb 00 00 00 04    	or     $0x4000000,%ebx
  183cb7:	83 f9 1b             	cmp    $0x1b,%ecx
  183cba:	0f 8f 33 03 00 00    	jg     183ff3 <__addsf3+0x3ed>
  183cc0:	b8 20 00 00 00       	mov    $0x20,%eax
  183cc5:	89 da                	mov    %ebx,%edx
  183cc7:	29 c8                	sub    %ecx,%eax
  183cc9:	d3 ea                	shr    %cl,%edx
  183ccb:	89 c1                	mov    %eax,%ecx
  183ccd:	d3 e3                	shl    %cl,%ebx
  183ccf:	85 db                	test   %ebx,%ebx
  183cd1:	0f 95 c3             	setne  %bl
  183cd4:	0f b6 db             	movzbl %bl,%ebx
  183cd7:	09 d3                	or     %edx,%ebx
  183cd9:	01 f3                	add    %esi,%ebx
  183cdb:	89 e8                	mov    %ebp,%eax
  183cdd:	e9 a0 00 00 00       	jmp    183d82 <__addsf3+0x17c>
  183ce2:	8d 50 01             	lea    0x1(%eax),%edx
  183ce5:	0f b6 ca             	movzbl %dl,%ecx
  183ce8:	49                   	dec    %ecx
  183ce9:	7f 5c                	jg     183d47 <__addsf3+0x141>
  183ceb:	85 c0                	test   %eax,%eax
  183ced:	75 2e                	jne    183d1d <__addsf3+0x117>
  183cef:	85 db                	test   %ebx,%ebx
  183cf1:	0f 84 78 02 00 00    	je     183f6f <__addsf3+0x369>
  183cf7:	85 f6                	test   %esi,%esi
  183cf9:	0f 84 b4 02 00 00    	je     183fb3 <__addsf3+0x3ad>
  183cff:	01 f3                	add    %esi,%ebx
  183d01:	f7 c3 00 00 00 04    	test   $0x4000000,%ebx
  183d07:	0f 84 a6 02 00 00    	je     183fb3 <__addsf3+0x3ad>
  183d0d:	81 e3 ff ff ff fb    	and    $0xfbffffff,%ebx
  183d13:	b8 01 00 00 00       	mov    $0x1,%eax
  183d18:	e9 96 02 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183d1d:	85 db                	test   %ebx,%ebx
  183d1f:	0f 84 4e 02 00 00    	je     183f73 <__addsf3+0x36d>
  183d25:	b8 ff 00 00 00       	mov    $0xff,%eax
  183d2a:	85 f6                	test   %esi,%esi
  183d2c:	0f 84 81 02 00 00    	je     183fb3 <__addsf3+0x3ad>
  183d32:	c1 ee 03             	shr    $0x3,%esi
  183d35:	c1 eb 03             	shr    $0x3,%ebx
  183d38:	39 f3                	cmp    %esi,%ebx
  183d3a:	0f 83 94 01 00 00    	jae    183ed4 <__addsf3+0x2ce>
  183d40:	89 f3                	mov    %esi,%ebx
  183d42:	e9 8d 01 00 00       	jmp    183ed4 <__addsf3+0x2ce>
  183d47:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  183d4d:	0f 84 27 02 00 00    	je     183f7a <__addsf3+0x374>
  183d53:	01 f3                	add    %esi,%ebx
  183d55:	89 d0                	mov    %edx,%eax
  183d57:	d1 eb                	shr    %ebx
  183d59:	e9 55 02 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183d5e:	ba 01 00 00 00       	mov    $0x1,%edx
  183d63:	83 f9 1b             	cmp    $0x1b,%ecx
  183d66:	7f 18                	jg     183d80 <__addsf3+0x17a>
  183d68:	bd 20 00 00 00       	mov    $0x20,%ebp
  183d6d:	89 f2                	mov    %esi,%edx
  183d6f:	29 cd                	sub    %ecx,%ebp
  183d71:	d3 ea                	shr    %cl,%edx
  183d73:	89 e9                	mov    %ebp,%ecx
  183d75:	d3 e6                	shl    %cl,%esi
  183d77:	31 c9                	xor    %ecx,%ecx
  183d79:	85 f6                	test   %esi,%esi
  183d7b:	0f 95 c1             	setne  %cl
  183d7e:	09 ca                	or     %ecx,%edx
  183d80:	01 d3                	add    %edx,%ebx
  183d82:	f7 c3 00 00 00 04    	test   $0x4000000,%ebx
  183d88:	0f 84 25 02 00 00    	je     183fb3 <__addsf3+0x3ad>
  183d8e:	40                   	inc    %eax
  183d8f:	3d ff 00 00 00       	cmp    $0xff,%eax
  183d94:	0f 84 e5 01 00 00    	je     183f7f <__addsf3+0x379>
  183d9a:	89 da                	mov    %ebx,%edx
  183d9c:	81 e3 ff ff ff fb    	and    $0xfbffffff,%ebx
  183da2:	d1 eb                	shr    %ebx
  183da4:	83 e2 01             	and    $0x1,%edx
  183da7:	09 d3                	or     %edx,%ebx
  183da9:	e9 05 02 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183dae:	83 f9 00             	cmp    $0x0,%ecx
  183db1:	7e 3c                	jle    183def <__addsf3+0x1e9>
  183db3:	85 ed                	test   %ebp,%ebp
  183db5:	75 22                	jne    183dd9 <__addsf3+0x1d3>
  183db7:	85 f6                	test   %esi,%esi
  183db9:	0f 84 f4 01 00 00    	je     183fb3 <__addsf3+0x3ad>
  183dbf:	49                   	dec    %ecx
  183dc0:	75 07                	jne    183dc9 <__addsf3+0x1c3>
  183dc2:	29 f3                	sub    %esi,%ebx
  183dc4:	e9 52 01 00 00       	jmp    183f1b <__addsf3+0x315>
  183dc9:	3d ff 00 00 00       	cmp    $0xff,%eax
  183dce:	0f 85 23 01 00 00    	jne    183ef7 <__addsf3+0x2f1>
  183dd4:	e9 da 01 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183dd9:	81 ce 00 00 00 04    	or     $0x4000000,%esi
  183ddf:	3d ff 00 00 00       	cmp    $0xff,%eax
  183de4:	0f 85 0d 01 00 00    	jne    183ef7 <__addsf3+0x2f1>
  183dea:	e9 c4 01 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183def:	74 65                	je     183e56 <__addsf3+0x250>
  183df1:	85 c0                	test   %eax,%eax
  183df3:	75 1e                	jne    183e13 <__addsf3+0x20d>
  183df5:	85 db                	test   %ebx,%ebx
  183df7:	0f 84 86 01 00 00    	je     183f83 <__addsf3+0x37d>
  183dfd:	83 f1 ff             	xor    $0xffffffff,%ecx
  183e00:	75 04                	jne    183e06 <__addsf3+0x200>
  183e02:	29 de                	sub    %ebx,%esi
  183e04:	eb 45                	jmp    183e4b <__addsf3+0x245>
  183e06:	81 fd ff 00 00 00    	cmp    $0xff,%ebp
  183e0c:	75 19                	jne    183e27 <__addsf3+0x221>
  183e0e:	e9 79 01 00 00       	jmp    183f8c <__addsf3+0x386>
  183e13:	81 fd ff 00 00 00    	cmp    $0xff,%ebp
  183e19:	0f 84 6d 01 00 00    	je     183f8c <__addsf3+0x386>
  183e1f:	f7 d9                	neg    %ecx
  183e21:	81 cb 00 00 00 04    	or     $0x4000000,%ebx
  183e27:	b8 01 00 00 00       	mov    $0x1,%eax
  183e2c:	83 f9 1b             	cmp    $0x1b,%ecx
  183e2f:	7f 18                	jg     183e49 <__addsf3+0x243>
  183e31:	b8 20 00 00 00       	mov    $0x20,%eax
  183e36:	89 df                	mov    %ebx,%edi
  183e38:	29 c8                	sub    %ecx,%eax
  183e3a:	d3 ef                	shr    %cl,%edi
  183e3c:	89 c1                	mov    %eax,%ecx
  183e3e:	31 c0                	xor    %eax,%eax
  183e40:	d3 e3                	shl    %cl,%ebx
  183e42:	85 db                	test   %ebx,%ebx
  183e44:	0f 95 c0             	setne  %al
  183e47:	09 f8                	or     %edi,%eax
  183e49:	29 c6                	sub    %eax,%esi
  183e4b:	89 f3                	mov    %esi,%ebx
  183e4d:	89 e8                	mov    %ebp,%eax
  183e4f:	89 d7                	mov    %edx,%edi
  183e51:	e9 c5 00 00 00       	jmp    183f1b <__addsf3+0x315>
  183e56:	8d 48 01             	lea    0x1(%eax),%ecx
  183e59:	0f b6 c9             	movzbl %cl,%ecx
  183e5c:	49                   	dec    %ecx
  183e5d:	7f 7a                	jg     183ed9 <__addsf3+0x2d3>
  183e5f:	85 c0                	test   %eax,%eax
  183e61:	75 3c                	jne    183e9f <__addsf3+0x299>
  183e63:	85 db                	test   %ebx,%ebx
  183e65:	75 0a                	jne    183e71 <__addsf3+0x26b>
  183e67:	85 f6                	test   %esi,%esi
  183e69:	0f 84 29 01 00 00    	je     183f98 <__addsf3+0x392>
  183e6f:	eb 16                	jmp    183e87 <__addsf3+0x281>
  183e71:	85 f6                	test   %esi,%esi
  183e73:	0f 84 3a 01 00 00    	je     183fb3 <__addsf3+0x3ad>
  183e79:	89 d9                	mov    %ebx,%ecx
  183e7b:	29 f1                	sub    %esi,%ecx
  183e7d:	f7 c1 00 00 00 04    	test   $0x4000000,%ecx
  183e83:	74 0b                	je     183e90 <__addsf3+0x28a>
  183e85:	29 de                	sub    %ebx,%esi
  183e87:	89 f3                	mov    %esi,%ebx
  183e89:	89 d7                	mov    %edx,%edi
  183e8b:	e9 23 01 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183e90:	89 cb                	mov    %ecx,%ebx
  183e92:	85 c9                	test   %ecx,%ecx
  183e94:	0f 85 19 01 00 00    	jne    183fb3 <__addsf3+0x3ad>
  183e9a:	e9 12 01 00 00       	jmp    183fb1 <__addsf3+0x3ab>
  183e9f:	85 db                	test   %ebx,%ebx
  183ea1:	75 16                	jne    183eb9 <__addsf3+0x2b3>
  183ea3:	85 f6                	test   %esi,%esi
  183ea5:	0f 84 f1 00 00 00    	je     183f9c <__addsf3+0x396>
  183eab:	89 f3                	mov    %esi,%ebx
  183ead:	89 d7                	mov    %edx,%edi
  183eaf:	b8 ff 00 00 00       	mov    $0xff,%eax
  183eb4:	e9 fa 00 00 00       	jmp    183fb3 <__addsf3+0x3ad>
  183eb9:	b8 ff 00 00 00       	mov    $0xff,%eax
  183ebe:	85 f6                	test   %esi,%esi
  183ec0:	0f 84 ed 00 00 00    	je     183fb3 <__addsf3+0x3ad>
  183ec6:	c1 eb 03             	shr    $0x3,%ebx
  183ec9:	c1 ee 03             	shr    $0x3,%esi
  183ecc:	39 f3                	cmp    %esi,%ebx
  183ece:	73 04                	jae    183ed4 <__addsf3+0x2ce>
  183ed0:	89 f3                	mov    %esi,%ebx
  183ed2:	89 d7                	mov    %edx,%edi
  183ed4:	c1 e3 03             	shl    $0x3,%ebx
  183ed7:	eb d6                	jmp    183eaf <__addsf3+0x2a9>
  183ed9:	89 dd                	mov    %ebx,%ebp
  183edb:	29 f5                	sub    %esi,%ebp
  183edd:	f7 c5 00 00 00 04    	test   $0x4000000,%ebp
  183ee3:	74 08                	je     183eed <__addsf3+0x2e7>
  183ee5:	29 de                	sub    %ebx,%esi
  183ee7:	89 d7                	mov    %edx,%edi
  183ee9:	89 f5                	mov    %esi,%ebp
  183eeb:	eb 42                	jmp    183f2f <__addsf3+0x329>
  183eed:	85 ed                	test   %ebp,%ebp
  183eef:	0f 84 b8 00 00 00    	je     183fad <__addsf3+0x3a7>
  183ef5:	eb 38                	jmp    183f2f <__addsf3+0x329>
  183ef7:	ba 01 00 00 00       	mov    $0x1,%edx
  183efc:	83 f9 1b             	cmp    $0x1b,%ecx
  183eff:	7f 18                	jg     183f19 <__addsf3+0x313>
  183f01:	bd 20 00 00 00       	mov    $0x20,%ebp
  183f06:	89 f2                	mov    %esi,%edx
  183f08:	29 cd                	sub    %ecx,%ebp
  183f0a:	d3 ea                	shr    %cl,%edx
  183f0c:	89 e9                	mov    %ebp,%ecx
  183f0e:	d3 e6                	shl    %cl,%esi
  183f10:	31 c9                	xor    %ecx,%ecx
  183f12:	85 f6                	test   %esi,%esi
  183f14:	0f 95 c1             	setne  %cl
  183f17:	09 ca                	or     %ecx,%edx
  183f19:	29 d3                	sub    %edx,%ebx
  183f1b:	f7 c3 00 00 00 04    	test   $0x4000000,%ebx
  183f21:	0f 84 8c 00 00 00    	je     183fb3 <__addsf3+0x3ad>
  183f27:	81 e3 ff ff ff 03    	and    $0x3ffffff,%ebx
  183f2d:	89 dd                	mov    %ebx,%ebp
  183f2f:	0f bd cd             	bsr    %ebp,%ecx
  183f32:	83 f1 1f             	xor    $0x1f,%ecx
  183f35:	83 e9 05             	sub    $0x5,%ecx
  183f38:	d3 e5                	shl    %cl,%ebp
  183f3a:	39 c8                	cmp    %ecx,%eax
  183f3c:	7f 1f                	jg     183f5d <__addsf3+0x357>
  183f3e:	29 c1                	sub    %eax,%ecx
  183f40:	ba 20 00 00 00       	mov    $0x20,%edx
  183f45:	41                   	inc    %ecx
  183f46:	89 e8                	mov    %ebp,%eax
  183f48:	29 ca                	sub    %ecx,%edx
  183f4a:	31 db                	xor    %ebx,%ebx
  183f4c:	d3 e8                	shr    %cl,%eax
  183f4e:	89 d1                	mov    %edx,%ecx
  183f50:	d3 e5                	shl    %cl,%ebp
  183f52:	85 ed                	test   %ebp,%ebp
  183f54:	0f 95 c3             	setne  %bl
  183f57:	09 c3                	or     %eax,%ebx
  183f59:	31 c0                	xor    %eax,%eax
  183f5b:	eb 56                	jmp    183fb3 <__addsf3+0x3ad>
  183f5d:	89 eb                	mov    %ebp,%ebx
  183f5f:	29 c8                	sub    %ecx,%eax
  183f61:	81 e3 ff ff ff fb    	and    $0xfbffffff,%ebx
  183f67:	eb 4a                	jmp    183fb3 <__addsf3+0x3ad>
  183f69:	89 f3                	mov    %esi,%ebx
  183f6b:	89 e8                	mov    %ebp,%eax
  183f6d:	eb 44                	jmp    183fb3 <__addsf3+0x3ad>
  183f6f:	89 f3                	mov    %esi,%ebx
  183f71:	eb 40                	jmp    183fb3 <__addsf3+0x3ad>
  183f73:	89 f3                	mov    %esi,%ebx
  183f75:	e9 35 ff ff ff       	jmp    183eaf <__addsf3+0x2a9>
  183f7a:	b8 ff 00 00 00       	mov    $0xff,%eax
  183f7f:	31 db                	xor    %ebx,%ebx
  183f81:	eb 30                	jmp    183fb3 <__addsf3+0x3ad>
  183f83:	89 f3                	mov    %esi,%ebx
  183f85:	89 e8                	mov    %ebp,%eax
  183f87:	e9 fd fe ff ff       	jmp    183e89 <__addsf3+0x283>
  183f8c:	89 f3                	mov    %esi,%ebx
  183f8e:	b8 ff 00 00 00       	mov    $0xff,%eax
  183f93:	e9 f1 fe ff ff       	jmp    183e89 <__addsf3+0x283>
  183f98:	89 c3                	mov    %eax,%ebx
  183f9a:	eb 15                	jmp    183fb1 <__addsf3+0x3ab>
  183f9c:	bb 00 00 00 02       	mov    $0x2000000,%ebx
  183fa1:	b8 ff 00 00 00       	mov    $0xff,%eax
  183fa6:	bf 01 00 00 00       	mov    $0x1,%edi
  183fab:	eb 06                	jmp    183fb3 <__addsf3+0x3ad>
  183fad:	31 db                	xor    %ebx,%ebx
  183faf:	31 c0                	xor    %eax,%eax
  183fb1:	31 ff                	xor    %edi,%edi
  183fb3:	f6 c3 07             	test   $0x7,%bl
  183fb6:	74 0d                	je     183fc5 <__addsf3+0x3bf>
  183fb8:	89 da                	mov    %ebx,%edx
  183fba:	83 e2 0f             	and    $0xf,%edx
  183fbd:	83 fa 04             	cmp    $0x4,%edx
  183fc0:	74 03                	je     183fc5 <__addsf3+0x3bf>
  183fc2:	83 c3 04             	add    $0x4,%ebx
  183fc5:	f7 c3 00 00 00 04    	test   $0x4000000,%ebx
  183fcb:	74 10                	je     183fdd <__addsf3+0x3d7>
  183fcd:	40                   	inc    %eax
  183fce:	81 e3 ff ff ff fb    	and    $0xfbffffff,%ebx
  183fd4:	3d ff 00 00 00       	cmp    $0xff,%eax
  183fd9:	75 02                	jne    183fdd <__addsf3+0x3d7>
  183fdb:	31 db                	xor    %ebx,%ebx
  183fdd:	c1 eb 03             	shr    $0x3,%ebx
  183fe0:	3d ff 00 00 00       	cmp    $0xff,%eax
  183fe5:	75 16                	jne    183ffd <__addsf3+0x3f7>
  183fe7:	85 db                	test   %ebx,%ebx
  183fe9:	74 12                	je     183ffd <__addsf3+0x3f7>
  183feb:	81 cb 00 00 40 00    	or     $0x400000,%ebx
  183ff1:	eb 0a                	jmp    183ffd <__addsf3+0x3f7>
  183ff3:	bb 01 00 00 00       	mov    $0x1,%ebx
  183ff8:	e9 dc fc ff ff       	jmp    183cd9 <__addsf3+0xd3>
  183ffd:	0f b6 c0             	movzbl %al,%eax
  184000:	c1 e0 17             	shl    $0x17,%eax
  184003:	81 e3 ff ff 7f 00    	and    $0x7fffff,%ebx
  184009:	c1 e7 1f             	shl    $0x1f,%edi
  18400c:	09 c3                	or     %eax,%ebx
  18400e:	89 d8                	mov    %ebx,%eax
  184010:	5b                   	pop    %ebx
  184011:	09 f8                	or     %edi,%eax
  184013:	5e                   	pop    %esi
  184014:	5f                   	pop    %edi
  184015:	5d                   	pop    %ebp
  184016:	c3                   	ret    

00184017 <__mulsf3>:
  184017:	55                   	push   %ebp
  184018:	57                   	push   %edi
  184019:	56                   	push   %esi
  18401a:	53                   	push   %ebx
  18401b:	83 ec 10             	sub    $0x10,%esp
  18401e:	89 c1                	mov    %eax,%ecx
  184020:	c1 e9 1f             	shr    $0x1f,%ecx
  184023:	89 c3                	mov    %eax,%ebx
  184025:	89 0c 24             	mov    %ecx,(%esp)
  184028:	81 e3 ff ff 7f 00    	and    $0x7fffff,%ebx
  18402e:	0f b6 3c 24          	movzbl (%esp),%edi
  184032:	c1 e8 17             	shr    $0x17,%eax
  184035:	89 7c 24 04          	mov    %edi,0x4(%esp)
  184039:	0f b6 e8             	movzbl %al,%ebp
  18403c:	84 c0                	test   %al,%al
  18403e:	74 12                	je     184052 <__mulsf3+0x3b>
  184040:	fe c0                	inc    %al
  184042:	74 2d                	je     184071 <__mulsf3+0x5a>
  184044:	81 cb 00 00 80 00    	or     $0x800000,%ebx
  18404a:	83 ed 7f             	sub    $0x7f,%ebp
  18404d:	c1 e3 03             	shl    $0x3,%ebx
  184050:	eb 1b                	jmp    18406d <__mulsf3+0x56>
  184052:	bf 01 00 00 00       	mov    $0x1,%edi
  184057:	85 db                	test   %ebx,%ebx
  184059:	74 1e                	je     184079 <__mulsf3+0x62>
  18405b:	0f bd c3             	bsr    %ebx,%eax
  18405e:	83 f0 1f             	xor    $0x1f,%eax
  184061:	8d 48 fb             	lea    -0x5(%eax),%ecx
  184064:	d3 e3                	shl    %cl,%ebx
  184066:	89 e9                	mov    %ebp,%ecx
  184068:	29 c1                	sub    %eax,%ecx
  18406a:	8d 69 8a             	lea    -0x76(%ecx),%ebp
  18406d:	31 ff                	xor    %edi,%edi
  18406f:	eb 08                	jmp    184079 <__mulsf3+0x62>
  184071:	83 fb 01             	cmp    $0x1,%ebx
  184074:	19 ff                	sbb    %edi,%edi
  184076:	83 c7 03             	add    $0x3,%edi
  184079:	89 d6                	mov    %edx,%esi
  18407b:	89 d1                	mov    %edx,%ecx
  18407d:	c1 ea 1f             	shr    $0x1f,%edx
  184080:	81 e6 ff ff 7f 00    	and    $0x7fffff,%esi
  184086:	c1 e9 17             	shr    $0x17,%ecx
  184089:	89 54 24 0c          	mov    %edx,0xc(%esp)
  18408d:	0f b6 54 24 0c       	movzbl 0xc(%esp),%edx
  184092:	0f b6 c1             	movzbl %cl,%eax
  184095:	89 54 24 08          	mov    %edx,0x8(%esp)
  184099:	84 c9                	test   %cl,%cl
  18409b:	74 16                	je     1840b3 <__mulsf3+0x9c>
  18409d:	fe c1                	inc    %cl
  18409f:	74 2f                	je     1840d0 <__mulsf3+0xb9>
  1840a1:	81 ce 00 00 80 00    	or     $0x800000,%esi
  1840a7:	83 e8 7f             	sub    $0x7f,%eax
  1840aa:	8d 34 f5 00 00 00 00 	lea    0x0(,%esi,8),%esi
  1840b1:	eb 19                	jmp    1840cc <__mulsf3+0xb5>
  1840b3:	ba 01 00 00 00       	mov    $0x1,%edx
  1840b8:	85 f6                	test   %esi,%esi
  1840ba:	74 1c                	je     1840d8 <__mulsf3+0xc1>
  1840bc:	0f bd d6             	bsr    %esi,%edx
  1840bf:	83 f2 1f             	xor    $0x1f,%edx
  1840c2:	29 d0                	sub    %edx,%eax
  1840c4:	8d 4a fb             	lea    -0x5(%edx),%ecx
  1840c7:	d3 e6                	shl    %cl,%esi
  1840c9:	8d 40 8a             	lea    -0x76(%eax),%eax
  1840cc:	31 d2                	xor    %edx,%edx
  1840ce:	eb 08                	jmp    1840d8 <__mulsf3+0xc1>
  1840d0:	83 fe 01             	cmp    $0x1,%esi
  1840d3:	19 d2                	sbb    %edx,%edx
  1840d5:	83 c2 03             	add    $0x3,%edx
  1840d8:	8a 4c 24 0c          	mov    0xc(%esp),%cl
  1840dc:	33 0c 24             	xor    (%esp),%ecx
  1840df:	0f b6 c9             	movzbl %cl,%ecx
  1840e2:	89 0c 24             	mov    %ecx,(%esp)
  1840e5:	8d 4c 05 00          	lea    0x0(%ebp,%eax,1),%ecx
  1840e9:	8d 04 bd 00 00 00 00 	lea    0x0(,%edi,4),%eax
  1840f0:	09 d0                	or     %edx,%eax
  1840f2:	8d 69 01             	lea    0x1(%ecx),%ebp
  1840f5:	48                   	dec    %eax
  1840f6:	83 f8 0e             	cmp    $0xe,%eax
  1840f9:	77 0b                	ja     184106 <__mulsf3+0xef>
  1840fb:	ff 24 85 a8 4c 18 00 	jmp    *0x184ca8(,%eax,4)
  184102:	89 f3                	mov    %esi,%ebx
  184104:	eb 5d                	jmp    184163 <__mulsf3+0x14c>
  184106:	89 d8                	mov    %ebx,%eax
  184108:	31 db                	xor    %ebx,%ebx
  18410a:	f7 e6                	mul    %esi
  18410c:	c1 e2 06             	shl    $0x6,%edx
  18410f:	89 c7                	mov    %eax,%edi
  184111:	c1 ef 1a             	shr    $0x1a,%edi
  184114:	09 fa                	or     %edi,%edx
  184116:	c1 e0 06             	shl    $0x6,%eax
  184119:	0f 95 c3             	setne  %bl
  18411c:	09 d3                	or     %edx,%ebx
  18411e:	f7 c3 00 00 00 08    	test   $0x8000000,%ebx
  184124:	0f 84 0f 01 00 00    	je     184239 <__mulsf3+0x222>
  18412a:	89 d8                	mov    %ebx,%eax
  18412c:	83 e3 01             	and    $0x1,%ebx
  18412f:	d1 e8                	shr    %eax
  184131:	89 e9                	mov    %ebp,%ecx
  184133:	09 c3                	or     %eax,%ebx
  184135:	e9 ff 00 00 00       	jmp    184239 <__mulsf3+0x222>
  18413a:	39 f3                	cmp    %esi,%ebx
  18413c:	0f 83 ce 00 00 00    	jae    184210 <__mulsf3+0x1f9>
  184142:	8b 44 24 08          	mov    0x8(%esp),%eax
  184146:	89 f3                	mov    %esi,%ebx
  184148:	89 44 24 04          	mov    %eax,0x4(%esp)
  18414c:	e9 bf 00 00 00       	jmp    184210 <__mulsf3+0x1f9>
  184151:	8b 44 24 04          	mov    0x4(%esp),%eax
  184155:	89 04 24             	mov    %eax,(%esp)
  184158:	eb 0b                	jmp    184165 <__mulsf3+0x14e>
  18415a:	8b 44 24 08          	mov    0x8(%esp),%eax
  18415e:	89 f3                	mov    %esi,%ebx
  184160:	89 04 24             	mov    %eax,(%esp)
  184163:	89 d7                	mov    %edx,%edi
  184165:	83 ff 02             	cmp    $0x2,%edi
  184168:	0f 84 b3 00 00 00    	je     184221 <__mulsf3+0x20a>
  18416e:	83 ff 03             	cmp    $0x3,%edi
  184171:	0f 84 a0 00 00 00    	je     184217 <__mulsf3+0x200>
  184177:	31 d2                	xor    %edx,%edx
  184179:	31 c0                	xor    %eax,%eax
  18417b:	4f                   	dec    %edi
  18417c:	0f 84 be 00 00 00    	je     184240 <__mulsf3+0x229>
  184182:	8d 45 7f             	lea    0x7f(%ebp),%eax
  184185:	85 c0                	test   %eax,%eax
  184187:	7e 37                	jle    1841c0 <__mulsf3+0x1a9>
  184189:	f6 c3 07             	test   $0x7,%bl
  18418c:	74 0d                	je     18419b <__mulsf3+0x184>
  18418e:	89 da                	mov    %ebx,%edx
  184190:	83 e2 0f             	and    $0xf,%edx
  184193:	83 fa 04             	cmp    $0x4,%edx
  184196:	74 03                	je     18419b <__mulsf3+0x184>
  184198:	83 c3 04             	add    $0x4,%ebx
  18419b:	f7 c3 00 00 00 08    	test   $0x8000000,%ebx
  1841a1:	74 0c                	je     1841af <__mulsf3+0x198>
  1841a3:	81 e3 ff ff ff f7    	and    $0xf7ffffff,%ebx
  1841a9:	8d 85 80 00 00 00    	lea    0x80(%ebp),%eax
  1841af:	3d fe 00 00 00       	cmp    $0xfe,%eax
  1841b4:	7f 6b                	jg     184221 <__mulsf3+0x20a>
  1841b6:	c1 eb 03             	shr    $0x3,%ebx
  1841b9:	89 da                	mov    %ebx,%edx
  1841bb:	e9 80 00 00 00       	jmp    184240 <__mulsf3+0x229>
  1841c0:	b9 01 00 00 00       	mov    $0x1,%ecx
  1841c5:	29 c1                	sub    %eax,%ecx
  1841c7:	83 f9 1b             	cmp    $0x1b,%ecx
  1841ca:	7f 5e                	jg     18422a <__mulsf3+0x213>
  1841cc:	b8 20 00 00 00       	mov    $0x20,%eax
  1841d1:	89 da                	mov    %ebx,%edx
  1841d3:	29 c8                	sub    %ecx,%eax
  1841d5:	d3 ea                	shr    %cl,%edx
  1841d7:	89 c1                	mov    %eax,%ecx
  1841d9:	31 c0                	xor    %eax,%eax
  1841db:	d3 e3                	shl    %cl,%ebx
  1841dd:	85 db                	test   %ebx,%ebx
  1841df:	0f 95 c0             	setne  %al
  1841e2:	09 c2                	or     %eax,%edx
  1841e4:	f6 c2 07             	test   $0x7,%dl
  1841e7:	74 0d                	je     1841f6 <__mulsf3+0x1df>
  1841e9:	89 d0                	mov    %edx,%eax
  1841eb:	83 e0 0f             	and    $0xf,%eax
  1841ee:	83 f8 04             	cmp    $0x4,%eax
  1841f1:	74 03                	je     1841f6 <__mulsf3+0x1df>
  1841f3:	83 c2 04             	add    $0x4,%edx
  1841f6:	f7 c2 00 00 00 04    	test   $0x4000000,%edx
  1841fc:	75 32                	jne    184230 <__mulsf3+0x219>
  1841fe:	c1 ea 03             	shr    $0x3,%edx
  184201:	eb 29                	jmp    18422c <__mulsf3+0x215>
  184203:	bb 00 00 40 00       	mov    $0x400000,%ebx
  184208:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  18420f:	00 
  184210:	8b 44 24 04          	mov    0x4(%esp),%eax
  184214:	89 04 24             	mov    %eax,(%esp)
  184217:	81 cb 00 00 40 00    	or     $0x400000,%ebx
  18421d:	89 da                	mov    %ebx,%edx
  18421f:	eb 02                	jmp    184223 <__mulsf3+0x20c>
  184221:	31 d2                	xor    %edx,%edx
  184223:	b8 ff 00 00 00       	mov    $0xff,%eax
  184228:	eb 16                	jmp    184240 <__mulsf3+0x229>
  18422a:	31 d2                	xor    %edx,%edx
  18422c:	31 c0                	xor    %eax,%eax
  18422e:	eb 10                	jmp    184240 <__mulsf3+0x229>
  184230:	31 d2                	xor    %edx,%edx
  184232:	b8 01 00 00 00       	mov    $0x1,%eax
  184237:	eb 07                	jmp    184240 <__mulsf3+0x229>
  184239:	89 cd                	mov    %ecx,%ebp
  18423b:	e9 42 ff ff ff       	jmp    184182 <__mulsf3+0x16b>
  184240:	0f b6 c0             	movzbl %al,%eax
  184243:	c1 e0 17             	shl    $0x17,%eax
  184246:	8b 34 24             	mov    (%esp),%esi
  184249:	81 e2 ff ff 7f 00    	and    $0x7fffff,%edx
  18424f:	83 c4 10             	add    $0x10,%esp
  184252:	c1 e6 1f             	shl    $0x1f,%esi
  184255:	09 c2                	or     %eax,%edx
  184257:	09 f2                	or     %esi,%edx
  184259:	5b                   	pop    %ebx
  18425a:	89 d0                	mov    %edx,%eax
  18425c:	5e                   	pop    %esi
  18425d:	5f                   	pop    %edi
  18425e:	5d                   	pop    %ebp
  18425f:	c3                   	ret    

00184260 <__floatsisf>:
  184260:	57                   	push   %edi
  184261:	85 c0                	test   %eax,%eax
  184263:	56                   	push   %esi
  184264:	53                   	push   %ebx
  184265:	0f 84 90 00 00 00    	je     1842fb <__floatsisf+0x9b>
  18426b:	99                   	cltd   
  18426c:	89 c3                	mov    %eax,%ebx
  18426e:	31 d0                	xor    %edx,%eax
  184270:	c1 eb 1f             	shr    $0x1f,%ebx
  184273:	29 d0                	sub    %edx,%eax
  184275:	0f bd f8             	bsr    %eax,%edi
  184278:	ba 9e 00 00 00       	mov    $0x9e,%edx
  18427d:	83 f7 1f             	xor    $0x1f,%edi
  184280:	89 c6                	mov    %eax,%esi
  184282:	29 fa                	sub    %edi,%edx
  184284:	81 fa 96 00 00 00    	cmp    $0x96,%edx
  18428a:	7f 0b                	jg     184297 <__floatsisf+0x37>
  18428c:	b9 96 00 00 00       	mov    $0x96,%ecx
  184291:	29 d1                	sub    %edx,%ecx
  184293:	d3 e0                	shl    %cl,%eax
  184295:	eb 6a                	jmp    184301 <__floatsisf+0xa1>
  184297:	81 fa 99 00 00 00    	cmp    $0x99,%edx
  18429d:	7e 1d                	jle    1842bc <__floatsisf+0x5c>
  18429f:	b9 05 00 00 00       	mov    $0x5,%ecx
  1842a4:	29 f9                	sub    %edi,%ecx
  1842a6:	d3 e8                	shr    %cl,%eax
  1842a8:	b9 b9 00 00 00       	mov    $0xb9,%ecx
  1842ad:	29 d1                	sub    %edx,%ecx
  1842af:	d3 e6                	shl    %cl,%esi
  1842b1:	31 c9                	xor    %ecx,%ecx
  1842b3:	85 f6                	test   %esi,%esi
  1842b5:	0f 95 c1             	setne  %cl
  1842b8:	09 c8                	or     %ecx,%eax
  1842ba:	89 c6                	mov    %eax,%esi
  1842bc:	b9 99 00 00 00       	mov    $0x99,%ecx
  1842c1:	29 d1                	sub    %edx,%ecx
  1842c3:	85 c9                	test   %ecx,%ecx
  1842c5:	7e 02                	jle    1842c9 <__floatsisf+0x69>
  1842c7:	d3 e6                	shl    %cl,%esi
  1842c9:	89 f0                	mov    %esi,%eax
  1842cb:	25 ff ff ff fb       	and    $0xfbffffff,%eax
  1842d0:	f7 c6 07 00 00 00    	test   $0x7,%esi
  1842d6:	74 0b                	je     1842e3 <__floatsisf+0x83>
  1842d8:	83 e6 0f             	and    $0xf,%esi
  1842db:	83 fe 04             	cmp    $0x4,%esi
  1842de:	74 03                	je     1842e3 <__floatsisf+0x83>
  1842e0:	83 c0 04             	add    $0x4,%eax
  1842e3:	a9 00 00 00 04       	test   $0x4000000,%eax
  1842e8:	74 0c                	je     1842f6 <__floatsisf+0x96>
  1842ea:	ba 9f 00 00 00       	mov    $0x9f,%edx
  1842ef:	25 ff ff ff fb       	and    $0xfbffffff,%eax
  1842f4:	29 fa                	sub    %edi,%edx
  1842f6:	c1 e8 03             	shr    $0x3,%eax
  1842f9:	eb 06                	jmp    184301 <__floatsisf+0xa1>
  1842fb:	31 c0                	xor    %eax,%eax
  1842fd:	31 d2                	xor    %edx,%edx
  1842ff:	31 db                	xor    %ebx,%ebx
  184301:	0f b6 d2             	movzbl %dl,%edx
  184304:	c1 e2 17             	shl    $0x17,%edx
  184307:	25 ff ff 7f 00       	and    $0x7fffff,%eax
  18430c:	c1 e3 1f             	shl    $0x1f,%ebx
  18430f:	09 d0                	or     %edx,%eax
  184311:	09 d8                	or     %ebx,%eax
  184313:	5b                   	pop    %ebx
  184314:	5e                   	pop    %esi
  184315:	5f                   	pop    %edi
  184316:	c3                   	ret    

00184317 <__extendsfdf2>:
  184317:	89 c2                	mov    %eax,%edx
  184319:	55                   	push   %ebp
  18431a:	c1 ea 17             	shr    $0x17,%edx
  18431d:	89 c5                	mov    %eax,%ebp
  18431f:	0f b6 d2             	movzbl %dl,%edx
  184322:	57                   	push   %edi
  184323:	81 e5 ff ff 7f 00    	and    $0x7fffff,%ebp
  184329:	8d 4a 01             	lea    0x1(%edx),%ecx
  18432c:	56                   	push   %esi
  18432d:	0f b6 c9             	movzbl %cl,%ecx
  184330:	c1 e8 1f             	shr    $0x1f,%eax
  184333:	53                   	push   %ebx
  184334:	49                   	dec    %ecx
  184335:	7e 10                	jle    184347 <__extendsfdf2+0x30>
  184337:	89 eb                	mov    %ebp,%ebx
  184339:	81 c2 80 03 00 00    	add    $0x380,%edx
  18433f:	c1 eb 03             	shr    $0x3,%ebx
  184342:	c1 e5 1d             	shl    $0x1d,%ebp
  184345:	eb 58                	jmp    18439f <__extendsfdf2+0x88>
  184347:	85 d2                	test   %edx,%edx
  184349:	75 33                	jne    18437e <__extendsfdf2+0x67>
  18434b:	85 ed                	test   %ebp,%ebp
  18434d:	74 45                	je     184394 <__extendsfdf2+0x7d>
  18434f:	0f bd f5             	bsr    %ebp,%esi
  184352:	83 f6 1f             	xor    $0x1f,%esi
  184355:	83 fe 0a             	cmp    $0xa,%esi
  184358:	7f 12                	jg     18436c <__extendsfdf2+0x55>
  18435a:	b9 0b 00 00 00       	mov    $0xb,%ecx
  18435f:	89 eb                	mov    %ebp,%ebx
  184361:	29 f1                	sub    %esi,%ecx
  184363:	d3 eb                	shr    %cl,%ebx
  184365:	8d 4e 15             	lea    0x15(%esi),%ecx
  184368:	d3 e5                	shl    %cl,%ebp
  18436a:	eb 09                	jmp    184375 <__extendsfdf2+0x5e>
  18436c:	89 eb                	mov    %ebp,%ebx
  18436e:	8d 4e f5             	lea    -0xb(%esi),%ecx
  184371:	d3 e3                	shl    %cl,%ebx
  184373:	31 ed                	xor    %ebp,%ebp
  184375:	ba 89 03 00 00       	mov    $0x389,%edx
  18437a:	29 f2                	sub    %esi,%edx
  18437c:	eb 21                	jmp    18439f <__extendsfdf2+0x88>
  18437e:	31 db                	xor    %ebx,%ebx
  184380:	85 ed                	test   %ebp,%ebp
  184382:	74 16                	je     18439a <__extendsfdf2+0x83>
  184384:	89 eb                	mov    %ebp,%ebx
  184386:	c1 eb 03             	shr    $0x3,%ebx
  184389:	c1 e5 1d             	shl    $0x1d,%ebp
  18438c:	81 cb 00 00 08 00    	or     $0x80000,%ebx
  184392:	eb 06                	jmp    18439a <__extendsfdf2+0x83>
  184394:	31 db                	xor    %ebx,%ebx
  184396:	31 d2                	xor    %edx,%edx
  184398:	eb 05                	jmp    18439f <__extendsfdf2+0x88>
  18439a:	ba ff 07 00 00       	mov    $0x7ff,%edx
  18439f:	31 ff                	xor    %edi,%edi
  1843a1:	81 e3 ff ff 0f 00    	and    $0xfffff,%ebx
  1843a7:	89 f9                	mov    %edi,%ecx
  1843a9:	81 e2 ff 07 00 00    	and    $0x7ff,%edx
  1843af:	c1 e0 1f             	shl    $0x1f,%eax
  1843b2:	81 e1 00 00 f0 ff    	and    $0xfff00000,%ecx
  1843b8:	09 cb                	or     %ecx,%ebx
  1843ba:	89 d1                	mov    %edx,%ecx
  1843bc:	c1 e1 14             	shl    $0x14,%ecx
  1843bf:	89 da                	mov    %ebx,%edx
  1843c1:	81 e2 ff ff 0f 80    	and    $0x800fffff,%edx
  1843c7:	5b                   	pop    %ebx
  1843c8:	09 ca                	or     %ecx,%edx
  1843ca:	5e                   	pop    %esi
  1843cb:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
  1843d1:	5f                   	pop    %edi
  1843d2:	09 c2                	or     %eax,%edx
  1843d4:	89 e8                	mov    %ebp,%eax
  1843d6:	5d                   	pop    %ebp
  1843d7:	c3                   	ret    

001843d8 <_handle_exc_0_vector_0_stub>:
  1843d8:	6a 00                	push   $0x0
  1843da:	68 df 2a 18 00       	push   $0x182adf
  1843df:	e9 02 e4 ff ff       	jmp    1827e6 <_exception_enter>

001843e4 <_handle_exc_2_vector_2_stub>:
  1843e4:	6a 00                	push   $0x0
  1843e6:	68 eb 2a 18 00       	push   $0x182aeb
  1843eb:	e9 f6 e3 ff ff       	jmp    1827e6 <_exception_enter>

001843f0 <_handle_exc_4_vector_4_stub>:
  1843f0:	6a 00                	push   $0x0
  1843f2:	68 f7 2a 18 00       	push   $0x182af7
  1843f7:	e9 ea e3 ff ff       	jmp    1827e6 <_exception_enter>

001843fc <_handle_exc_5_vector_5_stub>:
  1843fc:	6a 00                	push   $0x0
  1843fe:	68 03 2b 18 00       	push   $0x182b03
  184403:	e9 de e3 ff ff       	jmp    1827e6 <_exception_enter>

00184408 <_handle_exc_6_vector_6_stub>:
  184408:	6a 00                	push   $0x0
  18440a:	68 0f 2b 18 00       	push   $0x182b0f
  18440f:	e9 d2 e3 ff ff       	jmp    1827e6 <_exception_enter>

00184414 <_handle_exc_7_vector_7_stub>:
  184414:	6a 00                	push   $0x0
  184416:	68 1b 2b 18 00       	push   $0x182b1b
  18441b:	e9 c6 e3 ff ff       	jmp    1827e6 <_exception_enter>

00184420 <_handle_exc_8_vector_8_stub>:
  184420:	68 27 2b 18 00       	push   $0x182b27
  184425:	e9 bc e3 ff ff       	jmp    1827e6 <_exception_enter>

0018442a <_handle_exc_10_vector_10_stub>:
  18442a:	68 33 2b 18 00       	push   $0x182b33
  18442f:	e9 b2 e3 ff ff       	jmp    1827e6 <_exception_enter>

00184434 <_handle_exc_11_vector_11_stub>:
  184434:	68 3f 2b 18 00       	push   $0x182b3f
  184439:	e9 a8 e3 ff ff       	jmp    1827e6 <_exception_enter>

0018443e <_handle_exc_12_vector_12_stub>:
  18443e:	68 4b 2b 18 00       	push   $0x182b4b
  184443:	e9 9e e3 ff ff       	jmp    1827e6 <_exception_enter>

00184448 <_handle_exc_13_vector_13_stub>:
  184448:	68 57 2b 18 00       	push   $0x182b57
  18444d:	e9 94 e3 ff ff       	jmp    1827e6 <_exception_enter>

00184452 <_handle_exc_14_vector_14_stub>:
  184452:	68 63 2b 18 00       	push   $0x182b63
  184457:	e9 8a e3 ff ff       	jmp    1827e6 <_exception_enter>

0018445c <_handle_exc_16_vector_16_stub>:
  18445c:	6a 00                	push   $0x0
  18445e:	68 6f 2b 18 00       	push   $0x182b6f
  184463:	e9 7e e3 ff ff       	jmp    1827e6 <_exception_enter>

00184468 <_handle_exc_17_vector_17_stub>:
  184468:	68 7b 2b 18 00       	push   $0x182b7b
  18446d:	e9 74 e3 ff ff       	jmp    1827e6 <_exception_enter>

00184472 <_handle_exc_18_vector_18_stub>:
  184472:	6a 00                	push   $0x0
  184474:	68 87 2b 18 00       	push   $0x182b87
  184479:	e9 68 e3 ff ff       	jmp    1827e6 <_exception_enter>
