
zephyr.elf:     ファイル形式 elf32-iamcu


セクション text の逆アセンブル:

00180000 <__start>:
        mov  %eax, %esi			/* low  value */
        mov  %edx, %edi			/* high value */
#endif

	/* Enable write-back caching by clearing the NW and CD bits */
	movl	%cr0, %eax
  180000:	0f 20 c0             	mov    %cr0,%eax
	andl	$0x9fffffff, %eax
  180003:	25 ff ff ff 9f       	and    $0x9fffffff,%eax
	movl	%eax, %cr0
  180008:	0f 22 c0             	mov    %eax,%cr0
	/*
	 * Ensure interrupts are disabled.  Interrupts are enabled when
	 * the first context switch occurs.
	 */

	cli
  18000b:	fa                   	cli    
	 * booted operating systems to setup their own IDT and GDT.
	 */
#if CONFIG_SET_GDT
	lgdt	_gdt_rom		/* load 32-bit operand size GDT */
#endif
	lidt	_Idt		/* load 32-bit operand size IDT */
  18000c:	0f 01 1d 4c 00 18 00 	lidtl  0x18004c
	/*
	 * Force an #NM exception for floating point instructions
	 * since FP support hasn't been configured
	 */

	movl	%cr0, %eax		/* move CR0 to EAX */
  180013:	0f 20 c0             	mov    %cr0,%eax
	orl	$0x2e, %eax		/* CR0[NE+TS+EM+MP]=1 */
  180016:	83 c8 2e             	or     $0x2e,%eax
	movl	%eax, %cr0		/* move EAX to CR0 */
  180019:	0f 22 c0             	mov    %eax,%cr0
	stack_size_dwords = (CONFIG_ISR_STACK_SIZE / 4)
	movl $stack_size_dwords, %ecx
	rep  stosl
#endif

	movl	$_interrupt_stack, %esp
  18001c:	bc 84 02 28 00       	mov    $0x280284,%esp
	addl	$CONFIG_ISR_STACK_SIZE, %esp
  180021:	81 c4 00 01 00 00    	add    $0x100,%esp
	/*
	 * copy DATA section from ROM to RAM region
	 *	 DATA is followed by BSS section.
	 */

	movl	$__data_ram_start, %edi /* DATA in RAM (dest) */
  180027:	bf 00 00 28 00       	mov    $0x280000,%edi
	movl	$__data_rom_start, %esi /* DATA in ROM (src) */
  18002c:	be 28 2a 18 00       	mov    $0x182a28,%esi
	movl	$__data_num_words, %ecx /* Size of DATA in quad bytes */
  180031:	b9 26 00 00 00       	mov    $0x26,%ecx
dataWords:
	movl	%edx, %ecx	/* restore # quad bytes */
	andl	$0x3, %ecx	/* only need to copy at most 3 quad bytes */
  #endif /* CONFIG_SSE */

	rep
  180036:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

#else /* !CONFIG_SSE */

	/* clear out BSS double words (32-bits at a time) */

	xorl	%eax, %eax		/* fill memory with 0 */
  180038:	31 c0                	xor    %eax,%eax
	movl	$__bss_start, %edi	/* load BSS start address */
  18003a:	bf a0 00 28 00       	mov    $0x2800a0,%edi
	movl	$__bss_num_words, %ecx	/* number of quad bytes */
  18003f:	b9 79 00 00 00       	mov    $0x79,%ecx
	cld
  180044:	fc                   	cld    
	rep
  180045:	f3 ab                	rep stos %eax,%es:(%edi)
	lgdt	%ds:_gdt
#endif

	/* Jump to C portion of kernel initialization and never return */

	jmp	_Cstart
  180047:	e9 6c 18 00 00       	jmp    1818b8 <_Cstart>

0018004c <_Idt>:
  18004c:	ff 01 28 28 18 00 66 90 66 90 66 90 66 90 66 90     ..((..f.f.f.f.f.
  18005c:	66 90 66 90                                         f.f.

00180060 <_thread_entry_wrapper>:
  180060:	58                   	pop    %eax
  180061:	5a                   	pop    %edx
  180062:	59                   	pop    %ecx
  180063:	6a 00                	push   $0x0
  180065:	e9 bb 1f 00 00       	jmp    182025 <_thread_entry>

0018006a <rotA_Trig>:
uint32_t old_A = 0;
uint32_t old_B = 0;

void rotA_Trig(struct device *gpiob, struct gpio_callback *cb,
		    uint32_t pins)
{
  18006a:	53                   	push   %ebx
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_read(struct device *port, uint32_t pin,
				uint32_t *value)
{
	const struct gpio_driver_api *api = port->driver_api;
  18006b:	8b 58 04             	mov    0x4(%eax),%ebx

	return api->read(port, GPIO_ACCESS_BY_PIN, pin, value);
  18006e:	68 c0 00 28 00       	push   $0x2800c0
  180073:	b9 02 00 00 00       	mov    $0x2,%ecx
  180078:	ba 00 00 00 00       	mov    $0x0,%edx
  18007d:	ff 53 08             	call   *0x8(%ebx)
  180080:	83 c4 04             	add    $0x4,%esp
	gpio_pin_read(gpiob, PIN, &val);
	if(val == 1)
  180083:	a1 c0 00 28 00       	mov    0x2800c0,%eax
  180088:	83 f8 01             	cmp    $0x1,%eax
  18008b:	75 19                	jne    1800a6 <rotA_Trig+0x3c>
	{
		if(old_B == 1)
  18008d:	83 3d b8 00 28 00 01 	cmpl   $0x1,0x2800b8
  180094:	75 08                	jne    18009e <rotA_Trig+0x34>
		{
			count++;
  180096:	ff 05 c4 00 28 00    	incl   0x2800c4
  18009c:	eb 1f                	jmp    1800bd <rotA_Trig+0x53>
		}
		else
		{
			count--;
  18009e:	ff 0d c4 00 28 00    	decl   0x2800c4
  1800a4:	eb 17                	jmp    1800bd <rotA_Trig+0x53>
		}
	}
	else
	{
		if(old_B == 1)
  1800a6:	83 3d b8 00 28 00 01 	cmpl   $0x1,0x2800b8
  1800ad:	75 08                	jne    1800b7 <rotA_Trig+0x4d>
		{
			count--;
  1800af:	ff 0d c4 00 28 00    	decl   0x2800c4
  1800b5:	eb 06                	jmp    1800bd <rotA_Trig+0x53>
		}
		else
		{
			count++;
  1800b7:	ff 05 c4 00 28 00    	incl   0x2800c4
		}
	}
	old_A = val;
  1800bd:	a3 bc 00 28 00       	mov    %eax,0x2800bc
}
  1800c2:	5b                   	pop    %ebx
  1800c3:	c3                   	ret    

001800c4 <rotB_Trig>:

void rotB_Trig(struct device *gpiob, struct gpio_callback *cb,
		    uint32_t pins)
{
  1800c4:	53                   	push   %ebx
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_read(struct device *port, uint32_t pin,
				uint32_t *value)
{
	const struct gpio_driver_api *api = port->driver_api;
  1800c5:	8b 58 04             	mov    0x4(%eax),%ebx

	return api->read(port, GPIO_ACCESS_BY_PIN, pin, value);
  1800c8:	68 c0 00 28 00       	push   $0x2800c0
  1800cd:	b9 05 00 00 00       	mov    $0x5,%ecx
  1800d2:	ba 00 00 00 00       	mov    $0x0,%edx
  1800d7:	ff 53 08             	call   *0x8(%ebx)
  1800da:	83 c4 04             	add    $0x4,%esp
	gpio_pin_read(gpiob, PIN_B, &val);
	if(val == 1)
  1800dd:	a1 c0 00 28 00       	mov    0x2800c0,%eax
  1800e2:	83 f8 01             	cmp    $0x1,%eax
  1800e5:	75 19                	jne    180100 <rotB_Trig+0x3c>
	{
		if(old_A == 1)
  1800e7:	83 3d bc 00 28 00 01 	cmpl   $0x1,0x2800bc
  1800ee:	75 08                	jne    1800f8 <rotB_Trig+0x34>
		{
			count--;
  1800f0:	ff 0d c4 00 28 00    	decl   0x2800c4
  1800f6:	eb 1f                	jmp    180117 <rotB_Trig+0x53>
		}
		else
		{
			count++;
  1800f8:	ff 05 c4 00 28 00    	incl   0x2800c4
  1800fe:	eb 17                	jmp    180117 <rotB_Trig+0x53>
		}
	}
	else
	{
		if(old_B == 1)
  180100:	83 3d b8 00 28 00 01 	cmpl   $0x1,0x2800b8
  180107:	75 08                	jne    180111 <rotB_Trig+0x4d>
		{
			count++;
  180109:	ff 05 c4 00 28 00    	incl   0x2800c4
  18010f:	eb 06                	jmp    180117 <rotB_Trig+0x53>
		}
		else
		{
			count--;
  180111:	ff 0d c4 00 28 00    	decl   0x2800c4
		}
	}
	old_B = val;
  180117:	a3 b8 00 28 00       	mov    %eax,0x2800b8
}
  18011c:	5b                   	pop    %ebx
  18011d:	c3                   	ret    

0018011e <main>:

static struct gpio_callback gpio_cb;
static struct gpio_callback gpio_cb_B;

void main(void)
{
  18011e:	56                   	push   %esi
  18011f:	53                   	push   %ebx
	struct device *gpiob;

	printk("Press the user defined button on the board\n");
  180120:	68 c0 23 18 00       	push   $0x1823c0
  180125:	e8 5b 0b 00 00       	call   180c85 <printk>
  18012a:	83 c4 04             	add    $0x4,%esp
	gpiob = device_get_binding(PORT);
  18012d:	b8 ec 23 18 00       	mov    $0x1823ec,%eax
  180132:	e8 11 16 00 00       	call   181748 <device_get_binding>
	if (!gpiob) {
  180137:	85 c0                	test   %eax,%eax
  180139:	75 12                	jne    18014d <main+0x2f>
		printk("error\n");
  18013b:	68 f3 23 18 00       	push   $0x1823f3
  180140:	e8 40 0b 00 00       	call   180c85 <printk>
  180145:	83 c4 04             	add    $0x4,%esp
		return;
  180148:	e9 fe 00 00 00       	jmp    18024b <main+0x12d>
  18014d:	89 c3                	mov    %eax,%ebx
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
  18014f:	8b 70 04             	mov    0x4(%eax),%esi

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
  180152:	6a 66                	push   $0x66
  180154:	b9 02 00 00 00       	mov    $0x2,%ecx
  180159:	ba 00 00 00 00       	mov    $0x0,%edx
  18015e:	ff 16                	call   *(%esi)
  180160:	83 c4 04             	add    $0x4,%esp
				      uint32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
  180163:	c7 05 b0 00 28 00 6a 	movl   $0x18006a,0x2800b0
  18016a:	00 18 00 
	callback->pin_mask = pin_mask;
  18016d:	c7 05 b4 00 28 00 04 	movl   $0x4,0x2800b4
  180174:	00 00 00 
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api = port->driver_api;
  180177:	8b 73 04             	mov    0x4(%ebx),%esi

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
  18017a:	b9 01 00 00 00       	mov    $0x1,%ecx
  18017f:	ba ac 00 28 00       	mov    $0x2800ac,%edx
  180184:	89 d8                	mov    %ebx,%eax
  180186:	ff 56 0c             	call   *0xc(%esi)
 *       the pin to trigger an interruption. So as a semantic detail, if no
 *       callback is registered, of course none will be called.
 */
static inline int gpio_pin_enable_callback(struct device *port, uint32_t pin)
{
	const struct gpio_driver_api *api = port->driver_api;
  180189:	8b 73 04             	mov    0x4(%ebx),%esi

	return api->enable_callback(port, GPIO_ACCESS_BY_PIN, pin);
  18018c:	b9 02 00 00 00       	mov    $0x2,%ecx
  180191:	ba 00 00 00 00       	mov    $0x0,%edx
  180196:	89 d8                	mov    %ebx,%eax
  180198:	ff 56 10             	call   *0x10(%esi)
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
  18019b:	8b 73 04             	mov    0x4(%ebx),%esi

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
  18019e:	6a 66                	push   $0x66
  1801a0:	b9 05 00 00 00       	mov    $0x5,%ecx
  1801a5:	ba 00 00 00 00       	mov    $0x0,%edx
  1801aa:	89 d8                	mov    %ebx,%eax
  1801ac:	ff 16                	call   *(%esi)
  1801ae:	83 c4 04             	add    $0x4,%esp
				      uint32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
  1801b1:	c7 05 a4 00 28 00 c4 	movl   $0x1800c4,0x2800a4
  1801b8:	00 18 00 
	callback->pin_mask = pin_mask;
  1801bb:	c7 05 a8 00 28 00 20 	movl   $0x20,0x2800a8
  1801c2:	00 00 00 
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api = port->driver_api;
  1801c5:	8b 73 04             	mov    0x4(%ebx),%esi

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
  1801c8:	b9 01 00 00 00       	mov    $0x1,%ecx
  1801cd:	ba a0 00 28 00       	mov    $0x2800a0,%edx
  1801d2:	89 d8                	mov    %ebx,%eax
  1801d4:	ff 56 0c             	call   *0xc(%esi)
 *       the pin to trigger an interruption. So as a semantic detail, if no
 *       callback is registered, of course none will be called.
 */
static inline int gpio_pin_enable_callback(struct device *port, uint32_t pin)
{
	const struct gpio_driver_api *api = port->driver_api;
  1801d7:	8b 73 04             	mov    0x4(%ebx),%esi

	return api->enable_callback(port, GPIO_ACCESS_BY_PIN, pin);
  1801da:	b9 05 00 00 00       	mov    $0x5,%ecx
  1801df:	ba 00 00 00 00       	mov    $0x0,%edx
  1801e4:	89 d8                	mov    %ebx,%eax
  1801e6:	ff 56 10             	call   *0x10(%esi)
	gpio_init_callback(&gpio_cb_B, rotB_Trig, BIT(PIN_B));
	gpio_add_callback(gpiob, &gpio_cb_B);
	gpio_pin_enable_callback(gpiob, PIN_B);

	struct device *dev;
	dev = device_get_binding(PORT1);
  1801e9:	b8 ec 23 18 00       	mov    $0x1823ec,%eax
  1801ee:	e8 55 15 00 00       	call   181748 <device_get_binding>
  1801f3:	89 c3                	mov    %eax,%ebx
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
  1801f5:	8b 70 04             	mov    0x4(%eax),%esi

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
  1801f8:	6a 01                	push   $0x1
  1801fa:	b9 18 00 00 00       	mov    $0x18,%ecx
  1801ff:	ba 00 00 00 00       	mov    $0x0,%edx
  180204:	ff 16                	call   *(%esi)
  180206:	83 c4 04             	add    $0x4,%esp

	while (1) {


		/* Set pin to HIGH/LOW */
		gpio_pin_write(dev, LED, !val);
  180209:	83 3d c0 00 28 00 00 	cmpl   $0x0,0x2800c0
  180210:	0f 94 c0             	sete   %al
  180213:	0f b6 c0             	movzbl %al,%eax
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
  180216:	8b 73 04             	mov    0x4(%ebx),%esi

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
  180219:	50                   	push   %eax
  18021a:	b9 18 00 00 00       	mov    $0x18,%ecx
  18021f:	ba 00 00 00 00       	mov    $0x0,%edx
  180224:	89 d8                	mov    %ebx,%eax
  180226:	ff 56 04             	call   *0x4(%esi)
  180229:	83 c4 04             	add    $0x4,%esp
		printk("Counter = %d\n", count);
  18022c:	ff 35 c4 00 28 00    	pushl  0x2800c4
  180232:	68 fa 23 18 00       	push   $0x1823fa
  180237:	e8 49 0a 00 00       	call   180c85 <printk>
  18023c:	83 c4 08             	add    $0x8,%esp

		k_sleep(SLEEP_TIME);
  18023f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
  180244:	e8 78 18 00 00       	call   181ac1 <k_sleep>
  180249:	eb be                	jmp    180209 <main+0xeb>
	}
}
  18024b:	5b                   	pop    %ebx
  18024c:	5e                   	pop    %esi
  18024d:	c3                   	ret    

0018024e <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
  18024e:	53                   	push   %ebx
  18024f:	89 c3                	mov    %eax,%ebx
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
  180251:	83 f8 0a             	cmp    $0xa,%eax
  180254:	75 10                	jne    180266 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
  180256:	a1 c8 00 28 00       	mov    0x2800c8,%eax
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
  18025b:	8b 48 04             	mov    0x4(%eax),%ecx

	return api->poll_out(dev, out_char);
  18025e:	ba 0d 00 00 00       	mov    $0xd,%edx
  180263:	ff 51 04             	call   *0x4(%ecx)
	}
	uart_poll_out(uart_console_dev, c);
  180266:	a1 c8 00 28 00       	mov    0x2800c8,%eax
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
  18026b:	8b 48 04             	mov    0x4(%eax),%ecx

	return api->poll_out(dev, out_char);
  18026e:	0f b6 d3             	movzbl %bl,%edx
  180271:	ff 51 04             	call   *0x4(%ecx)

	return c;
}
  180274:	89 d8                	mov    %ebx,%eax
  180276:	5b                   	pop    %ebx
  180277:	c3                   	ret    

00180278 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
  180278:	b8 4e 02 18 00       	mov    $0x18024e,%eax
  18027d:	e8 10 08 00 00       	call   180a92 <__printk_hook_install>
  180282:	c3                   	ret    

00180283 <uart_console_init>:
static int uart_console_init(struct device *arg)
{

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
  180283:	b8 08 24 18 00       	mov    $0x182408,%eax
  180288:	e8 bb 14 00 00       	call   181748 <device_get_binding>
  18028d:	a3 c8 00 28 00       	mov    %eax,0x2800c8
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
  180292:	e8 e1 ff ff ff       	call   180278 <uart_console_hook_install>

	return 0;
}
  180297:	b8 00 00 00 00       	mov    $0x0,%eax
  18029c:	c3                   	ret    

0018029d <uart_qmsi_init>:
	.drv_cmd = uart_qmsi_drv_cmd,
#endif /* CONFIG_UART_DRV_CMD */
};

static int uart_qmsi_init(struct device *dev)
{
  18029d:	56                   	push   %esi
  18029e:	53                   	push   %ebx
  18029f:	83 ec 0c             	sub    $0xc,%esp
  1802a2:	89 c6                	mov    %eax,%esi
	const struct uart_qmsi_config_info *config = dev->config->config_info;
  1802a4:	8b 00                	mov    (%eax),%eax
  1802a6:	8b 58 08             	mov    0x8(%eax),%ebx
	qm_uart_config_t cfg;

	cfg.line_control = QM_UART_LC_8N1;
  1802a9:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
	cfg.baud_divisor = config->baud_divisor;
  1802b0:	8b 43 08             	mov    0x8(%ebx),%eax
  1802b3:	89 44 24 04          	mov    %eax,0x4(%esp)
	cfg.hw_fc = config->hw_fc;
  1802b7:	8a 43 0c             	mov    0xc(%ebx),%al
  1802ba:	88 44 24 08          	mov    %al,0x8(%esp)

	clk_periph_enable(config->clock_gate);
  1802be:	8b 43 04             	mov    0x4(%ebx),%eax
  1802c1:	e8 87 0c 00 00       	call   180f4d <clk_periph_enable>

	qm_uart_set_config(config->instance, &cfg);
  1802c6:	89 e2                	mov    %esp,%edx
  1802c8:	8b 03                	mov    (%ebx),%eax
  1802ca:	e8 bf 0d 00 00       	call   18108e <qm_uart_set_config>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->irq_config_func(dev);
#endif /* CONFIG_UART_INTERRUPT_DRIVEN */

	dev->driver_api = &api;
  1802cf:	c7 46 04 28 24 18 00 	movl   $0x182428,0x4(%esi)
	uart_qmsi_set_power_state(dev, DEVICE_PM_ACTIVE_STATE);

	return 0;
}
  1802d6:	b8 00 00 00 00       	mov    $0x0,%eax
  1802db:	83 c4 0c             	add    $0xc,%esp
  1802de:	5b                   	pop    %ebx
  1802df:	5e                   	pop    %esi
  1802e0:	c3                   	ret    

001802e1 <uart_qmsi_err_check>:
	qm_uart_write(instance, data);
	return data;
}

static int uart_qmsi_err_check(struct device *dev)
{
  1802e1:	83 ec 04             	sub    $0x4,%esp
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1802e4:	8b 00                	mov    (%eax),%eax
  1802e6:	8b 40 08             	mov    0x8(%eax),%eax
  1802e9:	8b 00                	mov    (%eax),%eax

	/* QMSI and Zephyr use the same bits to represent UART errors
	 * so we don't need to translate each error bit from QMSI API
	 * to Zephyr API.
	 */
	qm_uart_get_status(instance, &status);
  1802eb:	89 e2                	mov    %esp,%edx
  1802ed:	e8 0f 0e 00 00       	call   181101 <qm_uart_get_status>
	return (status & QM_UART_LSR_ERROR_BITS);
  1802f2:	8b 04 24             	mov    (%esp),%eax
  1802f5:	83 e0 1e             	and    $0x1e,%eax
}
  1802f8:	83 c4 04             	add    $0x4,%esp
  1802fb:	c3                   	ret    

001802fc <uart_qmsi_poll_out>:
	return 0;
}

static unsigned char uart_qmsi_poll_out(struct device *dev,
					unsigned char data)
{
  1802fc:	53                   	push   %ebx
  1802fd:	89 d3                	mov    %edx,%ebx
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  1802ff:	8b 00                	mov    (%eax),%eax
  180301:	8b 40 08             	mov    0x8(%eax),%eax
  180304:	8b 00                	mov    (%eax),%eax

	qm_uart_write(instance, data);
  180306:	0f b6 d2             	movzbl %dl,%edx
  180309:	e8 36 0e 00 00       	call   181144 <qm_uart_write>
	return data;
}
  18030e:	88 d8                	mov    %bl,%al
  180310:	5b                   	pop    %ebx
  180311:	c3                   	ret    

00180312 <uart_qmsi_poll_in>:
	      uart_qmsi_device_ctrl, &drv_data_1, &config_info_1, PRE_KERNEL_1,
	      CONFIG_KERNEL_INIT_PRIORITY_DEVICE, NULL);
#endif /* CONFIG_UART_QMSI_1 */

static int uart_qmsi_poll_in(struct device *dev, unsigned char *data)
{
  180312:	56                   	push   %esi
  180313:	53                   	push   %ebx
  180314:	83 ec 04             	sub    $0x4,%esp
  180317:	89 d6                	mov    %edx,%esi
	qm_uart_t instance = GET_CONTROLLER_INSTANCE(dev);
  180319:	8b 00                	mov    (%eax),%eax
  18031b:	8b 40 08             	mov    0x8(%eax),%eax
  18031e:	8b 18                	mov    (%eax),%ebx
	qm_uart_status_t status;

	qm_uart_get_status(instance, &status);
  180320:	89 e2                	mov    %esp,%edx
  180322:	89 d8                	mov    %ebx,%eax
  180324:	e8 d8 0d 00 00       	call   181101 <qm_uart_get_status>
	/* In order to check if there is any data to read from UART
	 * controller we should check if the QM_UART_RX_BUSY bit from
	 * 'status' is not set. This bit is set only if there is any
	 * pending character to read.
	 */
	if (!(status & QM_UART_RX_BUSY))
  180329:	f6 04 24 40          	testb  $0x40,(%esp)
  18032d:	74 15                	je     180344 <uart_qmsi_poll_in+0x32>
		return -1;

	qm_uart_read(instance, data, NULL);
  18032f:	b9 00 00 00 00       	mov    $0x0,%ecx
  180334:	89 f2                	mov    %esi,%edx
  180336:	89 d8                	mov    %ebx,%eax
  180338:	e8 29 0e 00 00       	call   181166 <qm_uart_read>
	return 0;
  18033d:	b8 00 00 00 00       	mov    $0x0,%eax
  180342:	eb 05                	jmp    180349 <uart_qmsi_poll_in+0x37>
	 * controller we should check if the QM_UART_RX_BUSY bit from
	 * 'status' is not set. This bit is set only if there is any
	 * pending character to read.
	 */
	if (!(status & QM_UART_RX_BUSY))
		return -1;
  180344:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

	qm_uart_read(instance, data, NULL);
	return 0;
}
  180349:	83 c4 04             	add    $0x4,%esp
  18034c:	5b                   	pop    %ebx
  18034d:	5e                   	pop    %esi
  18034e:	c3                   	ret    

0018034f <_timer_int_handler>:
		timer_mode = TIMER_MODE_PERIODIC;
	}

	_sys_clock_final_tick_announce();
#else
	_sys_clock_tick_announce();
  18034f:	a1 24 00 28 00       	mov    0x280024,%eax
  180354:	e8 09 19 00 00       	call   181c62 <_nano_sys_clock_tick_announce>
  180359:	c3                   	ret    

0018035a <_sys_clock_driver_init>:
	tickless_idle_init();

#ifndef CONFIG_MVIC
	divide_configuration_register_set();
#endif
	initial_count_register_set(cycles_per_tick - 1);
  18035a:	a1 28 00 28 00       	mov    0x280028,%eax
  18035f:	48                   	dec    %eax
 * @param count Count from which timer is to count down
 * @return N/A
 */
static inline void initial_count_register_set(uint32_t count)
{
	*_REG_TIMER_ICR = count;
  180360:	a3 80 03 e0 fe       	mov    %eax,0xfee00380
 *
 * @return N/A
 */
static inline void periodic_mode_set(void)
{
	*_REG_TIMER |= LOAPIC_TIMER_PERIODIC;
  180365:	a1 20 03 e0 fe       	mov    0xfee00320,%eax
  18036a:	0d 00 00 02 00       	or     $0x20000,%eax
  18036f:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
 * @returns: N/A
 */
static inline void _irq_controller_irq_config(unsigned int vector,
					      unsigned int irq, uint32_t flags)
{
	__irq_controller_irq_config(vector, irq, flags);
  180374:	b9 00 00 00 00       	mov    $0x0,%ecx
  180379:	ba 0a 00 00 00       	mov    $0xa,%edx
  18037e:	b8 2a 00 00 00       	mov    $0x2a,%eax
  180383:	e8 e0 00 00 00       	call   180468 <__irq_controller_irq_config>
	IRQ_CONNECT(TIMER_IRQ, TIMER_IRQ_PRIORITY, _timer_int_handler, 0, 0);

	/* Everything has been configured. It is now safe to enable the
	 * interrupt
	 */
	irq_enable(TIMER_IRQ);
  180388:	b8 0a 00 00 00       	mov    $0xa,%eax
  18038d:	e8 b1 00 00 00       	call   180443 <_arch_irq_enable>

	return 0;
}
  180392:	b8 00 00 00 00       	mov    $0x0,%eax
  180397:	c3                   	ret    

00180398 <_timer_int_handler_irq10_stub>:
	initial_count_register_set(cycles_per_tick - 1);
	periodic_mode_set();
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	loapic_timer_device_power_state = DEVICE_PM_ACTIVE_STATE;
#endif
	IRQ_CONNECT(TIMER_IRQ, TIMER_IRQ_PRIORITY, _timer_int_handler, 0, 0);
  180398:	6a 00                	push   $0x0
  18039a:	68 4f 03 18 00       	push   $0x18034f
  18039f:	e9 28 10 00 00       	jmp    1813cc <_interrupt_enter>

001803a4 <qm_gpio_0_isr_irq15_stub>:
  1803a4:	6a 00                	push   $0x0
  1803a6:	68 a5 0f 18 00       	push   $0x180fa5
  1803ab:	e9 1c 10 00 00       	jmp    1813cc <_interrupt_enter>

001803b0 <_mvic_rte_set>:
	unsigned int low_nibble;
	unsigned int high_nibble;

	__ASSERT(irq < MVIC_NUM_RTES, "invalid irq line %d", irq);

	low_nibble = ((irq & MVIC_LOW_NIBBLE_MASK) << 0x1);
  1803b0:	89 c1                	mov    %eax,%ecx
  1803b2:	83 e1 07             	and    $0x7,%ecx
  1803b5:	01 c9                	add    %ecx,%ecx
	high_nibble = ((irq & MVIC_HIGH_NIBBLE_MASK) << 0x2);
  1803b7:	83 e0 18             	and    $0x18,%eax
  1803ba:	c1 e0 02             	shl    $0x2,%eax
	return low_nibble | high_nibble;
  1803bd:	09 c8                	or     %ecx,%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1803bf:	9c                   	pushf  
  1803c0:	fa                   	cli    
  1803c1:	59                   	pop    %ecx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1803c2:	a3 00 00 c0 fe       	mov    %eax,0xfec00000
  1803c7:	89 15 10 00 c0 fe    	mov    %edx,0xfec00010
 *
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	if (!(key & 0x200)) {
  1803cd:	f6 c5 02             	test   $0x2,%ch
  1803d0:	74 01                	je     1803d3 <_mvic_rte_set+0x23>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1803d2:	fb                   	sti    
  1803d3:	c3                   	ret    

001803d4 <_mvic_rte_update>:
 * @param mask of bits to be modified
 *
 * @returns N/A
 */
static void _mvic_rte_update(unsigned int irq, uint32_t value, uint32_t mask)
{
  1803d4:	53                   	push   %ebx
	unsigned int low_nibble;
	unsigned int high_nibble;

	__ASSERT(irq < MVIC_NUM_RTES, "invalid irq line %d", irq);

	low_nibble = ((irq & MVIC_LOW_NIBBLE_MASK) << 0x1);
  1803d5:	89 c3                	mov    %eax,%ebx
  1803d7:	83 e3 07             	and    $0x7,%ebx
  1803da:	01 db                	add    %ebx,%ebx
	high_nibble = ((irq & MVIC_HIGH_NIBBLE_MASK) << 0x2);
  1803dc:	83 e0 18             	and    $0x18,%eax
  1803df:	c1 e0 02             	shl    $0x2,%eax
	return low_nibble | high_nibble;
  1803e2:	09 d8                	or     %ebx,%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1803e4:	9c                   	pushf  
  1803e5:	fa                   	cli    
  1803e6:	5b                   	pop    %ebx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1803e7:	a3 00 00 c0 fe       	mov    %eax,0xfec00000
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  1803ec:	a1 10 00 c0 fe       	mov    0xfec00010,%eax
	key = irq_lock();

	sys_write32(regsel, MVIC_IOREGSEL);

	old_value = sys_read32(MVIC_IOWIN);
	updated_value = (old_value & ~mask) | (value & mask);
  1803f1:	31 c2                	xor    %eax,%edx
  1803f3:	21 d1                	and    %edx,%ecx
  1803f5:	31 c8                	xor    %ecx,%eax
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  1803f7:	a3 10 00 c0 fe       	mov    %eax,0xfec00010
  1803fc:	f6 c7 02             	test   $0x2,%bh
  1803ff:	74 01                	je     180402 <_mvic_rte_update+0x2e>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  180401:	fb                   	sti    
	sys_write32(updated_value, MVIC_IOWIN);

	irq_unlock(key);
}
  180402:	5b                   	pop    %ebx
  180403:	c3                   	ret    

00180404 <_mvic_init>:
 * This routine replaces the standard Local APIC / IO APIC init routines.
 *
 * @returns: N/A
 */
static int _mvic_init(struct device *unused)
{
  180404:	53                   	push   %ebx
	ARG_UNUSED(unused);
	int i;

	/* By default mask all interrupt lines */
	for (i = 0; i < MVIC_NUM_RTES; i++) {
  180405:	bb 00 00 00 00       	mov    $0x0,%ebx
  18040a:	eb 0d                	jmp    180419 <_mvic_init+0x15>
		_mvic_rte_set(i, MVIC_IOWIN_MASK);
  18040c:	ba 00 00 01 00       	mov    $0x10000,%edx
  180411:	89 d8                	mov    %ebx,%eax
  180413:	e8 98 ff ff ff       	call   1803b0 <_mvic_rte_set>
{
	ARG_UNUSED(unused);
	int i;

	/* By default mask all interrupt lines */
	for (i = 0; i < MVIC_NUM_RTES; i++) {
  180418:	43                   	inc    %ebx
  180419:	83 fb 1f             	cmp    $0x1f,%ebx
  18041c:	7e ee                	jle    18040c <_mvic_init+0x8>
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  18041e:	b8 00 00 00 00       	mov    $0x0,%eax
  180423:	a3 80 00 e0 fe       	mov    %eax,0xfee00080
  180428:	a3 80 03 e0 fe       	mov    %eax,0xfee00380
  18042d:	b8 0a 00 01 00       	mov    $0x1000a,%eax
  180432:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
  180437:	b8 00 00 00 00       	mov    $0x0,%eax
  18043c:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
	/* discard a pending interrupt if any */
	sys_write32(0, MVIC_EOI);

	return 0;

}
  180441:	5b                   	pop    %ebx
  180442:	c3                   	ret    

00180443 <_arch_irq_enable>:
SYS_INIT(_mvic_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);


void _arch_irq_enable(unsigned int irq)
{
	if (irq == CONFIG_MVIC_TIMER_IRQ) {
  180443:	83 f8 0a             	cmp    $0xa,%eax
  180446:	75 10                	jne    180458 <_arch_irq_enable+0x15>
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  180448:	a1 20 03 e0 fe       	mov    0xfee00320,%eax
		sys_write32(sys_read32(MVIC_LVTTIMER) & ~MVIC_LVTTIMER_MASK,
  18044d:	25 ff ff fe ff       	and    $0xfffeffff,%eax
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  180452:	a3 20 03 e0 fe       	mov    %eax,0xfee00320
  180457:	c3                   	ret    
			    MVIC_LVTTIMER);
	} else {
		_mvic_rte_update(irq, 0, MVIC_IOWIN_MASK);
  180458:	b9 00 00 01 00       	mov    $0x10000,%ecx
  18045d:	ba 00 00 00 00       	mov    $0x0,%edx
  180462:	e8 6d ff ff ff       	call   1803d4 <_mvic_rte_update>
  180467:	c3                   	ret    

00180468 <__irq_controller_irq_config>:

	/* Vector argument always ignored. There are no triggering options
	 * for the timer, so nothing to do at all for that case. Other I/O
	 * interrupts need their triggering set
	 */
	if (irq != CONFIG_MVIC_TIMER_IRQ) {
  180468:	83 fa 0a             	cmp    $0xa,%edx
  18046b:	74 0f                	je     18047c <__irq_controller_irq_config+0x14>
  18046d:	89 d0                	mov    %edx,%eax
		_mvic_rte_set(irq, MVIC_IOWIN_MASK | flags);
  18046f:	81 c9 00 00 01 00    	or     $0x10000,%ecx
  180475:	89 ca                	mov    %ecx,%edx
  180477:	e8 34 ff ff ff       	call   1803b0 <_mvic_rte_set>
  18047c:	c3                   	ret    

0018047d <__irq_controller_isr_vector_get>:
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  18047d:	a1 10 01 e0 fe       	mov    0xfee00110,%eax
{
	/* In-service register value */
	int isr;

	isr = sys_read32(MVIC_ISR);
	if (unlikely(!isr)) {
  180482:	85 c0                	test   %eax,%eax
  180484:	74 0e                	je     180494 <__irq_controller_isr_vector_get+0x17>

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	unsigned int bitpos;

	__asm__ volatile (
  180486:	0f bd c0             	bsr    %eax,%eax
  180489:	75 05                	jne    180490 <__irq_controller_isr_vector_get+0x13>
  18048b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		return -1;
	}
	return 32 + (find_msb_set(isr) - 1);
  180490:	83 c0 20             	add    $0x20,%eax
  180493:	c3                   	ret    
	/* In-service register value */
	int isr;

	isr = sys_read32(MVIC_ISR);
	if (unlikely(!isr)) {
		return -1;
  180494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
	return 32 + (find_msb_set(isr) - 1);
}
  180499:	c3                   	ret    

0018049a <gpio_qmsi_callback>:
	      POST_KERNEL, CONFIG_GPIO_QMSI_INIT_PRIORITY, NULL);

#endif /* CONFIG_GPIO_QMSI_1 */

static void gpio_qmsi_callback(void *data, uint32_t status)
{
  18049a:	57                   	push   %edi
  18049b:	56                   	push   %esi
  18049c:	53                   	push   %ebx
	struct device *port = data;
	struct gpio_qmsi_runtime *context = port->driver_data;
  18049d:	8b 48 08             	mov    0x8(%eax),%ecx
	const uint32_t enabled_mask = context->pin_callbacks & status;

	if (enabled_mask) {
  1804a0:	89 d6                	mov    %edx,%esi
  1804a2:	23 71 08             	and    0x8(%ecx),%esi
  1804a5:	74 3c                	je     1804e3 <gpio_qmsi_callback+0x49>
  1804a7:	89 c7                	mov    %eax,%edi
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
  1804a9:	8b 19                	mov    (%ecx),%ebx
  1804ab:	eb 32                	jmp    1804df <gpio_qmsi_callback+0x45>
					uint32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
		if (cb->pin_mask & pins) {
  1804ad:	85 73 08             	test   %esi,0x8(%ebx)
  1804b0:	74 09                	je     1804bb <gpio_qmsi_callback+0x21>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
  1804b2:	89 f1                	mov    %esi,%ecx
  1804b4:	89 da                	mov    %ebx,%edx
  1804b6:	89 f8                	mov    %edi,%eax
  1804b8:	ff 53 04             	call   *0x4(%ebx)
					struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
  1804bb:	89 d8                	mov    %ebx,%eax
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
  1804bd:	85 db                	test   %ebx,%ebx
  1804bf:	74 04                	je     1804c5 <gpio_qmsi_callback+0x2b>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
  1804c1:	8b 13                	mov    (%ebx),%edx
  1804c3:	eb 02                	jmp    1804c7 <gpio_qmsi_callback+0x2d>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
  1804c5:	89 da                	mov    %ebx,%edx
  1804c7:	85 d2                	test   %edx,%edx
  1804c9:	74 0f                	je     1804da <gpio_qmsi_callback+0x40>
  1804cb:	85 c0                	test   %eax,%eax
  1804cd:	74 04                	je     1804d3 <gpio_qmsi_callback+0x39>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
  1804cf:	8b 1b                	mov    (%ebx),%ebx
  1804d1:	eb 0c                	jmp    1804df <gpio_qmsi_callback+0x45>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
  1804d3:	bb 00 00 00 00       	mov    $0x0,%ebx
  1804d8:	eb 05                	jmp    1804df <gpio_qmsi_callback+0x45>
  1804da:	bb 00 00 00 00       	mov    $0x0,%ebx
  1804df:	85 db                	test   %ebx,%ebx
  1804e1:	75 ca                	jne    1804ad <gpio_qmsi_callback+0x13>
		_gpio_fire_callbacks(&context->callbacks, port, enabled_mask);
	}
}
  1804e3:	5b                   	pop    %ebx
  1804e4:	5e                   	pop    %esi
  1804e5:	5f                   	pop    %edi
  1804e6:	c3                   	ret    

001804e7 <qmsi_write_bit>:

static void qmsi_write_bit(uint32_t *target, uint8_t bit, uint8_t value)
{
	if (value) {
  1804e7:	84 c9                	test   %cl,%cl
  1804e9:	74 07                	je     1804f2 <qmsi_write_bit+0xb>
		sys_set_bit((uintptr_t) target, bit);
  1804eb:	0f b6 d2             	movzbl %dl,%edx


static ALWAYS_INLINE
	void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	__asm__ volatile("btsl	%1, %0;\n\t"
  1804ee:	0f ab 10             	bts    %edx,(%eax)
  1804f1:	c3                   	ret    
	} else {
		sys_clear_bit((uintptr_t) target, bit);
  1804f2:	0f b6 d2             	movzbl %dl,%edx
}

static ALWAYS_INLINE
	void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	__asm__ volatile("btrl	%1, %0;\n\t"
  1804f5:	0f b3 10             	btr    %edx,(%eax)
  1804f8:	c3                   	ret    

001804f9 <gpio_qmsi_manage_callback>:
}

static inline int gpio_qmsi_manage_callback(struct device *port,
					    struct gpio_callback *callback,
					    bool set)
{
  1804f9:	57                   	push   %edi
  1804fa:	56                   	push   %esi
  1804fb:	53                   	push   %ebx
	struct gpio_qmsi_runtime *context = port->driver_data;
  1804fc:	8b 58 08             	mov    0x8(%eax),%ebx
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
  1804ff:	84 c9                	test   %cl,%cl
  180501:	74 11                	je     180514 <gpio_qmsi_manage_callback+0x1b>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
  180503:	8b 03                	mov    (%ebx),%eax
  180505:	89 02                	mov    %eax,(%edx)
	list->head = node;
  180507:	89 13                	mov    %edx,(%ebx)

	if (!list->tail) {
  180509:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  18050d:	75 4c                	jne    18055b <gpio_qmsi_manage_callback+0x62>
		list->tail = list->head;
  18050f:	89 53 04             	mov    %edx,0x4(%ebx)
  180512:	eb 47                	jmp    18055b <gpio_qmsi_manage_callback+0x62>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
  180514:	89 d7                	mov    %edx,%edi
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
  180516:	8b 03                	mov    (%ebx),%eax
 * @param node A pointer on the node to remove from the list
 */
static inline void sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
  180518:	be 00 00 00 00       	mov    $0x0,%esi
  18051d:	eb 38                	jmp    180557 <gpio_qmsi_manage_callback+0x5e>
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
		if (test == node) {
  18051f:	39 c7                	cmp    %eax,%edi
  180521:	75 26                	jne    180549 <gpio_qmsi_manage_callback+0x50>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
  180523:	85 f6                	test   %esi,%esi
  180525:	75 0e                	jne    180535 <gpio_qmsi_manage_callback+0x3c>
		list->head = node->next;
  180527:	8b 02                	mov    (%edx),%eax
  180529:	89 03                	mov    %eax,(%ebx)

		/* Was node also the tail? */
		if (list->tail == node) {
  18052b:	3b 53 04             	cmp    0x4(%ebx),%edx
  18052e:	75 11                	jne    180541 <gpio_qmsi_manage_callback+0x48>
			list->tail = list->head;
  180530:	89 43 04             	mov    %eax,0x4(%ebx)
  180533:	eb 0c                	jmp    180541 <gpio_qmsi_manage_callback+0x48>
		}
	} else {
		prev_node->next = node->next;
  180535:	8b 02                	mov    (%edx),%eax
  180537:	89 06                	mov    %eax,(%esi)

		/* Was node the tail? */
		if (list->tail == node) {
  180539:	3b 53 04             	cmp    0x4(%ebx),%edx
  18053c:	75 03                	jne    180541 <gpio_qmsi_manage_callback+0x48>
			list->tail = prev_node;
  18053e:	89 73 04             	mov    %esi,0x4(%ebx)
		}
	}

	node->next = NULL;
  180541:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  180547:	eb 12                	jmp    18055b <gpio_qmsi_manage_callback+0x62>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
  180549:	85 c0                	test   %eax,%eax
  18054b:	74 04                	je     180551 <gpio_qmsi_manage_callback+0x58>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
  18054d:	8b 08                	mov    (%eax),%ecx
  18054f:	eb 02                	jmp    180553 <gpio_qmsi_manage_callback+0x5a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
  180551:	89 c1                	mov    %eax,%ecx
		if (test == node) {
			sys_slist_remove(list, prev, node);
			break;
		}

		prev = test;
  180553:	89 c6                	mov    %eax,%esi
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
  180555:	89 c8                	mov    %ecx,%eax
  180557:	85 c0                	test   %eax,%eax
  180559:	75 c4                	jne    18051f <gpio_qmsi_manage_callback+0x26>

	_gpio_manage_callback(&context->callbacks, callback, set);

	return 0;
}
  18055b:	b8 00 00 00 00       	mov    $0x0,%eax
  180560:	5b                   	pop    %ebx
  180561:	5e                   	pop    %esi
  180562:	5f                   	pop    %edi
  180563:	c3                   	ret    

00180564 <gpio_qmsi_enable_callback>:

static inline int gpio_qmsi_enable_callback(struct device *port,
					    int access_op, uint32_t pin)
{
	struct gpio_qmsi_runtime *context = port->driver_data;
  180564:	8b 40 08             	mov    0x8(%eax),%eax

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_take(RP_GET(port), K_FOREVER);
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
  180567:	85 d2                	test   %edx,%edx
  180569:	75 0c                	jne    180577 <gpio_qmsi_enable_callback+0x13>
		context->pin_callbacks |= BIT(pin);
  18056b:	ba 01 00 00 00       	mov    $0x1,%edx
  180570:	d3 e2                	shl    %cl,%edx
  180572:	09 50 08             	or     %edx,0x8(%eax)
  180575:	eb 07                	jmp    18057e <gpio_qmsi_enable_callback+0x1a>
	} else {
		context->pin_callbacks = 0xffffffff;
  180577:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_give(RP_GET(port));
	}
	return 0;
}
  18057e:	b8 00 00 00 00       	mov    $0x0,%eax
  180583:	c3                   	ret    

00180584 <gpio_qmsi_disable_callback>:

static inline int gpio_qmsi_disable_callback(struct device *port,
					     int access_op, uint32_t pin)
{
	struct gpio_qmsi_runtime *context = port->driver_data;
  180584:	8b 40 08             	mov    0x8(%eax),%eax

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_take(RP_GET(port), K_FOREVER);
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
  180587:	85 d2                	test   %edx,%edx
  180589:	75 0e                	jne    180599 <gpio_qmsi_disable_callback+0x15>
		context->pin_callbacks &= ~BIT(pin);
  18058b:	ba 01 00 00 00       	mov    $0x1,%edx
  180590:	d3 e2                	shl    %cl,%edx
  180592:	f7 d2                	not    %edx
  180594:	21 50 08             	and    %edx,0x8(%eax)
  180597:	eb 07                	jmp    1805a0 <gpio_qmsi_disable_callback+0x1c>
	} else {
		context->pin_callbacks = 0;
  180599:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_give(RP_GET(port));
	}

	return 0;
}
  1805a0:	b8 00 00 00 00       	mov    $0x0,%eax
  1805a5:	c3                   	ret    

001805a6 <gpio_qmsi_get_pending_int>:

static uint32_t gpio_qmsi_get_pending_int(struct device *dev)
{
	const struct gpio_qmsi_config *gpio_config = dev->config->config_info;
  1805a6:	8b 00                	mov    (%eax),%eax
  1805a8:	8b 40 08             	mov    0x8(%eax),%eax
	qm_gpio_t gpio = gpio_config->gpio;
  1805ab:	8b 00                	mov    (%eax),%eax

	return QM_GPIO[gpio]->gpio_intstatus;
  1805ad:	8b 04 85 18 00 28 00 	mov    0x280018(,%eax,4),%eax
  1805b4:	8b 40 40             	mov    0x40(%eax),%eax
}
  1805b7:	c3                   	ret    

001805b8 <gpio_qmsi_read>:
	return 0;
}

static inline int gpio_qmsi_read(struct device *port,
				 int access_op, uint32_t pin, uint32_t *value)
{
  1805b8:	83 ec 04             	sub    $0x4,%esp
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  1805bb:	8b 00                	mov    (%eax),%eax
  1805bd:	8b 40 08             	mov    0x8(%eax),%eax
	qm_gpio_t gpio = gpio_config->gpio;
  1805c0:	8b 00                	mov    (%eax),%eax
	qm_gpio_state_t state;

	if (access_op == GPIO_ACCESS_BY_PIN) {
  1805c2:	85 d2                	test   %edx,%edx
  1805c4:	75 15                	jne    1805db <gpio_qmsi_read+0x23>
		qm_gpio_read_pin(gpio, pin, &state);
  1805c6:	0f b6 d1             	movzbl %cl,%edx
  1805c9:	89 e1                	mov    %esp,%ecx
  1805cb:	e8 3e 0a 00 00       	call   18100e <qm_gpio_read_pin>
		*value = state;
  1805d0:	8b 04 24             	mov    (%esp),%eax
  1805d3:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  1805d7:	89 01                	mov    %eax,(%ecx)
  1805d9:	eb 09                	jmp    1805e4 <gpio_qmsi_read+0x2c>
	} else {
		qm_gpio_read_port(gpio, (uint32_t *const) value);
  1805db:	8b 54 24 08          	mov    0x8(%esp),%edx
  1805df:	e8 89 0a 00 00       	call   18106d <qm_gpio_read_port>
	}

	return 0;
}
  1805e4:	b8 00 00 00 00       	mov    $0x0,%eax
  1805e9:	83 c4 04             	add    $0x4,%esp
  1805ec:	c3                   	ret    

001805ed <gpio_qmsi_write>:
}

static inline int gpio_qmsi_write(struct device *port,
				  int access_op, uint32_t pin, uint32_t value)
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  1805ed:	8b 00                	mov    (%eax),%eax
  1805ef:	8b 40 08             	mov    0x8(%eax),%eax
	qm_gpio_t gpio = gpio_config->gpio;
  1805f2:	8b 00                	mov    (%eax),%eax

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_take(RP_GET(port), K_FOREVER);
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
  1805f4:	85 d2                	test   %edx,%edx
  1805f6:	75 1b                	jne    180613 <gpio_qmsi_write+0x26>
		if (value) {
  1805f8:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
  1805fd:	74 0a                	je     180609 <gpio_qmsi_write+0x1c>
			qm_gpio_set_pin(gpio, pin);
  1805ff:	0f b6 d1             	movzbl %cl,%edx
  180602:	e8 24 0a 00 00       	call   18102b <qm_gpio_set_pin>
  180607:	eb 13                	jmp    18061c <gpio_qmsi_write+0x2f>
		} else {
			qm_gpio_clear_pin(gpio, pin);
  180609:	0f b6 d1             	movzbl %cl,%edx
  18060c:	e8 3a 0a 00 00       	call   18104b <qm_gpio_clear_pin>
  180611:	eb 09                	jmp    18061c <gpio_qmsi_write+0x2f>
		}
	} else {
		qm_gpio_write_port(gpio, value);
  180613:	8b 54 24 04          	mov    0x4(%esp),%edx
  180617:	e8 63 0a 00 00       	call   18107f <qm_gpio_write_port>

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_give(RP_GET(port));
	}
	return 0;
}
  18061c:	b8 00 00 00 00       	mov    $0x0,%eax
  180621:	c3                   	ret    

00180622 <gpio_qmsi_init>:
	.get_pending_int = gpio_qmsi_get_pending_int,
};

static int gpio_qmsi_init(struct device *port)
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  180622:	8b 10                	mov    (%eax),%edx
  180624:	8b 52 08             	mov    0x8(%edx),%edx
	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_init(RP_GET(port), 0, UINT_MAX);
		k_sem_give(RP_GET(port));
	}

	switch (gpio_config->gpio) {
  180627:	83 3a 00             	cmpl   $0x0,(%edx)
  18062a:	75 46                	jne    180672 <gpio_qmsi_init+0x50>
	.disable_callback = gpio_qmsi_disable_callback,
	.get_pending_int = gpio_qmsi_get_pending_int,
};

static int gpio_qmsi_init(struct device *port)
{
  18062c:	53                   	push   %ebx
  18062d:	89 c3                	mov    %eax,%ebx
		k_sem_give(RP_GET(port));
	}

	switch (gpio_config->gpio) {
	case QM_GPIO_0:
		clk_periph_enable(CLK_PERIPH_GPIO_REGISTER |
  18062f:	b8 82 21 00 00       	mov    $0x2182,%eax
  180634:	e8 14 09 00 00       	call   180f4d <clk_periph_enable>
  180639:	b9 00 80 00 00       	mov    $0x8000,%ecx
  18063e:	ba 0f 00 00 00       	mov    $0xf,%edx
  180643:	b8 2f 00 00 00       	mov    $0x2f,%eax
  180648:	e8 1b fe ff ff       	call   180468 <__irq_controller_irq_config>
				  CLK_PERIPH_GPIO_DB |
				  CLK_PERIPH_CLK);
		IRQ_CONNECT(IRQ_GET_NUMBER(QM_IRQ_GPIO_0_INT),
			    CONFIG_GPIO_QMSI_0_IRQ_PRI, qm_gpio_0_isr, 0,
			    IOAPIC_LEVEL | IOAPIC_HIGH);
		irq_enable(IRQ_GET_NUMBER(QM_IRQ_GPIO_0_INT));
  18064d:	b8 0f 00 00 00       	mov    $0xf,%eax
  180652:	e8 ec fd ff ff       	call   180443 <_arch_irq_enable>
		QM_IR_UNMASK_INTERRUPTS(QM_INTERRUPT_ROUTER->gpio_0_int_mask);
  180657:	a1 6c 04 80 b0       	mov    0xb080046c,%eax
  18065c:	83 e0 fe             	and    $0xfffffffe,%eax
  18065f:	a3 6c 04 80 b0       	mov    %eax,0xb080046c
		return -EIO;
	}

	gpio_qmsi_set_power_state(port, DEVICE_PM_ACTIVE_STATE);

	port->driver_api = &api_funcs;
  180664:	c7 43 04 54 24 18 00 	movl   $0x182454,0x4(%ebx)
	return 0;
  18066b:	b8 00 00 00 00       	mov    $0x0,%eax
  180670:	eb 06                	jmp    180678 <gpio_qmsi_init+0x56>
		QM_IR_UNMASK_INTERRUPTS(
			QM_INTERRUPT_ROUTER->aon_gpio_0_int_mask);
		break;
#endif /* CONFIG_GPIO_QMSI_1 */
	default:
		return -EIO;
  180672:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  180677:	c3                   	ret    

	gpio_qmsi_set_power_state(port, DEVICE_PM_ACTIVE_STATE);

	port->driver_api = &api_funcs;
	return 0;
}
  180678:	5b                   	pop    %ebx
  180679:	c3                   	ret    

0018067a <gpio_qmsi_config>:
	}
}

static inline int gpio_qmsi_config(struct device *port,
				   int access_op, uint32_t pin, int flags)
{
  18067a:	55                   	push   %ebp
  18067b:	57                   	push   %edi
  18067c:	56                   	push   %esi
  18067d:	53                   	push   %ebx
  18067e:	83 ec 28             	sub    $0x28,%esp
	/* If the pin/port is set to receive interrupts, make sure the pin
	   is an input */
	if ((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) {
  180681:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
  180685:	83 e3 03             	and    $0x3,%ebx
  180688:	83 fb 03             	cmp    $0x3,%ebx
  18068b:	0f 84 10 02 00 00    	je     1808a1 <gpio_qmsi_config+0x227>
  180691:	89 ce                	mov    %ecx,%esi
  180693:	89 c5                	mov    %eax,%ebp
		return -EINVAL;
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
  180695:	85 d2                	test   %edx,%edx
  180697:	0f 85 f1 00 00 00    	jne    18078e <gpio_qmsi_config+0x114>
	}
}

static inline void qmsi_pin_config(struct device *port, uint32_t pin, int flags)
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  18069d:	8b 00                	mov    (%eax),%eax
  18069f:	8b 40 08             	mov    0x8(%eax),%eax
	qm_gpio_t gpio = gpio_config->gpio;
  1806a2:	8b 18                	mov    (%eax),%ebx
	qm_gpio_port_config_t cfg = { 0 };
  1806a4:	8d 7c 24 08          	lea    0x8(%esp),%edi
  1806a8:	b9 08 00 00 00       	mov    $0x8,%ecx
  1806ad:	b8 00 00 00 00       	mov    $0x0,%eax
  1806b2:	f3 ab                	rep stos %eax,%es:(%edi)

	cfg.direction = QM_GPIO[gpio]->gpio_swporta_ddr;
  1806b4:	8b 04 9d 18 00 28 00 	mov    0x280018(,%ebx,4),%eax
  1806bb:	8b 50 04             	mov    0x4(%eax),%edx
  1806be:	89 54 24 08          	mov    %edx,0x8(%esp)
	cfg.int_en = QM_GPIO[gpio]->gpio_inten;
  1806c2:	8b 50 30             	mov    0x30(%eax),%edx
  1806c5:	89 54 24 0c          	mov    %edx,0xc(%esp)
	cfg.int_type = QM_GPIO[gpio]->gpio_inttype_level;
  1806c9:	8b 50 38             	mov    0x38(%eax),%edx
  1806cc:	89 54 24 10          	mov    %edx,0x10(%esp)
	cfg.int_polarity = QM_GPIO[gpio]->gpio_int_polarity;
  1806d0:	8b 50 3c             	mov    0x3c(%eax),%edx
  1806d3:	89 54 24 14          	mov    %edx,0x14(%esp)
	cfg.int_debounce = QM_GPIO[gpio]->gpio_debounce;
  1806d7:	8b 50 48             	mov    0x48(%eax),%edx
  1806da:	89 54 24 18          	mov    %edx,0x18(%esp)
	cfg.int_bothedge = QM_GPIO[gpio]->gpio_int_bothedge;
  1806de:	8b 40 68             	mov    0x68(%eax),%eax
  1806e1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	cfg.callback = gpio_qmsi_callback;
  1806e5:	c7 44 24 20 9a 04 18 	movl   $0x18049a,0x20(%esp)
  1806ec:	00 
	cfg.callback_data = port;
  1806ed:	89 6c 24 24          	mov    %ebp,0x24(%esp)

	qmsi_write_bit(&cfg.direction, pin, (flags & GPIO_DIR_MASK));
  1806f1:	89 f0                	mov    %esi,%eax
  1806f3:	0f b6 f0             	movzbl %al,%esi
  1806f6:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
  1806fa:	83 e1 01             	and    $0x1,%ecx
  1806fd:	89 f2                	mov    %esi,%edx
  1806ff:	8d 44 24 08          	lea    0x8(%esp),%eax
  180703:	e8 df fd ff ff       	call   1804e7 <qmsi_write_bit>

	if (flags & GPIO_INT) {
  180708:	f6 44 24 3c 02       	testb  $0x2,0x3c(%esp)
  18070d:	74 5a                	je     180769 <gpio_qmsi_config+0xef>
		qmsi_write_bit(&cfg.int_type, pin, (flags & GPIO_INT_EDGE));
  18070f:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
  180713:	83 e1 20             	and    $0x20,%ecx
  180716:	89 f2                	mov    %esi,%edx
  180718:	8d 44 24 10          	lea    0x10(%esp),%eax
  18071c:	e8 c6 fd ff ff       	call   1804e7 <qmsi_write_bit>
		qmsi_write_bit(&cfg.int_polarity, pin,
  180721:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
  180725:	83 e1 04             	and    $0x4,%ecx
  180728:	89 f2                	mov    %esi,%edx
  18072a:	8d 44 24 14          	lea    0x14(%esp),%eax
  18072e:	e8 b4 fd ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_ACTIVE_HIGH));
		qmsi_write_bit(&cfg.int_debounce, pin,
  180733:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
  180737:	83 e1 10             	and    $0x10,%ecx
  18073a:	89 f2                	mov    %esi,%edx
  18073c:	8d 44 24 18          	lea    0x18(%esp),%eax
  180740:	e8 a2 fd ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_DEBOUNCE));
		qmsi_write_bit(&cfg.int_bothedge, pin,
  180745:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
  180749:	83 e1 40             	and    $0x40,%ecx
  18074c:	89 f2                	mov    %esi,%edx
  18074e:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  180752:	e8 90 fd ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_DOUBLE_EDGE));
		qmsi_write_bit(&cfg.int_en, pin, 1);
  180757:	b9 01 00 00 00       	mov    $0x1,%ecx
  18075c:	89 f2                	mov    %esi,%edx
  18075e:	8d 44 24 0c          	lea    0xc(%esp),%eax
  180762:	e8 80 fd ff ff       	call   1804e7 <qmsi_write_bit>
  180767:	eb 10                	jmp    180779 <gpio_qmsi_config+0xff>
	} else {
		qmsi_write_bit(&cfg.int_en, pin, 0);
  180769:	b9 00 00 00 00       	mov    $0x0,%ecx
  18076e:	89 f2                	mov    %esi,%edx
  180770:	8d 44 24 0c          	lea    0xc(%esp),%eax
  180774:	e8 6e fd ff ff       	call   1804e7 <qmsi_write_bit>

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_take(RP_GET(port), K_FOREVER);
	}

	qm_gpio_set_config(gpio, &cfg);
  180779:	8d 54 24 08          	lea    0x8(%esp),%edx
  18077d:	89 d8                	mov    %ebx,%eax
  18077f:	e8 2c 08 00 00       	call   180fb0 <qm_gpio_set_config>
	if (access_op == GPIO_ACCESS_BY_PIN) {
		qmsi_pin_config(port, pin, flags);
	} else {
		qmsi_port_config(port, flags);
	}
	return 0;
  180784:	b8 00 00 00 00       	mov    $0x0,%eax
  180789:	e9 18 01 00 00       	jmp    1808a6 <gpio_qmsi_config+0x22c>
	}
}

static inline void qmsi_port_config(struct device *port, int flags)
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  18078e:	8b 00                	mov    (%eax),%eax
  180790:	8b 40 08             	mov    0x8(%eax),%eax
	uint8_t num_pins = gpio_config->num_pins;
  180793:	8a 40 04             	mov    0x4(%eax),%al
  180796:	88 44 24 07          	mov    %al,0x7(%esp)
	int i;

	for (i = 0; i < num_pins; i++) {
  18079a:	bb 00 00 00 00       	mov    $0x0,%ebx
  18079f:	89 1c 24             	mov    %ebx,(%esp)
  1807a2:	8b 74 24 3c          	mov    0x3c(%esp),%esi
  1807a6:	e9 e1 00 00 00       	jmp    18088c <gpio_qmsi_config+0x212>
	}
}

static inline void qmsi_pin_config(struct device *port, uint32_t pin, int flags)
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
  1807ab:	8b 45 00             	mov    0x0(%ebp),%eax
  1807ae:	8b 40 08             	mov    0x8(%eax),%eax
	qm_gpio_t gpio = gpio_config->gpio;
  1807b1:	8b 18                	mov    (%eax),%ebx
	qm_gpio_port_config_t cfg = { 0 };
  1807b3:	8d 7c 24 08          	lea    0x8(%esp),%edi
  1807b7:	b9 08 00 00 00       	mov    $0x8,%ecx
  1807bc:	b8 00 00 00 00       	mov    $0x0,%eax
  1807c1:	f3 ab                	rep stos %eax,%es:(%edi)

	cfg.direction = QM_GPIO[gpio]->gpio_swporta_ddr;
  1807c3:	8b 04 9d 18 00 28 00 	mov    0x280018(,%ebx,4),%eax
  1807ca:	8b 50 04             	mov    0x4(%eax),%edx
  1807cd:	89 54 24 08          	mov    %edx,0x8(%esp)
	cfg.int_en = QM_GPIO[gpio]->gpio_inten;
  1807d1:	8b 50 30             	mov    0x30(%eax),%edx
  1807d4:	89 54 24 0c          	mov    %edx,0xc(%esp)
	cfg.int_type = QM_GPIO[gpio]->gpio_inttype_level;
  1807d8:	8b 50 38             	mov    0x38(%eax),%edx
  1807db:	89 54 24 10          	mov    %edx,0x10(%esp)
	cfg.int_polarity = QM_GPIO[gpio]->gpio_int_polarity;
  1807df:	8b 50 3c             	mov    0x3c(%eax),%edx
  1807e2:	89 54 24 14          	mov    %edx,0x14(%esp)
	cfg.int_debounce = QM_GPIO[gpio]->gpio_debounce;
  1807e6:	8b 50 48             	mov    0x48(%eax),%edx
  1807e9:	89 54 24 18          	mov    %edx,0x18(%esp)
	cfg.int_bothedge = QM_GPIO[gpio]->gpio_int_bothedge;
  1807ed:	8b 40 68             	mov    0x68(%eax),%eax
  1807f0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	cfg.callback = gpio_qmsi_callback;
  1807f4:	c7 44 24 20 9a 04 18 	movl   $0x18049a,0x20(%esp)
  1807fb:	00 
	cfg.callback_data = port;
  1807fc:	89 6c 24 24          	mov    %ebp,0x24(%esp)

	qmsi_write_bit(&cfg.direction, pin, (flags & GPIO_DIR_MASK));
  180800:	0f b6 3c 24          	movzbl (%esp),%edi
  180804:	89 f1                	mov    %esi,%ecx
  180806:	83 e1 01             	and    $0x1,%ecx
  180809:	89 fa                	mov    %edi,%edx
  18080b:	8d 44 24 08          	lea    0x8(%esp),%eax
  18080f:	e8 d3 fc ff ff       	call   1804e7 <qmsi_write_bit>

	if (flags & GPIO_INT) {
  180814:	f7 c6 02 00 00 00    	test   $0x2,%esi
  18081a:	74 52                	je     18086e <gpio_qmsi_config+0x1f4>
		qmsi_write_bit(&cfg.int_type, pin, (flags & GPIO_INT_EDGE));
  18081c:	89 f1                	mov    %esi,%ecx
  18081e:	83 e1 20             	and    $0x20,%ecx
  180821:	89 fa                	mov    %edi,%edx
  180823:	8d 44 24 10          	lea    0x10(%esp),%eax
  180827:	e8 bb fc ff ff       	call   1804e7 <qmsi_write_bit>
		qmsi_write_bit(&cfg.int_polarity, pin,
  18082c:	89 f1                	mov    %esi,%ecx
  18082e:	83 e1 04             	and    $0x4,%ecx
  180831:	89 fa                	mov    %edi,%edx
  180833:	8d 44 24 14          	lea    0x14(%esp),%eax
  180837:	e8 ab fc ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_ACTIVE_HIGH));
		qmsi_write_bit(&cfg.int_debounce, pin,
  18083c:	89 f1                	mov    %esi,%ecx
  18083e:	83 e1 10             	and    $0x10,%ecx
  180841:	89 fa                	mov    %edi,%edx
  180843:	8d 44 24 18          	lea    0x18(%esp),%eax
  180847:	e8 9b fc ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_DEBOUNCE));
		qmsi_write_bit(&cfg.int_bothedge, pin,
  18084c:	89 f1                	mov    %esi,%ecx
  18084e:	83 e1 40             	and    $0x40,%ecx
  180851:	89 fa                	mov    %edi,%edx
  180853:	8d 44 24 1c          	lea    0x1c(%esp),%eax
  180857:	e8 8b fc ff ff       	call   1804e7 <qmsi_write_bit>
			       (flags & GPIO_INT_DOUBLE_EDGE));
		qmsi_write_bit(&cfg.int_en, pin, 1);
  18085c:	b9 01 00 00 00       	mov    $0x1,%ecx
  180861:	89 fa                	mov    %edi,%edx
  180863:	8d 44 24 0c          	lea    0xc(%esp),%eax
  180867:	e8 7b fc ff ff       	call   1804e7 <qmsi_write_bit>
  18086c:	eb 10                	jmp    18087e <gpio_qmsi_config+0x204>
	} else {
		qmsi_write_bit(&cfg.int_en, pin, 0);
  18086e:	b9 00 00 00 00       	mov    $0x0,%ecx
  180873:	89 fa                	mov    %edi,%edx
  180875:	8d 44 24 0c          	lea    0xc(%esp),%eax
  180879:	e8 69 fc ff ff       	call   1804e7 <qmsi_write_bit>

	if (IS_ENABLED(CONFIG_GPIO_QMSI_API_REENTRANCY)) {
		k_sem_take(RP_GET(port), K_FOREVER);
	}

	qm_gpio_set_config(gpio, &cfg);
  18087e:	8d 54 24 08          	lea    0x8(%esp),%edx
  180882:	89 d8                	mov    %ebx,%eax
  180884:	e8 27 07 00 00       	call   180fb0 <qm_gpio_set_config>
{
	const struct gpio_qmsi_config *gpio_config = port->config->config_info;
	uint8_t num_pins = gpio_config->num_pins;
	int i;

	for (i = 0; i < num_pins; i++) {
  180889:	ff 04 24             	incl   (%esp)
  18088c:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
  180891:	39 04 24             	cmp    %eax,(%esp)
  180894:	0f 8c 11 ff ff ff    	jl     1807ab <gpio_qmsi_config+0x131>
	if (access_op == GPIO_ACCESS_BY_PIN) {
		qmsi_pin_config(port, pin, flags);
	} else {
		qmsi_port_config(port, flags);
	}
	return 0;
  18089a:	b8 00 00 00 00       	mov    $0x0,%eax
  18089f:	eb 05                	jmp    1808a6 <gpio_qmsi_config+0x22c>
				   int access_op, uint32_t pin, int flags)
{
	/* If the pin/port is set to receive interrupts, make sure the pin
	   is an input */
	if ((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) {
		return -EINVAL;
  1808a1:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
		qmsi_pin_config(port, pin, flags);
	} else {
		qmsi_port_config(port, flags);
	}
	return 0;
}
  1808a6:	83 c4 28             	add    $0x28,%esp
  1808a9:	5b                   	pop    %ebx
  1808aa:	5e                   	pop    %esi
  1808ab:	5f                   	pop    %edi
  1808ac:	5d                   	pop    %ebp
  1808ad:	c3                   	ret    

001808ae <pinmux_get>:
	return qm_pmux_select(pin, func) == 0 ? 0 : -EIO;
}

static int pinmux_get(struct device *dev, uint32_t pin,
			  uint32_t *func)
{
  1808ae:	56                   	push   %esi
  1808af:	53                   	push   %ebx
  1808b0:	89 cb                	mov    %ecx,%ebx
	/*
	 * pinmux control registers are 32-bit wide, but each pin requires
	 * 2 bits to set the mode (A, B, C, or D).  As such we only get 16
	 * pins per register.
	 */
	uint32_t reg_offset = pin >> 4;
  1808b2:	89 d6                	mov    %edx,%esi
  1808b4:	c1 ee 04             	shr    $0x4,%esi

	/* The pin offset within the register */
	uint32_t pin_no = pin % 16;
  1808b7:	83 e2 0f             	and    $0xf,%edx

	/*
	 * MASK_2_BITS (the value of which is 3) is used because there are
	 * 2 bits for the mode of each pin.
	 */
	uint32_t pin_mask = MASK_2_BITS << (pin_no << 1);
  1808ba:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
  1808bd:	b8 03 00 00 00       	mov    $0x3,%eax
  1808c2:	d3 e0                	shl    %cl,%eax
	uint32_t mode_mask = *mux_register & pin_mask;
  1808c4:	8b 14 b5 30 09 80 b0 	mov    -0x4f7ff6d0(,%esi,4),%edx
  1808cb:	21 d0                	and    %edx,%eax
	uint32_t mode = mode_mask >> (pin_no << 1);
  1808cd:	d3 e8                	shr    %cl,%eax

	*func = mode;
  1808cf:	89 03                	mov    %eax,(%ebx)

	return 0;
}
  1808d1:	b8 00 00 00 00       	mov    $0x0,%eax
  1808d6:	5b                   	pop    %ebx
  1808d7:	5e                   	pop    %esi
  1808d8:	c3                   	ret    

001808d9 <pinmux_initialize>:
};

static int pinmux_initialize(struct device *port)
{
	return 0;
}
  1808d9:	b8 00 00 00 00       	mov    $0x0,%eax
  1808de:	c3                   	ret    

001808df <pinmux_input>:
	return qm_pmux_pullup_en(pin, func) == 0 ? 0 : -EIO;
}

static int pinmux_input(struct device *dev, uint32_t pin,
			    uint8_t func)
{
  1808df:	89 d0                	mov    %edx,%eax
	ARG_UNUSED(dev);

	return qm_pmux_input_en(pin, func) == 0 ? 0 : -EIO;
  1808e1:	84 c9                	test   %cl,%cl
  1808e3:	0f 95 c2             	setne  %dl
  1808e6:	0f b6 d2             	movzbl %dl,%edx
  1808e9:	e8 4d 09 00 00       	call   18123b <qm_pmux_input_en>
  1808ee:	85 c0                	test   %eax,%eax
  1808f0:	74 05                	je     1808f7 <pinmux_input+0x18>
  1808f2:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  1808f7:	c3                   	ret    

001808f8 <pinmux_pullup>:
	return 0;
}

static int pinmux_pullup(struct device *dev, uint32_t pin,
			     uint8_t func)
{
  1808f8:	89 d0                	mov    %edx,%eax
	ARG_UNUSED(dev);

	return qm_pmux_pullup_en(pin, func) == 0 ? 0 : -EIO;
  1808fa:	84 c9                	test   %cl,%cl
  1808fc:	0f 95 c2             	setne  %dl
  1808ff:	0f b6 d2             	movzbl %dl,%edx
  180902:	e8 95 09 00 00       	call   18129c <qm_pmux_pullup_en>
  180907:	85 c0                	test   %eax,%eax
  180909:	74 05                	je     180910 <pinmux_pullup+0x18>
  18090b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  180910:	c3                   	ret    

00180911 <pinmux_set>:

#define MASK_2_BITS	0x3

static int pinmux_set(struct device *dev, uint32_t pin,
			  uint32_t func)
{
  180911:	89 d0                	mov    %edx,%eax
  180913:	89 ca                	mov    %ecx,%edx
	ARG_UNUSED(dev);

	return qm_pmux_select(pin, func) == 0 ? 0 : -EIO;
  180915:	e8 c9 08 00 00       	call   1811e3 <qm_pmux_select>
  18091a:	85 c0                	test   %eax,%eax
  18091c:	74 05                	je     180923 <pinmux_set+0x12>
  18091e:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  180923:	c3                   	ret    

00180924 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
  180924:	53                   	push   %ebx
	while ((*s1 == *s2) && (*s1 != '\0')) {
  180925:	eb 02                	jmp    180929 <strcmp+0x5>
		s1++;
  180927:	40                   	inc    %eax
		s2++;
  180928:	42                   	inc    %edx
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
  180929:	8a 08                	mov    (%eax),%cl
  18092b:	8a 1a                	mov    (%edx),%bl
  18092d:	38 d9                	cmp    %bl,%cl
  18092f:	75 04                	jne    180935 <strcmp+0x11>
  180931:	84 c9                	test   %cl,%cl
  180933:	75 f2                	jne    180927 <strcmp+0x3>
		s1++;
		s2++;
	}

	return *s1 - *s2;
  180935:	0f be c1             	movsbl %cl,%eax
  180938:	0f be db             	movsbl %bl,%ebx
  18093b:	29 d8                	sub    %ebx,%eax
}
  18093d:	5b                   	pop    %ebx
  18093e:	c3                   	ret    

0018093f <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
  18093f:	b8 00 00 00 00       	mov    $0x0,%eax
  180944:	c3                   	ret    

00180945 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
  180945:	8b 0a                	mov    (%edx),%ecx
  180947:	41                   	inc    %ecx
  180948:	89 0a                	mov    %ecx,(%edx)
	return _char_out(c);
  18094a:	ff 15 10 00 28 00    	call   *0x280010
}
  180950:	c3                   	ret    

00180951 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
  180951:	55                   	push   %ebp
  180952:	57                   	push   %edi
  180953:	56                   	push   %esi
  180954:	53                   	push   %ebx
  180955:	83 ec 08             	sub    $0x8,%esp
  180958:	89 c5                	mov    %eax,%ebp
  18095a:	89 14 24             	mov    %edx,(%esp)
  18095d:	89 cf                	mov    %ecx,%edi
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
  18095f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  180966:	00 
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
  180967:	bb 00 00 00 00       	mov    $0x0,%ebx
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
  18096c:	ba 08 00 00 00       	mov    $0x8,%edx
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
  180971:	eb 65                	jmp    1809d8 <_printk_hex_ulong+0x87>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
  180973:	8d 72 ff             	lea    -0x1(%edx),%esi
  180976:	8d 0c b5 00 00 00 00 	lea    0x0(,%esi,4),%ecx
  18097d:	89 f8                	mov    %edi,%eax
  18097f:	d3 e8                	shr    %cl,%eax

		if (nibble || found_largest_digit || size == 1) {
  180981:	83 e0 0f             	and    $0xf,%eax
  180984:	0f 95 c1             	setne  %cl
  180987:	08 d9                	or     %bl,%cl
  180989:	75 05                	jne    180990 <_printk_hex_ulong+0x3f>
  18098b:	83 fa 01             	cmp    $0x1,%edx
  18098e:	75 1b                	jne    1809ab <_printk_hex_ulong+0x5a>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
  180990:	3c 09                	cmp    $0x9,%al
  180992:	7e 04                	jle    180998 <_printk_hex_ulong+0x47>
  180994:	b2 57                	mov    $0x57,%dl
  180996:	eb 02                	jmp    18099a <_printk_hex_ulong+0x49>
  180998:	b2 30                	mov    $0x30,%dl
  18099a:	01 d0                	add    %edx,%eax
			out((int)nibble, ctx);
  18099c:	0f be c0             	movsbl %al,%eax
  18099f:	8b 14 24             	mov    (%esp),%edx
  1809a2:	ff d5                	call   *%ebp

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
  1809a4:	bb 01 00 00 00       	mov    $0x1,%ebx
			nibble += nibble > 9 ? 87 : 48;
			out((int)nibble, ctx);
			continue;
  1809a9:	eb 2b                	jmp    1809d6 <_printk_hex_ulong+0x85>
		}

		if (remaining-- <= min_width) {
  1809ab:	8b 44 24 04          	mov    0x4(%esp),%eax
  1809af:	8d 48 ff             	lea    -0x1(%eax),%ecx
  1809b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1809b6:	3b 44 24 20          	cmp    0x20(%esp),%eax
  1809ba:	7f 1a                	jg     1809d6 <_printk_hex_ulong+0x85>
			out((int)(pad_zero ? '0' : ' '), ctx);
  1809bc:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
  1809c1:	74 07                	je     1809ca <_printk_hex_ulong+0x79>
  1809c3:	b8 30 00 00 00       	mov    $0x30,%eax
  1809c8:	eb 05                	jmp    1809cf <_printk_hex_ulong+0x7e>
  1809ca:	b8 20 00 00 00       	mov    $0x20,%eax
  1809cf:	8b 14 24             	mov    (%esp),%edx
  1809d2:	ff d5                	call   *%ebp
  1809d4:	eb 00                	jmp    1809d6 <_printk_hex_ulong+0x85>

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
  1809d6:	89 f2                	mov    %esi,%edx
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
  1809d8:	85 d2                	test   %edx,%edx
  1809da:	75 97                	jne    180973 <_printk_hex_ulong+0x22>

		if (remaining-- <= min_width) {
			out((int)(pad_zero ? '0' : ' '), ctx);
		}
	}
}
  1809dc:	83 c4 08             	add    $0x8,%esp
  1809df:	5b                   	pop    %ebx
  1809e0:	5e                   	pop    %esi
  1809e1:	5f                   	pop    %edi
  1809e2:	5d                   	pop    %ebp
  1809e3:	c3                   	ret    

001809e4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
  1809e4:	55                   	push   %ebp
  1809e5:	57                   	push   %edi
  1809e6:	56                   	push   %esi
  1809e7:	53                   	push   %ebx
  1809e8:	83 ec 08             	sub    $0x8,%esp
  1809eb:	89 c5                	mov    %eax,%ebp
  1809ed:	89 54 24 04          	mov    %edx,0x4(%esp)
	unsigned long remainder = num;
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
  1809f1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
  1809f6:	7f 08                	jg     180a00 <_printk_dec_ulong+0x1c>
		min_width = 1;
  1809f8:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%esp)
  1809ff:	00 
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
  180a00:	89 0c 24             	mov    %ecx,(%esp)
  180a03:	bf 0a 00 00 00       	mov    $0xa,%edi
  180a08:	bb 00 00 00 00       	mov    $0x0,%ebx
  180a0d:	be ff c9 9a 3b       	mov    $0x3b9ac9ff,%esi
  180a12:	eb 65                	jmp    180a79 <_printk_dec_ulong+0x95>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
  180a14:	3b 34 24             	cmp    (%esp),%esi
  180a17:	0f 92 c0             	setb   %al
  180a1a:	08 d8                	or     %bl,%al
  180a1c:	74 1d                	je     180a3b <_printk_dec_ulong+0x57>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
  180a1e:	8d 4e 01             	lea    0x1(%esi),%ecx
  180a21:	8b 04 24             	mov    (%esp),%eax
  180a24:	ba 00 00 00 00       	mov    $0x0,%edx
  180a29:	f7 f1                	div    %ecx
  180a2b:	83 c0 30             	add    $0x30,%eax
  180a2e:	8b 54 24 04          	mov    0x4(%esp),%edx
  180a32:	ff d5                	call   *%ebp
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
  180a34:	bb 01 00 00 00       	mov    $0x1,%ebx
  180a39:	eb 1f                	jmp    180a5a <_printk_dec_ulong+0x76>
			out((int)((remainder / (pos + 1)) + 48), ctx);
		} else if (remaining <= min_width) {
  180a3b:	3b 7c 24 20          	cmp    0x20(%esp),%edi
  180a3f:	7f 19                	jg     180a5a <_printk_dec_ulong+0x76>
			out((int)(pad_zero ? '0' : ' '), ctx);
  180a41:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
  180a46:	74 07                	je     180a4f <_printk_dec_ulong+0x6b>
  180a48:	b8 30 00 00 00       	mov    $0x30,%eax
  180a4d:	eb 05                	jmp    180a54 <_printk_dec_ulong+0x70>
  180a4f:	b8 20 00 00 00       	mov    $0x20,%eax
  180a54:	8b 54 24 04          	mov    0x4(%esp),%edx
  180a58:	ff d5                	call   *%ebp
		}
		remaining--;
  180a5a:	4f                   	dec    %edi
		remainder %= (pos + 1);
  180a5b:	8d 4e 01             	lea    0x1(%esi),%ecx
  180a5e:	8b 04 24             	mov    (%esp),%eax
  180a61:	ba 00 00 00 00       	mov    $0x0,%edx
  180a66:	f7 f1                	div    %ecx
  180a68:	89 14 24             	mov    %edx,(%esp)
		pos /= 10;
  180a6b:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  180a70:	89 f0                	mov    %esi,%eax
  180a72:	f7 e2                	mul    %edx
  180a74:	89 d6                	mov    %edx,%esi
  180a76:	c1 ee 03             	shr    $0x3,%esi
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
  180a79:	83 fe 08             	cmp    $0x8,%esi
  180a7c:	77 96                	ja     180a14 <_printk_dec_ulong+0x30>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
  180a7e:	8b 04 24             	mov    (%esp),%eax
  180a81:	83 c0 30             	add    $0x30,%eax
  180a84:	8b 54 24 04          	mov    0x4(%esp),%edx
  180a88:	ff d5                	call   *%ebp
}
  180a8a:	83 c4 08             	add    $0x8,%esp
  180a8d:	5b                   	pop    %ebx
  180a8e:	5e                   	pop    %esi
  180a8f:	5f                   	pop    %edi
  180a90:	5d                   	pop    %ebp
  180a91:	c3                   	ret    

00180a92 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
  180a92:	a3 10 00 28 00       	mov    %eax,0x280010
  180a97:	c3                   	ret    

00180a98 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
  180a98:	55                   	push   %ebp
  180a99:	57                   	push   %edi
  180a9a:	56                   	push   %esi
  180a9b:	53                   	push   %ebx
  180a9c:	83 ec 10             	sub    $0x10,%esp
  180a9f:	89 c7                	mov    %eax,%edi
  180aa1:	89 54 24 04          	mov    %edx,0x4(%esp)
  180aa5:	89 cb                	mov    %ecx,%ebx
  180aa7:	8b 6c 24 24          	mov    0x24(%esp),%ebp
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
	int min_width = -1;
  180aab:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
  180ab2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  180ab9:	00 
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
  180aba:	be 00 00 00 00       	mov    $0x0,%esi
	int pad_zero = 0;
	int min_width = -1;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
  180abf:	e9 af 01 00 00       	jmp    180c73 <_vprintk+0x1db>
		if (!might_format) {
  180ac4:	85 f6                	test   %esi,%esi
  180ac6:	75 16                	jne    180ade <_vprintk+0x46>
			if (*fmt != '%') {
  180ac8:	3c 25                	cmp    $0x25,%al
  180aca:	0f 84 84 01 00 00    	je     180c54 <_vprintk+0x1bc>
				out((int)*fmt, ctx);
  180ad0:	0f be c0             	movsbl %al,%eax
  180ad3:	8b 54 24 04          	mov    0x4(%esp),%edx
  180ad7:	ff d7                	call   *%edi
  180ad9:	e9 94 01 00 00       	jmp    180c72 <_vprintk+0x1da>
				might_format = 1;
				min_width = -1;
				pad_zero = 0;
			}
		} else {
			switch (*fmt) {
  180ade:	8d 50 db             	lea    -0x25(%eax),%edx
  180ae1:	80 fa 55             	cmp    $0x55,%dl
  180ae4:	0f 87 4f 01 00 00    	ja     180c39 <_vprintk+0x1a1>
  180aea:	0f b6 d2             	movzbl %dl,%edx
  180aed:	ff 24 95 78 24 18 00 	jmp    *0x182478(,%edx,4)
			case '0':
				if (min_width < 0 && pad_zero == 0) {
  180af4:	8b 14 24             	mov    (%esp),%edx
  180af7:	c1 ea 1f             	shr    $0x1f,%edx
  180afa:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
  180aff:	0f 94 c1             	sete   %cl
  180b02:	84 d1                	test   %dl,%cl
  180b04:	0f 85 60 01 00 00    	jne    180c6a <_vprintk+0x1d2>
					pad_zero = 1;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
  180b0a:	83 3c 24 00          	cmpl   $0x0,(%esp)
  180b0e:	79 0e                	jns    180b1e <_vprintk+0x86>
					min_width = *fmt - '0';
  180b10:	0f be c0             	movsbl %al,%eax
  180b13:	83 e8 30             	sub    $0x30,%eax
  180b16:	89 04 24             	mov    %eax,(%esp)
  180b19:	e9 54 01 00 00       	jmp    180c72 <_vprintk+0x1da>
				} else {
					min_width = 10 * min_width + *fmt - '0';
  180b1e:	8b 0c 24             	mov    (%esp),%ecx
  180b21:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
  180b24:	8d 14 09             	lea    (%ecx,%ecx,1),%edx
  180b27:	0f be c0             	movsbl %al,%eax
  180b2a:	8d 44 02 d0          	lea    -0x30(%edx,%eax,1),%eax
  180b2e:	89 04 24             	mov    %eax,(%esp)
  180b31:	e9 3c 01 00 00       	jmp    180c72 <_vprintk+0x1da>
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
  180b36:	8d 75 04             	lea    0x4(%ebp),%esi
  180b39:	8b 6d 00             	mov    0x0(%ebp),%ebp

				if (d < 0) {
  180b3c:	85 ed                	test   %ebp,%ebp
  180b3e:	79 10                	jns    180b50 <_vprintk+0xb8>
					out((int)'-', ctx);
  180b40:	8b 54 24 04          	mov    0x4(%esp),%edx
  180b44:	b8 2d 00 00 00       	mov    $0x2d,%eax
  180b49:	ff d7                	call   *%edi
					d = -d;
  180b4b:	f7 dd                	neg    %ebp
					min_width--;
  180b4d:	ff 0c 24             	decl   (%esp)
				}
				_printk_dec_ulong(out, ctx, d, pad_zero,
  180b50:	ff 34 24             	pushl  (%esp)
  180b53:	ff 74 24 0c          	pushl  0xc(%esp)
  180b57:	89 e9                	mov    %ebp,%ecx
  180b59:	8b 54 24 0c          	mov    0xc(%esp),%edx
  180b5d:	89 f8                	mov    %edi,%eax
  180b5f:	e8 80 fe ff ff       	call   1809e4 <_printk_dec_ulong>
  180b64:	83 c4 08             	add    $0x8,%esp
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
  180b67:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180b69:	be 00 00 00 00       	mov    $0x0,%esi
					d = -d;
					min_width--;
				}
				_printk_dec_ulong(out, ctx, d, pad_zero,
						  min_width);
				break;
  180b6e:	e9 ff 00 00 00       	jmp    180c72 <_vprintk+0x1da>
			}
			case 'u': {
				unsigned long u = va_arg(
  180b73:	8d 75 04             	lea    0x4(%ebp),%esi
  180b76:	8b 4d 00             	mov    0x0(%ebp),%ecx
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
  180b79:	ff 34 24             	pushl  (%esp)
  180b7c:	ff 74 24 0c          	pushl  0xc(%esp)
  180b80:	8b 54 24 0c          	mov    0xc(%esp),%edx
  180b84:	89 f8                	mov    %edi,%eax
  180b86:	e8 59 fe ff ff       	call   1809e4 <_printk_dec_ulong>
  180b8b:	83 c4 08             	add    $0x8,%esp
				_printk_dec_ulong(out, ctx, d, pad_zero,
						  min_width);
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
  180b8e:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180b90:	be 00 00 00 00       	mov    $0x0,%esi
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
						  min_width);
				break;
  180b95:	e9 d8 00 00 00       	jmp    180c72 <_vprintk+0x1da>
			}
			case 'p':
				  out('0', ctx);
  180b9a:	8b 74 24 04          	mov    0x4(%esp),%esi
  180b9e:	89 f2                	mov    %esi,%edx
  180ba0:	b8 30 00 00 00       	mov    $0x30,%eax
  180ba5:	ff d7                	call   *%edi
				  out('x', ctx);
  180ba7:	89 f2                	mov    %esi,%edx
  180ba9:	b8 78 00 00 00       	mov    $0x78,%eax
  180bae:	ff d7                	call   *%edi
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
				  min_width = 8;
  180bb0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
  180bb7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  180bbe:	00 
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
  180bbf:	8d 75 04             	lea    0x4(%ebp),%esi
  180bc2:	8b 4d 00             	mov    0x0(%ebp),%ecx
					ap, unsigned long);
				_printk_hex_ulong(out, ctx, x, pad_zero,
  180bc5:	ff 34 24             	pushl  (%esp)
  180bc8:	ff 74 24 0c          	pushl  0xc(%esp)
  180bcc:	8b 54 24 0c          	mov    0xc(%esp),%edx
  180bd0:	89 f8                	mov    %edi,%eax
  180bd2:	e8 7a fd ff ff       	call   180951 <_printk_hex_ulong>
  180bd7:	83 c4 08             	add    $0x8,%esp
				  pad_zero = 1;
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
  180bda:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180bdc:	be 00 00 00 00       	mov    $0x0,%esi
			case 'X': {
				unsigned long x = va_arg(
					ap, unsigned long);
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
  180be1:	e9 8c 00 00 00       	jmp    180c72 <_vprintk+0x1da>
			}
			case 's': {
				char *s = va_arg(ap, char *);
  180be6:	8d 75 04             	lea    0x4(%ebp),%esi
  180be9:	8b 6d 00             	mov    0x0(%ebp),%ebp
  180bec:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  180bf0:	8b 5c 24 04          	mov    0x4(%esp),%ebx

				while (*s)
  180bf4:	eb 08                	jmp    180bfe <_vprintk+0x166>
					out((int)(*s++), ctx);
  180bf6:	45                   	inc    %ebp
  180bf7:	0f be c0             	movsbl %al,%eax
  180bfa:	89 da                	mov    %ebx,%edx
  180bfc:	ff d7                	call   *%edi
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
  180bfe:	8a 45 00             	mov    0x0(%ebp),%al
  180c01:	84 c0                	test   %al,%al
  180c03:	75 f1                	jne    180bf6 <_vprintk+0x15e>
  180c05:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
  180c09:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180c0b:	be 00 00 00 00       	mov    $0x0,%esi
  180c10:	eb 60                	jmp    180c72 <_vprintk+0x1da>
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
  180c12:	8d 75 04             	lea    0x4(%ebp),%esi
  180c15:	8b 45 00             	mov    0x0(%ebp),%eax

				out(c, ctx);
  180c18:	8b 54 24 04          	mov    0x4(%esp),%edx
  180c1c:	ff d7                	call   *%edi
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
  180c1e:	89 f5                	mov    %esi,%ebp
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180c20:	be 00 00 00 00       	mov    $0x0,%esi
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
				break;
  180c25:	eb 4b                	jmp    180c72 <_vprintk+0x1da>
			}
			case '%': {
				out((int)'%', ctx);
  180c27:	8b 54 24 04          	mov    0x4(%esp),%edx
  180c2b:	b8 25 00 00 00       	mov    $0x25,%eax
  180c30:	ff d7                	call   *%edi
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
  180c32:	be 00 00 00 00       	mov    $0x0,%esi
				out(c, ctx);
				break;
			}
			case '%': {
				out((int)'%', ctx);
				break;
  180c37:	eb 39                	jmp    180c72 <_vprintk+0x1da>
			}
			default:
				out((int)'%', ctx);
  180c39:	8b 74 24 04          	mov    0x4(%esp),%esi
  180c3d:	89 f2                	mov    %esi,%edx
  180c3f:	b8 25 00 00 00       	mov    $0x25,%eax
  180c44:	ff d7                	call   *%edi
				out((int)*fmt, ctx);
  180c46:	0f be 03             	movsbl (%ebx),%eax
  180c49:	89 f2                	mov    %esi,%edx
  180c4b:	ff d7                	call   *%edi
				break;
			}
			might_format = 0;
  180c4d:	be 00 00 00 00       	mov    $0x0,%esi
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
  180c52:	eb 1e                	jmp    180c72 <_vprintk+0x1da>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
  180c54:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
				pad_zero = 0;
  180c5b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  180c62:	00 
	while (*fmt) {
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
  180c63:	be 01 00 00 00       	mov    $0x1,%esi
  180c68:	eb 08                	jmp    180c72 <_vprintk+0x1da>
			}
		} else {
			switch (*fmt) {
			case '0':
				if (min_width < 0 && pad_zero == 0) {
					pad_zero = 1;
  180c6a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  180c71:	00 
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
  180c72:	43                   	inc    %ebx
	int pad_zero = 0;
	int min_width = -1;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
  180c73:	8a 03                	mov    (%ebx),%al
  180c75:	84 c0                	test   %al,%al
  180c77:	0f 85 47 fe ff ff    	jne    180ac4 <_vprintk+0x2c>
			might_format = 0;
		}
still_might_format:
		++fmt;
	}
}
  180c7d:	83 c4 10             	add    $0x10,%esp
  180c80:	5b                   	pop    %ebx
  180c81:	5e                   	pop    %esi
  180c82:	5f                   	pop    %edi
  180c83:	5d                   	pop    %ebp
  180c84:	c3                   	ret    

00180c85 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
  180c85:	83 ec 04             	sub    $0x4,%esp
	struct out_context ctx = { 0 };
  180c88:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	va_list ap;

	va_start(ap, fmt);
  180c8f:	8d 44 24 0c          	lea    0xc(%esp),%eax
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
  180c93:	50                   	push   %eax
  180c94:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  180c98:	8d 54 24 04          	lea    0x4(%esp),%edx
  180c9c:	b8 45 09 18 00       	mov    $0x180945,%eax
  180ca1:	e8 f2 fd ff ff       	call   180a98 <_vprintk>
	va_end(ap);

	return ctx.count;
}
  180ca6:	8b 44 24 04          	mov    0x4(%esp),%eax
  180caa:	83 c4 08             	add    $0x8,%esp
  180cad:	c3                   	ret    

00180cae <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SOC, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_CONSOLE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_ISA_IA32, 1);
  180cae:	c3                   	ret    

00180caf <_pinmux_defaults>:
/******** End PINMUX mapping **************************/

#define PINMUX_MAX_REGISTERS 2

static void _pinmux_defaults(uint32_t base)
{
  180caf:	53                   	push   %ebx
  180cb0:	83 ec 08             	sub    $0x8,%esp
	PIN_CONFIG(mux_config,  6, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config,  7, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 12, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 13, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 14, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 15, PINMUX_FUNC_C);
  180cb3:	c7 04 24 42 a1 00 aa 	movl   $0xaa00a142,(%esp)
	PIN_CONFIG(mux_config, 16, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 17, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 18, PINMUX_FUNC_C);
  180cba:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  180cc1:	00 

	for (i = 0; i < PINMUX_MAX_REGISTERS; i++) {
  180cc2:	ba 00 00 00 00       	mov    $0x0,%edx
  180cc7:	eb 0a                	jmp    180cd3 <_pinmux_defaults+0x24>
		sys_write32(mux_config[i], PINMUX_SELECT_REGISTER(base, i));
  180cc9:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
  180ccc:	8b 0c 94             	mov    (%esp,%edx,4),%ecx
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl	%0, %1;\n\t"
  180ccf:	89 4b 30             	mov    %ecx,0x30(%ebx)
	PIN_CONFIG(mux_config, 15, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 16, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 17, PINMUX_FUNC_C);
	PIN_CONFIG(mux_config, 18, PINMUX_FUNC_C);

	for (i = 0; i < PINMUX_MAX_REGISTERS; i++) {
  180cd2:	42                   	inc    %edx
  180cd3:	83 fa 01             	cmp    $0x1,%edx
  180cd6:	7e f1                	jle    180cc9 <_pinmux_defaults+0x1a>
		sys_write32(mux_config[i], PINMUX_SELECT_REGISTER(base, i));
	}
}
  180cd8:	83 c4 08             	add    $0x8,%esp
  180cdb:	5b                   	pop    %ebx
  180cdc:	c3                   	ret    

00180cdd <pinmux_initialize>:

static int pinmux_initialize(struct device *port)
{
	ARG_UNUSED(port);

	_pinmux_defaults(PINMUX_BASE_ADDR);
  180cdd:	b8 00 09 80 b0       	mov    $0xb0800900,%eax
  180ce2:	e8 c8 ff ff ff       	call   180caf <_pinmux_defaults>

	/*
	 * MAGIC NUMBER: 0x1 is used as the pullup is a single bit in a
	 * 32-bit register.
	 */
	(*(mux_register)) = ((*(mux_register)) & ~(0x1 << pin_offset)) |
  180ce7:	a1 20 09 80 b0       	mov    0xb0800920,%eax
  180cec:	83 c8 20             	or     $0x20,%eax
  180cef:	a3 20 09 80 b0       	mov    %eax,0xb0800920

	/* Enable the UART RX pin to receive input */
	_quark_mcu_set_mux(PINMUX_BASE_ADDR + PINMUX_INPUT_OFFSET, 5, 0x1);

	return 0;
}
  180cf4:	b8 00 00 00 00       	mov    $0x0,%eax
  180cf9:	c3                   	ret    

00180cfa <qm_rar_set_mode>:
		qm_power_soc_deep_sleep_restore();
	}
}

int qm_rar_set_mode(const qm_rar_state_t mode)
{
  180cfa:	83 ec 08             	sub    $0x8,%esp
	QM_CHECK(mode <= QM_RAR_RETENTION, -EINVAL);
	volatile uint32_t i = 32;
  180cfd:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  180d04:	00 
	volatile uint32_t reg;

	switch (mode) {
  180d05:	85 c0                	test   %eax,%eax
  180d07:	74 25                	je     180d2e <qm_rar_set_mode+0x34>
  180d09:	83 f8 01             	cmp    $0x1,%eax
  180d0c:	75 62                	jne    180d70 <qm_rar_set_mode+0x76>
	case QM_RAR_RETENTION:
		QM_SCSS_PMU->aon_vr |=
  180d0e:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180d13:	0d 00 02 c4 9d       	or     $0x9dc40200,%eax
  180d18:	a3 40 05 80 b0       	mov    %eax,0xb0800540
		    (QM_AON_VR_PASS_CODE | QM_AON_VR_ROK_BUF_VREG_MASK);
		QM_SCSS_PMU->aon_vr |=
  180d1d:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180d22:	0d 00 01 c4 9d       	or     $0x9dc40100,%eax
  180d27:	a3 40 05 80 b0       	mov    %eax,0xb0800540
		    (QM_AON_VR_PASS_CODE | QM_AON_VR_VREG_SEL);
		break;
  180d2c:	eb 42                	jmp    180d70 <qm_rar_set_mode+0x76>

	case QM_RAR_NORMAL:
		reg = QM_SCSS_PMU->aon_vr & ~QM_AON_VR_VREG_SEL;
  180d2e:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180d33:	80 e4 fe             	and    $0xfe,%ah
  180d36:	89 04 24             	mov    %eax,(%esp)
		QM_SCSS_PMU->aon_vr = QM_AON_VR_PASS_CODE | reg;
  180d39:	8b 04 24             	mov    (%esp),%eax
  180d3c:	0d 00 00 c4 9d       	or     $0x9dc40000,%eax
  180d41:	a3 40 05 80 b0       	mov    %eax,0xb0800540
		/* Wait for >= 2usec, at most 64 clock cycles. */
		while (i--) {
  180d46:	eb 01                	jmp    180d49 <qm_rar_set_mode+0x4f>
			__asm__ __volatile__("nop");
  180d48:	90                   	nop

	case QM_RAR_NORMAL:
		reg = QM_SCSS_PMU->aon_vr & ~QM_AON_VR_VREG_SEL;
		QM_SCSS_PMU->aon_vr = QM_AON_VR_PASS_CODE | reg;
		/* Wait for >= 2usec, at most 64 clock cycles. */
		while (i--) {
  180d49:	8b 44 24 04          	mov    0x4(%esp),%eax
  180d4d:	8d 50 ff             	lea    -0x1(%eax),%edx
  180d50:	89 54 24 04          	mov    %edx,0x4(%esp)
  180d54:	85 c0                	test   %eax,%eax
  180d56:	75 f0                	jne    180d48 <qm_rar_set_mode+0x4e>
			__asm__ __volatile__("nop");
		}
		reg = QM_SCSS_PMU->aon_vr & ~QM_AON_VR_ROK_BUF_VREG_MASK;
  180d58:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180d5d:	80 e4 fd             	and    $0xfd,%ah
  180d60:	89 04 24             	mov    %eax,(%esp)
		QM_SCSS_PMU->aon_vr = QM_AON_VR_PASS_CODE | reg;
  180d63:	8b 04 24             	mov    (%esp),%eax
  180d66:	0d 00 00 c4 9d       	or     $0x9dc40000,%eax
  180d6b:	a3 40 05 80 b0       	mov    %eax,0xb0800540
		break;
	}
	return 0;
}
  180d70:	b8 00 00 00 00       	mov    $0x0,%eax
  180d75:	83 c4 08             	add    $0x8,%esp
  180d78:	c3                   	ret    

00180d79 <qm_power_soc_sleep_restore>:

void qm_power_soc_sleep_restore(void)
{
	/* From here on, restore the SoC to an active state. */
	/* Set the RAR to normal mode. */
	qm_rar_set_mode(QM_RAR_NORMAL);
  180d79:	b8 00 00 00 00       	mov    $0x0,%eax
  180d7e:	e8 77 ff ff ff       	call   180cfa <qm_rar_set_mode>
	 * In the worst case scenario, when switching back to 32MHz,
	 * 2 wait states will be restored.
	 * This setting will be too conservative until the frequency has been
	 * restored.
	 */
	QM_FLASH[QM_FLASH_0]->tmg_ctrl = power_context.flash_tmg_save;
  180d83:	8b 15 1c 01 28 00    	mov    0x28011c,%edx
  180d89:	a1 14 00 28 00       	mov    0x280014,%eax
  180d8e:	89 10                	mov    %edx,(%eax)

	/* Restore all previous values. */
	QM_SCSS_CCU->ccu_sys_clk_ctl = power_context.sys_clk_ctl_save;
  180d90:	a1 08 01 28 00       	mov    0x280108,%eax
  180d95:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	/* Re-apply clock divider values. DIV_EN must go 0 -> 1. */
	QM_SCSS_CCU->ccu_sys_clk_ctl &=
  180d9a:	a1 38 00 80 b0       	mov    0xb0800038,%eax
  180d9f:	24 7b                	and    $0x7b,%al
  180da1:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	    ~(QM_CCU_SYS_CLK_DIV_EN | QM_CCU_RTC_CLK_DIV_EN);
	QM_SCSS_CCU->ccu_sys_clk_ctl |=
  180da6:	a1 38 00 80 b0       	mov    0xb0800038,%eax
  180dab:	0c 84                	or     $0x84,%al
  180dad:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	    QM_CCU_SYS_CLK_DIV_EN | QM_CCU_RTC_CLK_DIV_EN;

	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_CCU_SYS_CLK_CTL);

	/* Wait for the XTAL or SI oscillator to stabilise. */
	while (!(QM_SCSS_CCU->osc0_stat1 &
  180db2:	a1 04 00 80 b0       	mov    0xb0800004,%eax
  180db7:	a8 03                	test   $0x3,%al
  180db9:	74 f7                	je     180db2 <qm_power_soc_sleep_restore+0x39>
		 (QM_OSC0_LOCK_SI | QM_OSC0_LOCK_XTAL))) {
	};

	/* Restore original clocking, ADC, analog comparator states. */
	QM_SCSS_CCU->osc0_cfg1 = power_context.osc0_cfg_save;
  180dbb:	a1 0c 01 28 00       	mov    0x28010c,%eax
  180dc0:	a3 08 00 80 b0       	mov    %eax,0xb0800008
	QM_SCSS_CCU->ccu_periph_clk_gate_ctl = power_context.clk_gate_save;
  180dc5:	a1 04 01 28 00       	mov    0x280104,%eax
  180dca:	a3 18 00 80 b0       	mov    %eax,0xb0800018
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_OSC0_CFG1);
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER,
			    SOCW_REG_CCU_PERIPH_CLK_GATE_CTL);
	QM_SCSS_CMP->cmp_pwr = power_context.ac_power_save;
  180dcf:	a1 00 01 28 00       	mov    0x280100,%eax
  180dd4:	a3 0c 03 80 b0       	mov    %eax,0xb080030c
	QM_ADC->adc_op_mode = power_context.adc_mode_save;
  180dd9:	a1 14 01 28 00       	mov    0x280114,%eax
  180dde:	a3 38 40 00 b0       	mov    %eax,0xb0004038
	QM_SCSS_CCU->ccu_lp_clk_ctl = power_context.lp_clk_save;
  180de3:	a1 24 01 28 00       	mov    0x280124,%eax
  180de8:	a3 2c 00 80 b0       	mov    %eax,0xb080002c

	QM_SCSS_GP->gps0 &= ~QM_GPS0_POWER_STATE_SLEEP;
  180ded:	a1 00 01 80 b0       	mov    0xb0800100,%eax
  180df2:	83 e0 bf             	and    $0xffffffbf,%eax
  180df5:	a3 00 01 80 b0       	mov    %eax,0xb0800100
  180dfa:	c3                   	ret    

00180dfb <qm_power_soc_deep_sleep_restore>:

void qm_power_soc_deep_sleep_restore(void)
{
	/* We are now exiting from deep sleep mode. */
	/* Set the RAR to normal mode. */
	qm_rar_set_mode(QM_RAR_NORMAL);
  180dfb:	b8 00 00 00 00       	mov    $0x0,%eax
  180e00:	e8 f5 fe ff ff       	call   180cfa <qm_rar_set_mode>
	 * In the worst case scenario, when switching back to 32MHz,
	 * 2 wait states will be restored.
	 * This setting will be too conservative until the frequency has been
	 * restored.
	 */
	QM_FLASH[QM_FLASH_0]->tmg_ctrl = power_context.flash_tmg_save;
  180e05:	8b 15 1c 01 28 00    	mov    0x28011c,%edx
  180e0b:	a1 14 00 28 00       	mov    0x280014,%eax
  180e10:	89 10                	mov    %edx,(%eax)

	/* Restore operating voltage to 1.8V. */
	/* SCSS.AON_VR.VSEL = 0x10; */
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE | (QM_SCSS_PMU->aon_vr & QM_AON_VR_VSEL_MASK) |
  180e12:	a1 40 05 80 b0       	mov    0xb0800540,%eax
	     QM_AON_VR_VSEL_1V8 | QM_AON_VR_ROK_BUF_VREG_MASK);
  180e17:	25 e0 fd 00 00       	and    $0xfde0,%eax
  180e1c:	0d 10 02 c4 9d       	or     $0x9dc40210,%eax
	 */
	QM_FLASH[QM_FLASH_0]->tmg_ctrl = power_context.flash_tmg_save;

	/* Restore operating voltage to 1.8V. */
	/* SCSS.AON_VR.VSEL = 0x10; */
	QM_SCSS_PMU->aon_vr =
  180e21:	a3 40 05 80 b0       	mov    %eax,0xb0800540
	    (QM_AON_VR_PASS_CODE | (QM_SCSS_PMU->aon_vr & QM_AON_VR_VSEL_MASK) |
	     QM_AON_VR_VSEL_1V8 | QM_AON_VR_ROK_BUF_VREG_MASK);

	/* SCSS.AON_VR.VSEL_STROBE = 1;  */
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE | QM_SCSS_PMU->aon_vr | QM_AON_VR_VSTRB);
  180e26:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180e2b:	0d 20 00 c4 9d       	or     $0x9dc40020,%eax
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE | (QM_SCSS_PMU->aon_vr & QM_AON_VR_VSEL_MASK) |
	     QM_AON_VR_VSEL_1V8 | QM_AON_VR_ROK_BUF_VREG_MASK);

	/* SCSS.AON_VR.VSEL_STROBE = 1;  */
	QM_SCSS_PMU->aon_vr =
  180e30:	a3 40 05 80 b0       	mov    %eax,0xb0800540
	    (QM_AON_VR_PASS_CODE | QM_SCSS_PMU->aon_vr | QM_AON_VR_VSTRB);

	/* Wait >= 1 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");
  180e35:	90                   	nop

	/* SCSS.AON_VR.VSEL_STROBE = 0; */
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE | (QM_SCSS_PMU->aon_vr & ~QM_AON_VR_VSTRB));
  180e36:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180e3b:	25 df ff 3b 62       	and    $0x623bffdf,%eax
  180e40:	0d 00 00 c4 9d       	or     $0x9dc40000,%eax

	/* Wait >= 1 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");

	/* SCSS.AON_VR.VSEL_STROBE = 0; */
	QM_SCSS_PMU->aon_vr =
  180e45:	a3 40 05 80 b0       	mov    %eax,0xb0800540
	    (QM_AON_VR_PASS_CODE | (QM_SCSS_PMU->aon_vr & ~QM_AON_VR_VSTRB));

	/* Wait >= 2 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");
  180e4a:	90                   	nop

	/* SCSS.AON_VR.ROK_BUF_VREG_MASK = 0;  */
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE |
	     (QM_SCSS_PMU->aon_vr & ~QM_AON_VR_ROK_BUF_VREG_MASK));
  180e4b:	a1 40 05 80 b0       	mov    0xb0800540,%eax
	/* Wait >= 2 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");

	/* SCSS.AON_VR.ROK_BUF_VREG_MASK = 0;  */
	QM_SCSS_PMU->aon_vr =
	    (QM_AON_VR_PASS_CODE |
  180e50:	25 ff fd 3b 62       	and    $0x623bfdff,%eax
  180e55:	0d 00 00 c4 9d       	or     $0x9dc40000,%eax

	/* Wait >= 2 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");

	/* SCSS.AON_VR.ROK_BUF_VREG_MASK = 0;  */
	QM_SCSS_PMU->aon_vr =
  180e5a:	a3 40 05 80 b0       	mov    %eax,0xb0800540
	    (QM_AON_VR_PASS_CODE |
	     (QM_SCSS_PMU->aon_vr & ~QM_AON_VR_ROK_BUF_VREG_MASK));

	/* Wait >= 1 usec, at 256 kHz this is 1 cycle. */
	__asm__ __volatile__("nop");
  180e5f:	90                   	nop

	/* Wait for voltage regulator to attain 1.8V regulation. */
	while (!(QM_SCSS_PMU->aon_vr & QM_AON_VR_ROK_BUF_VREG_STATUS)) {
  180e60:	a1 40 05 80 b0       	mov    0xb0800540,%eax
  180e65:	f6 c4 80             	test   $0x80,%ah
  180e68:	74 f6                	je     180e60 <qm_power_soc_deep_sleep_restore+0x65>
	}

	/* SCSS.OSC0_CFG0.OSC0_HYB_SET_REG1.OSC0_CFG0[0]  = 0; */
	QM_SCSS_CCU->osc0_cfg0 &= ~QM_SI_OSC_1V2_MODE;
  180e6a:	a1 00 00 80 b0       	mov    0xb0800000,%eax
  180e6f:	83 e0 fe             	and    $0xfffffffe,%eax
  180e72:	a3 00 00 80 b0       	mov    %eax,0xb0800000

	/* FlashCtrl.CTRL.LVE_MODE = 0; */
	QM_FLASH[QM_FLASH_0]->ctrl &= ~QM_FLASH_LVE_MODE;
  180e77:	8b 15 14 00 28 00    	mov    0x280014,%edx
  180e7d:	8b 42 18             	mov    0x18(%edx),%eax
  180e80:	83 e0 df             	and    $0xffffffdf,%eax
  180e83:	89 42 18             	mov    %eax,0x18(%edx)

	/* Restore all previous values. */
	QM_SCSS_CCU->ccu_sys_clk_ctl = power_context.sys_clk_ctl_save;
  180e86:	a1 08 01 28 00       	mov    0x280108,%eax
  180e8b:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	/* Re-apply clock divider values. DIV_EN must go 0 -> 1. */
	QM_SCSS_CCU->ccu_sys_clk_ctl &=
  180e90:	a1 38 00 80 b0       	mov    0xb0800038,%eax
  180e95:	24 7b                	and    $0x7b,%al
  180e97:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	    ~(QM_CCU_SYS_CLK_DIV_EN | QM_CCU_RTC_CLK_DIV_EN);
	QM_SCSS_CCU->ccu_sys_clk_ctl |=
  180e9c:	a1 38 00 80 b0       	mov    0xb0800038,%eax
  180ea1:	0c 84                	or     $0x84,%al
  180ea3:	a3 38 00 80 b0       	mov    %eax,0xb0800038
	    QM_CCU_SYS_CLK_DIV_EN | QM_CCU_RTC_CLK_DIV_EN;

	/* Wait for the XTAL or SI oscillator to stabilise. */
	while (!(QM_SCSS_CCU->osc0_stat1 &
  180ea8:	a1 04 00 80 b0       	mov    0xb0800004,%eax
  180ead:	a8 03                	test   $0x3,%al
  180eaf:	74 f7                	je     180ea8 <qm_power_soc_deep_sleep_restore+0xad>
		 (QM_OSC0_LOCK_SI | QM_OSC0_LOCK_XTAL))) {
	};
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_CCU_SYS_CLK_CTL);

	/* Re-enable clocks. */
	clk_periph_enable(CLK_PERIPH_REGISTER);
  180eb1:	b8 01 00 00 00       	mov    $0x1,%eax
  180eb6:	e8 92 00 00 00       	call   180f4d <clk_periph_enable>

	/* Re-enable gpio debounce clocking. */
	QM_SCSS_CCU->ccu_gpio_db_clk_ctl |= QM_CCU_GPIO_DB_CLK_EN;
  180ebb:	a1 20 00 80 b0       	mov    0xb0800020,%eax
  180ec0:	83 c8 01             	or     $0x1,%eax
  180ec3:	a3 20 00 80 b0       	mov    %eax,0xb0800020

	/* Restore original clocking, ADC, analog comparator states. */
	QM_SCSS_CCU->osc0_cfg1 = power_context.osc0_cfg_save;
  180ec8:	a1 0c 01 28 00       	mov    0x28010c,%eax
  180ecd:	a3 08 00 80 b0       	mov    %eax,0xb0800008
	QM_SCSS_CCU->ccu_periph_clk_gate_ctl = power_context.clk_gate_save;
  180ed2:	a1 04 01 28 00       	mov    0x280104,%eax
  180ed7:	a3 18 00 80 b0       	mov    %eax,0xb0800018
	QM_SCSS_CCU->osc1_cfg0 = power_context.osc1_cfg_save;
  180edc:	a1 10 01 28 00       	mov    0x280110,%eax
  180ee1:	a3 10 00 80 b0       	mov    %eax,0xb0800010

	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_OSC0_CFG1);
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER,
			    SOCW_REG_CCU_PERIPH_CLK_GATE_CTL);
	QM_SCSS_CMP->cmp_pwr = power_context.ac_power_save;
  180ee6:	a1 00 01 28 00       	mov    0x280100,%eax
  180eeb:	a3 0c 03 80 b0       	mov    %eax,0xb080030c
	QM_ADC->adc_op_mode = power_context.adc_mode_save;
  180ef0:	a1 14 01 28 00       	mov    0x280114,%eax
  180ef5:	a3 38 40 00 b0       	mov    %eax,0xb0004038

	QM_SCSS_PMUX->pmux_slew[0] = power_context.pmux_slew_save;
  180efa:	a1 28 01 28 00       	mov    0x280128,%eax
  180eff:	a3 10 09 80 b0       	mov    %eax,0xb0800910
	QM_SCSS_CCU->ccu_ext_clock_ctl = power_context.ext_clock_save;
  180f04:	a1 20 01 28 00       	mov    0x280120,%eax
  180f09:	a3 24 00 80 b0       	mov    %eax,0xb0800024
	QM_SCSS_CCU->ccu_lp_clk_ctl = power_context.lp_clk_save;
  180f0e:	a1 24 01 28 00       	mov    0x280124,%eax
  180f13:	a3 2c 00 80 b0       	mov    %eax,0xb080002c

	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_PMUX_SLEW);
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_CCU_LP_CLK_CTL);
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER, SOCW_REG_CCU_EXT_CLK_CTL);

	QM_SCSS_CCU->wake_mask = SET_ALL_BITS;
  180f18:	c7 05 30 00 80 b0 ff 	movl   $0xffffffff,0xb0800030
  180f1f:	ff ff ff 
	QM_SCSS_GP->gps0 &= ~QM_GPS0_POWER_STATE_DEEP_SLEEP;
  180f22:	a1 00 01 80 b0       	mov    0xb0800100,%eax
  180f27:	24 7f                	and    $0x7f,%al
  180f29:	a3 00 01 80 b0       	mov    %eax,0xb0800100
  180f2e:	c3                   	ret    

00180f2f <qm_power_soc_restore>:
{
	/*
	 * If the SoC is waking from sleep or deep sleep mode then the full
	 * system state must be restored.
	 */
	if (QM_SCSS_GP->gps0 & QM_GPS0_POWER_STATE_SLEEP) {
  180f2f:	a1 00 01 80 b0       	mov    0xb0800100,%eax
  180f34:	a8 40                	test   $0x40,%al
  180f36:	74 06                	je     180f3e <qm_power_soc_restore+0xf>
		qm_power_soc_sleep_restore();
  180f38:	e8 3c fe ff ff       	call   180d79 <qm_power_soc_sleep_restore>
  180f3d:	c3                   	ret    
	} else if (QM_SCSS_GP->gps0 & QM_GPS0_POWER_STATE_DEEP_SLEEP) {
  180f3e:	a1 00 01 80 b0       	mov    0xb0800100,%eax
  180f43:	a8 80                	test   $0x80,%al
  180f45:	74 05                	je     180f4c <qm_power_soc_restore+0x1d>
		qm_power_soc_deep_sleep_restore();
  180f47:	e8 af fe ff ff       	call   180dfb <qm_power_soc_deep_sleep_restore>
  180f4c:	c3                   	ret    

00180f4d <clk_periph_enable>:

int clk_periph_enable(const clk_periph_t clocks)
{
	QM_CHECK(clocks <= CLK_PERIPH_ALL, -EINVAL);

	QM_SCSS_CCU->ccu_periph_clk_gate_ctl |= clocks;
  180f4d:	8b 15 18 00 80 b0    	mov    0xb0800018,%edx
  180f53:	09 d0                	or     %edx,%eax
  180f55:	a3 18 00 80 b0       	mov    %eax,0xb0800018
	SOC_WATCH_LOG_EVENT(SOCW_EVENT_REGISTER,
			    SOCW_REG_CCU_PERIPH_CLK_GATE_CTL);
#endif /* HAS_SW_SOCWATCH */

	return 0;
}
  180f5a:	b8 00 00 00 00       	mov    $0x0,%eax
  180f5f:	c3                   	ret    

00180f60 <gpio_isr>:

static void (*callback[QM_GPIO_NUM])(void *, uint32_t);
static void *callback_data[QM_GPIO_NUM];

static void gpio_isr(const qm_gpio_t gpio)
{
  180f60:	56                   	push   %esi
  180f61:	53                   	push   %ebx
  180f62:	89 c3                	mov    %eax,%ebx
	const uint32_t int_status = QM_GPIO[gpio]->gpio_intstatus;
  180f64:	8b 04 85 18 00 28 00 	mov    0x280018(,%eax,4),%eax
  180f6b:	8b 70 40             	mov    0x40(%eax),%esi

#if (HAS_SOC_CONTEXT_RETENTION)
	if (QM_SCSS_GP->gps0 & QM_GPS0_POWER_STATES_MASK) {
  180f6e:	a1 00 01 80 b0       	mov    0xb0800100,%eax
  180f73:	a9 c0 03 00 00       	test   $0x3c0,%eax
  180f78:	74 05                	je     180f7f <gpio_isr+0x1f>
		qm_power_soc_restore();
  180f7a:	e8 b0 ff ff ff       	call   180f2f <qm_power_soc_restore>
	}
#endif

	if (callback[gpio]) {
  180f7f:	8b 0c 9d 30 01 28 00 	mov    0x280130(,%ebx,4),%ecx
  180f86:	85 c9                	test   %ecx,%ecx
  180f88:	74 0b                	je     180f95 <gpio_isr+0x35>
		(*callback[gpio])(callback_data[gpio], int_status);
  180f8a:	8b 04 9d 2c 01 28 00 	mov    0x28012c(,%ebx,4),%eax
  180f91:	89 f2                	mov    %esi,%edx
  180f93:	ff d1                	call   *%ecx
	}

	/* This will clear all pending interrupts flags in status */
	QM_GPIO[gpio]->gpio_porta_eoi = int_status;
  180f95:	8b 04 9d 18 00 28 00 	mov    0x280018(,%ebx,4),%eax
  180f9c:	89 70 4c             	mov    %esi,0x4c(%eax)
	/* Read back EOI register to avoid a spurious interrupt due to EOI
	 * propagation delay */
	QM_GPIO[gpio]->gpio_porta_eoi;
  180f9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
  180fa2:	5b                   	pop    %ebx
  180fa3:	5e                   	pop    %esi
  180fa4:	c3                   	ret    

00180fa5 <qm_gpio_0_isr>:

QM_ISR_DECLARE(qm_gpio_0_isr)
{
	gpio_isr(QM_GPIO_0);
  180fa5:	b8 00 00 00 00       	mov    $0x0,%eax
  180faa:	e8 b1 ff ff ff       	call   180f60 <gpio_isr>
  180faf:	c3                   	ret    

00180fb0 <qm_gpio_set_config>:
}
#endif

int qm_gpio_set_config(const qm_gpio_t gpio,
		       const qm_gpio_port_config_t *const cfg)
{
  180fb0:	56                   	push   %esi
  180fb1:	53                   	push   %ebx
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	qm_gpio_reg_t *const controller = QM_GPIO[gpio];
  180fb2:	8b 0c 85 18 00 28 00 	mov    0x280018(,%eax,4),%ecx

	uint32_t mask = controller->gpio_intmask;
  180fb9:	8b 71 34             	mov    0x34(%ecx),%esi
	controller->gpio_intmask = 0xffffffff;
  180fbc:	c7 41 34 ff ff ff ff 	movl   $0xffffffff,0x34(%ecx)

	controller->gpio_swporta_ddr = cfg->direction;
  180fc3:	8b 1a                	mov    (%edx),%ebx
  180fc5:	89 59 04             	mov    %ebx,0x4(%ecx)
	controller->gpio_inten = cfg->int_en;
  180fc8:	8b 5a 04             	mov    0x4(%edx),%ebx
  180fcb:	89 59 30             	mov    %ebx,0x30(%ecx)
	controller->gpio_inttype_level = cfg->int_type;
  180fce:	8b 5a 08             	mov    0x8(%edx),%ebx
  180fd1:	89 59 38             	mov    %ebx,0x38(%ecx)
	controller->gpio_int_polarity = cfg->int_polarity;
  180fd4:	8b 5a 0c             	mov    0xc(%edx),%ebx
  180fd7:	89 59 3c             	mov    %ebx,0x3c(%ecx)
	controller->gpio_debounce = cfg->int_debounce;
  180fda:	8b 5a 10             	mov    0x10(%edx),%ebx
  180fdd:	89 59 48             	mov    %ebx,0x48(%ecx)
	controller->gpio_int_bothedge = cfg->int_bothedge;
  180fe0:	8b 5a 14             	mov    0x14(%edx),%ebx
  180fe3:	89 59 68             	mov    %ebx,0x68(%ecx)
	controller->gpio_ls_sync |= ENABLE_PCLK;
  180fe6:	8b 59 60             	mov    0x60(%ecx),%ebx
  180fe9:	83 cb 01             	or     $0x1,%ebx
  180fec:	89 59 60             	mov    %ebx,0x60(%ecx)
	callback[gpio] = cfg->callback;
  180fef:	8b 5a 18             	mov    0x18(%edx),%ebx
  180ff2:	89 1c 85 30 01 28 00 	mov    %ebx,0x280130(,%eax,4)
	callback_data[gpio] = cfg->callback_data;
  180ff9:	8b 52 1c             	mov    0x1c(%edx),%edx
  180ffc:	89 14 85 2c 01 28 00 	mov    %edx,0x28012c(,%eax,4)

	controller->gpio_intmask = mask;
  181003:	89 71 34             	mov    %esi,0x34(%ecx)

	return 0;
}
  181006:	b8 00 00 00 00       	mov    $0x0,%eax
  18100b:	5b                   	pop    %ebx
  18100c:	5e                   	pop    %esi
  18100d:	c3                   	ret    

0018100e <qm_gpio_read_pin>:

int qm_gpio_read_pin(const qm_gpio_t gpio, const uint8_t pin,
		     qm_gpio_state_t *const state)
{
  18100e:	53                   	push   %ebx
  18100f:	89 cb                	mov    %ecx,%ebx
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_NUM_GPIO_PINS, -EINVAL);
	QM_CHECK(state != NULL, -EINVAL);

	*state = ((QM_GPIO[gpio]->gpio_ext_porta) >> pin) & 1;
  181011:	8b 04 85 18 00 28 00 	mov    0x280018(,%eax,4),%eax
  181018:	8b 40 50             	mov    0x50(%eax),%eax
  18101b:	88 d1                	mov    %dl,%cl
  18101d:	d3 e8                	shr    %cl,%eax
  18101f:	83 e0 01             	and    $0x1,%eax
  181022:	89 03                	mov    %eax,(%ebx)

	return 0;
}
  181024:	b8 00 00 00 00       	mov    $0x0,%eax
  181029:	5b                   	pop    %ebx
  18102a:	c3                   	ret    

0018102b <qm_gpio_set_pin>:

int qm_gpio_set_pin(const qm_gpio_t gpio, const uint8_t pin)
{
  18102b:	56                   	push   %esi
  18102c:	53                   	push   %ebx
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_NUM_GPIO_PINS, -EINVAL);

	QM_GPIO[gpio]->gpio_swporta_dr |= (1 << pin);
  18102d:	8b 34 85 18 00 28 00 	mov    0x280018(,%eax,4),%esi
  181034:	8b 06                	mov    (%esi),%eax
  181036:	bb 01 00 00 00       	mov    $0x1,%ebx
  18103b:	88 d1                	mov    %dl,%cl
  18103d:	d3 e3                	shl    %cl,%ebx
  18103f:	09 d8                	or     %ebx,%eax
  181041:	89 06                	mov    %eax,(%esi)

	return 0;
}
  181043:	b8 00 00 00 00       	mov    $0x0,%eax
  181048:	5b                   	pop    %ebx
  181049:	5e                   	pop    %esi
  18104a:	c3                   	ret    

0018104b <qm_gpio_clear_pin>:

int qm_gpio_clear_pin(const qm_gpio_t gpio, const uint8_t pin)
{
  18104b:	56                   	push   %esi
  18104c:	53                   	push   %ebx
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_NUM_GPIO_PINS, -EINVAL);

	QM_GPIO[gpio]->gpio_swporta_dr &= ~(1 << pin);
  18104d:	8b 34 85 18 00 28 00 	mov    0x280018(,%eax,4),%esi
  181054:	8b 1e                	mov    (%esi),%ebx
  181056:	b8 01 00 00 00       	mov    $0x1,%eax
  18105b:	88 d1                	mov    %dl,%cl
  18105d:	d3 e0                	shl    %cl,%eax
  18105f:	f7 d0                	not    %eax
  181061:	21 d8                	and    %ebx,%eax
  181063:	89 06                	mov    %eax,(%esi)

	return 0;
}
  181065:	b8 00 00 00 00       	mov    $0x0,%eax
  18106a:	5b                   	pop    %ebx
  18106b:	5e                   	pop    %esi
  18106c:	c3                   	ret    

0018106d <qm_gpio_read_port>:
int qm_gpio_read_port(const qm_gpio_t gpio, uint32_t *const port)
{
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);
	QM_CHECK(port != NULL, -EINVAL);

	*port = QM_GPIO[gpio]->gpio_ext_porta;
  18106d:	8b 04 85 18 00 28 00 	mov    0x280018(,%eax,4),%eax
  181074:	8b 40 50             	mov    0x50(%eax),%eax
  181077:	89 02                	mov    %eax,(%edx)

	return 0;
}
  181079:	b8 00 00 00 00       	mov    $0x0,%eax
  18107e:	c3                   	ret    

0018107f <qm_gpio_write_port>:

int qm_gpio_write_port(const qm_gpio_t gpio, const uint32_t val)
{
	QM_CHECK(gpio < QM_GPIO_NUM, -EINVAL);

	QM_GPIO[gpio]->gpio_swporta_dr = val;
  18107f:	8b 04 85 18 00 28 00 	mov    0x280018(,%eax,4),%eax
  181086:	89 10                	mov    %edx,(%eax)

	return 0;
}
  181088:	b8 00 00 00 00       	mov    $0x0,%eax
  18108d:	c3                   	ret    

0018108e <qm_uart_set_config>:
	qm_uart_isr_handler(QM_UART_1);
	QM_ISR_EOI(QM_IRQ_UART_1_INT_VECTOR);
}

int qm_uart_set_config(const qm_uart_t uart, const qm_uart_config_t *cfg)
{
  18108e:	83 ec 04             	sub    $0x4,%esp
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  181091:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
	volatile uint32_t unused_lsr __attribute__((unused));

	/* Clear DLAB by unsetting line parameters */
	regs->lcr = 0;
  181098:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

	/* Set divisor latch registers (integer + fractional part) */
	regs->lcr = QM_UART_LCR_DLAB;
  18109f:	c7 40 0c 80 00 00 00 	movl   $0x80,0xc(%eax)
	regs->ier_dlh = QM_UART_CFG_BAUD_DLH_UNPACK(cfg->baud_divisor);
  1810a6:	8b 4a 04             	mov    0x4(%edx),%ecx
  1810a9:	81 e1 00 00 ff 00    	and    $0xff0000,%ecx
  1810af:	c1 e9 10             	shr    $0x10,%ecx
  1810b2:	89 48 04             	mov    %ecx,0x4(%eax)
	regs->rbr_thr_dll = QM_UART_CFG_BAUD_DLL_UNPACK(cfg->baud_divisor);
  1810b5:	8b 4a 04             	mov    0x4(%edx),%ecx
  1810b8:	0f b6 cd             	movzbl %ch,%ecx
  1810bb:	89 08                	mov    %ecx,(%eax)
	regs->dlf = QM_UART_CFG_BAUD_DLF_UNPACK(cfg->baud_divisor);
  1810bd:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
  1810c1:	89 88 c0 00 00 00    	mov    %ecx,0xc0(%eax)

	/* Set line parameters. This also unsets the DLAB */
	regs->lcr = cfg->line_control;
  1810c7:	8b 0a                	mov    (%edx),%ecx
  1810c9:	89 48 0c             	mov    %ecx,0xc(%eax)

	/* Hardware automatic flow control */
	regs->mcr = 0;
  1810cc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	if (true == cfg->hw_fc) {
  1810d3:	80 7a 08 00          	cmpb   $0x0,0x8(%edx)
  1810d7:	74 09                	je     1810e2 <qm_uart_set_config+0x54>
		regs->mcr |= QM_UART_MCR_AFCE | QM_UART_MCR_RTS;
  1810d9:	8b 50 10             	mov    0x10(%eax),%edx
  1810dc:	83 ca 22             	or     $0x22,%edx
  1810df:	89 50 10             	mov    %edx,0x10(%eax)
	}

	/* FIFO's enable and reset, set interrupt threshold */
	regs->iir_fcr =
  1810e2:	c7 40 08 b7 00 00 00 	movl   $0xb7,0x8(%eax)
	    (QM_UART_FCR_FIFOE | QM_UART_FCR_RFIFOR | QM_UART_FCR_XFIFOR |
	     QM_UART_FCR_DEFAULT_TX_RX_THRESHOLD);
	regs->ier_dlh |= QM_UART_IER_PTIME;
  1810e9:	8b 50 04             	mov    0x4(%eax),%edx
  1810ec:	80 ca 80             	or     $0x80,%dl
  1810ef:	89 50 04             	mov    %edx,0x4(%eax)

	/* Clear LSR */
	unused_lsr = regs->lsr;
  1810f2:	8b 40 14             	mov    0x14(%eax),%eax
  1810f5:	89 04 24             	mov    %eax,(%esp)

	return 0;
}
  1810f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1810fd:	83 c4 04             	add    $0x4,%esp
  181100:	c3                   	ret    

00181101 <qm_uart_get_status>:

int qm_uart_get_status(const qm_uart_t uart, qm_uart_status_t *const status)
{
  181101:	56                   	push   %esi
  181102:	53                   	push   %ebx
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(status != NULL, -EINVAL);
	qm_uart_reg_t *const regs = QM_UART[uart];
  181103:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax
	uint32_t lsr = regs->lsr;
  18110a:	8b 48 14             	mov    0x14(%eax),%ecx

	*status = (lsr & (QM_UART_LSR_OE | QM_UART_LSR_PE | QM_UART_LSR_FE |
  18110d:	89 cb                	mov    %ecx,%ebx
  18110f:	83 e3 1e             	and    $0x1e,%ebx
  181112:	89 1a                	mov    %ebx,(%edx)

	/*
	 * Check as an IRQ TX completed, if so, the Shift register may still be
	 * busy.
	 */
	if (regs->scr & BIT(0)) {
  181114:	8b 70 1c             	mov    0x1c(%eax),%esi
  181117:	f7 c6 01 00 00 00    	test   $0x1,%esi
  18111d:	74 0b                	je     18112a <qm_uart_get_status+0x29>
		regs->scr &= ~BIT(0);
  18111f:	8b 58 1c             	mov    0x1c(%eax),%ebx
  181122:	83 e3 fe             	and    $0xfffffffe,%ebx
  181125:	89 58 1c             	mov    %ebx,0x1c(%eax)
  181128:	eb 0a                	jmp    181134 <qm_uart_get_status+0x33>
	} else if (!(lsr & (QM_UART_LSR_TEMT))) {
  18112a:	f6 c1 40             	test   $0x40,%cl
  18112d:	75 05                	jne    181134 <qm_uart_get_status+0x33>
		*status |= QM_UART_TX_BUSY;
  18112f:	83 cb 20             	or     $0x20,%ebx
  181132:	89 1a                	mov    %ebx,(%edx)
	}

	if (lsr & QM_UART_LSR_DR) {
  181134:	f6 c1 01             	test   $0x1,%cl
  181137:	74 03                	je     18113c <qm_uart_get_status+0x3b>
		*status |= QM_UART_RX_BUSY;
  181139:	83 0a 40             	orl    $0x40,(%edx)
	}

	return 0;
}
  18113c:	b8 00 00 00 00       	mov    $0x0,%eax
  181141:	5b                   	pop    %ebx
  181142:	5e                   	pop    %esi
  181143:	c3                   	ret    

00181144 <qm_uart_write>:

int qm_uart_write(const qm_uart_t uart, const uint8_t data)
{
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  181144:	8b 04 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%eax

	while (regs->lsr & QM_UART_LSR_THRE) {
  18114b:	8b 48 14             	mov    0x14(%eax),%ecx
  18114e:	f6 c1 20             	test   $0x20,%cl
  181151:	75 f8                	jne    18114b <qm_uart_write+0x7>
	}
	regs->rbr_thr_dll = data;
  181153:	0f b6 d2             	movzbl %dl,%edx
  181156:	89 10                	mov    %edx,(%eax)
	/* Wait for transaction to complete. */
	while (!(regs->lsr & QM_UART_LSR_TEMT)) {
  181158:	8b 50 14             	mov    0x14(%eax),%edx
  18115b:	f6 c2 40             	test   $0x40,%dl
  18115e:	74 f8                	je     181158 <qm_uart_write+0x14>
	}

	return 0;
}
  181160:	b8 00 00 00 00       	mov    $0x0,%eax
  181165:	c3                   	ret    

00181166 <qm_uart_read>:

int qm_uart_read(const qm_uart_t uart, uint8_t *const data,
		 qm_uart_status_t *status)
{
  181166:	53                   	push   %ebx
	QM_CHECK(uart < QM_UART_NUM, -EINVAL);
	QM_CHECK(data != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];
  181167:	8b 1c 85 1c 00 28 00 	mov    0x28001c(,%eax,4),%ebx

	uint32_t lsr = regs->lsr;
  18116e:	8b 43 14             	mov    0x14(%ebx),%eax
	while (!(lsr & QM_UART_LSR_DR)) {
  181171:	eb 03                	jmp    181176 <qm_uart_read+0x10>
		lsr = regs->lsr;
  181173:	8b 43 14             	mov    0x14(%ebx),%eax
	QM_CHECK(data != NULL, -EINVAL);

	qm_uart_reg_t *const regs = QM_UART[uart];

	uint32_t lsr = regs->lsr;
	while (!(lsr & QM_UART_LSR_DR)) {
  181176:	a8 01                	test   $0x1,%al
  181178:	74 f9                	je     181173 <qm_uart_read+0xd>
		lsr = regs->lsr;
	}
	/* Check if there are any errors on the line. */
	if (lsr & QM_UART_LSR_ERROR_BITS) {
  18117a:	83 e0 1e             	and    $0x1e,%eax
  18117d:	74 0d                	je     18118c <qm_uart_read+0x26>
		if (status) {
  18117f:	85 c9                	test   %ecx,%ecx
  181181:	74 14                	je     181197 <qm_uart_read+0x31>
			*status = (lsr & QM_UART_LSR_ERROR_BITS);
  181183:	89 01                	mov    %eax,(%ecx)
		}
		return -EIO;
  181185:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  18118a:	eb 10                	jmp    18119c <qm_uart_read+0x36>
	}
	*data = regs->rbr_thr_dll;
  18118c:	8b 03                	mov    (%ebx),%eax
  18118e:	88 02                	mov    %al,(%edx)

	return 0;
  181190:	b8 00 00 00 00       	mov    $0x0,%eax
  181195:	eb 05                	jmp    18119c <qm_uart_read+0x36>
	/* Check if there are any errors on the line. */
	if (lsr & QM_UART_LSR_ERROR_BITS) {
		if (status) {
			*status = (lsr & QM_UART_LSR_ERROR_BITS);
		}
		return -EIO;
  181197:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
	*data = regs->rbr_thr_dll;

	return 0;
}
  18119c:	5b                   	pop    %ebx
  18119d:	c3                   	ret    

0018119e <pin_to_register>:
 * @param[in] width The width in bits for each pin in the register.
 *
 * @return The register index of the given pin.
 */
static uint32_t pin_to_register(uint32_t pin, uint32_t width)
{
  18119e:	56                   	push   %esi
  18119f:	53                   	push   %ebx
  1811a0:	89 c3                	mov    %eax,%ebx
  1811a2:	89 d6                	mov    %edx,%esi
	return (pin / (32 / width));
  1811a4:	b8 20 00 00 00       	mov    $0x20,%eax
  1811a9:	ba 00 00 00 00       	mov    $0x0,%edx
  1811ae:	f7 f6                	div    %esi
  1811b0:	89 c1                	mov    %eax,%ecx
  1811b2:	89 d8                	mov    %ebx,%eax
  1811b4:	ba 00 00 00 00       	mov    $0x0,%edx
  1811b9:	f7 f1                	div    %ecx
}
  1811bb:	5b                   	pop    %ebx
  1811bc:	5e                   	pop    %esi
  1811bd:	c3                   	ret    

001811be <pin_to_offset>:
 * @param[in] width The width in bits for each pin in the register.
 *
 * @return The offset for the pin within the register.
 */
static uint32_t pin_to_offset(uint32_t pin, uint32_t width)
{
  1811be:	56                   	push   %esi
  1811bf:	53                   	push   %ebx
  1811c0:	89 c6                	mov    %eax,%esi
  1811c2:	89 d3                	mov    %edx,%ebx
	return ((pin % (32 / width)) * width);
  1811c4:	b8 20 00 00 00       	mov    $0x20,%eax
  1811c9:	ba 00 00 00 00       	mov    $0x0,%edx
  1811ce:	f7 f3                	div    %ebx
  1811d0:	89 c1                	mov    %eax,%ecx
  1811d2:	89 f0                	mov    %esi,%eax
  1811d4:	ba 00 00 00 00       	mov    $0x0,%edx
  1811d9:	f7 f1                	div    %ecx
  1811db:	89 d8                	mov    %ebx,%eax
  1811dd:	0f af c2             	imul   %edx,%eax
}
  1811e0:	5b                   	pop    %ebx
  1811e1:	5e                   	pop    %esi
  1811e2:	c3                   	ret    

001811e3 <qm_pmux_select>:

int qm_pmux_select(const qm_pin_id_t pin, const qm_pmux_fn_t fn)
{
  1811e3:	57                   	push   %edi
  1811e4:	56                   	push   %esi
  1811e5:	53                   	push   %ebx
  1811e6:	89 c7                	mov    %eax,%edi
  1811e8:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);
	QM_CHECK(fn <= QM_PMUX_FN_3, -EINVAL);

	uint32_t reg = pin_to_register(pin, 2);
  1811ea:	ba 02 00 00 00       	mov    $0x2,%edx
  1811ef:	e8 aa ff ff ff       	call   18119e <pin_to_register>
  1811f4:	89 c3                	mov    %eax,%ebx
	uint32_t offs = pin_to_offset(pin, 2);
  1811f6:	ba 02 00 00 00       	mov    $0x2,%edx
  1811fb:	89 f8                	mov    %edi,%eax
  1811fd:	e8 bc ff ff ff       	call   1811be <pin_to_offset>
  181202:	89 c1                	mov    %eax,%ecx

	QM_SCSS_PMUX->pmux_sel[reg] &= ~(MASK_2BIT << offs);
  181204:	83 c3 0c             	add    $0xc,%ebx
  181207:	8b 3c 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%edi
  18120e:	ba 03 00 00 00       	mov    $0x3,%edx
  181213:	d3 e2                	shl    %cl,%edx
  181215:	f7 d2                	not    %edx
  181217:	21 fa                	and    %edi,%edx
  181219:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	QM_SCSS_PMUX->pmux_sel[reg] |= (fn << offs);
  181220:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  181227:	d3 e6                	shl    %cl,%esi
  181229:	09 c6                	or     %eax,%esi
  18122b:	89 34 9d 00 09 80 b0 	mov    %esi,-0x4f7ff700(,%ebx,4)

	return 0;
}
  181232:	b8 00 00 00 00       	mov    $0x0,%eax
  181237:	5b                   	pop    %ebx
  181238:	5e                   	pop    %esi
  181239:	5f                   	pop    %edi
  18123a:	c3                   	ret    

0018123b <qm_pmux_input_en>:
	}
	return 0;
}

int qm_pmux_input_en(const qm_pin_id_t pin, const bool enable)
{
  18123b:	57                   	push   %edi
  18123c:	56                   	push   %esi
  18123d:	53                   	push   %ebx
  18123e:	89 c7                	mov    %eax,%edi
  181240:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);

	uint32_t reg = pin_to_register(pin, 1);
  181242:	ba 01 00 00 00       	mov    $0x1,%edx
  181247:	e8 52 ff ff ff       	call   18119e <pin_to_register>
  18124c:	89 c3                	mov    %eax,%ebx
	uint32_t mask = MASK_1BIT << pin_to_offset(pin, 1);
  18124e:	ba 01 00 00 00       	mov    $0x1,%edx
  181253:	89 f8                	mov    %edi,%eax
  181255:	e8 64 ff ff ff       	call   1811be <pin_to_offset>
  18125a:	ba 01 00 00 00       	mov    $0x1,%edx
  18125f:	88 c1                	mov    %al,%cl
  181261:	d3 e2                	shl    %cl,%edx

	if (enable == false) {
  181263:	89 f0                	mov    %esi,%eax
  181265:	84 c0                	test   %al,%al
  181267:	75 17                	jne    181280 <qm_pmux_input_en+0x45>
		QM_SCSS_PMUX->pmux_in_en[reg] &= ~mask;
  181269:	83 c3 08             	add    $0x8,%ebx
  18126c:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  181273:	f7 d2                	not    %edx
  181275:	21 c2                	and    %eax,%edx
  181277:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
  18127e:	eb 13                	jmp    181293 <qm_pmux_input_en+0x58>
	} else {
		QM_SCSS_PMUX->pmux_in_en[reg] |= mask;
  181280:	83 c3 08             	add    $0x8,%ebx
  181283:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  18128a:	09 c2                	or     %eax,%edx
  18128c:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	}
	return 0;
}
  181293:	b8 00 00 00 00       	mov    $0x0,%eax
  181298:	5b                   	pop    %ebx
  181299:	5e                   	pop    %esi
  18129a:	5f                   	pop    %edi
  18129b:	c3                   	ret    

0018129c <qm_pmux_pullup_en>:

int qm_pmux_pullup_en(const qm_pin_id_t pin, const bool enable)
{
  18129c:	57                   	push   %edi
  18129d:	56                   	push   %esi
  18129e:	53                   	push   %ebx
  18129f:	89 c7                	mov    %eax,%edi
  1812a1:	89 d6                	mov    %edx,%esi
	QM_CHECK(pin < QM_PIN_ID_NUM, -EINVAL);

	uint32_t reg = pin_to_register(pin, 1);
  1812a3:	ba 01 00 00 00       	mov    $0x1,%edx
  1812a8:	e8 f1 fe ff ff       	call   18119e <pin_to_register>
  1812ad:	89 c3                	mov    %eax,%ebx
	uint32_t mask = MASK_1BIT << pin_to_offset(pin, 1);
  1812af:	ba 01 00 00 00       	mov    $0x1,%edx
  1812b4:	89 f8                	mov    %edi,%eax
  1812b6:	e8 03 ff ff ff       	call   1811be <pin_to_offset>
  1812bb:	ba 01 00 00 00       	mov    $0x1,%edx
  1812c0:	88 c1                	mov    %al,%cl
  1812c2:	d3 e2                	shl    %cl,%edx

	if (enable == false) {
  1812c4:	89 f0                	mov    %esi,%eax
  1812c6:	84 c0                	test   %al,%al
  1812c8:	75 14                	jne    1812de <qm_pmux_pullup_en+0x42>
		QM_SCSS_PMUX->pmux_pullup[reg] &= ~mask;
  1812ca:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  1812d1:	f7 d2                	not    %edx
  1812d3:	21 c2                	and    %eax,%edx
  1812d5:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
  1812dc:	eb 10                	jmp    1812ee <qm_pmux_pullup_en+0x52>
	} else {
		QM_SCSS_PMUX->pmux_pullup[reg] |= mask;
  1812de:	8b 04 9d 00 09 80 b0 	mov    -0x4f7ff700(,%ebx,4),%eax
  1812e5:	09 c2                	or     %eax,%edx
  1812e7:	89 14 9d 00 09 80 b0 	mov    %edx,-0x4f7ff700(,%ebx,4)
	}
	return 0;
}
  1812ee:	b8 00 00 00 00       	mov    $0x0,%eax
  1812f3:	5b                   	pop    %ebx
  1812f4:	5e                   	pop    %esi
  1812f5:	5f                   	pop    %edi
  1812f6:	c3                   	ret    

001812f7 <k_cpu_idle>:
	_sys_k_event_logger_enter_sleep();
#if defined(CONFIG_BOOT_TIME_MEASUREMENT)
	__idle_tsc = _tsc_read();
#endif

	__asm__ volatile (
  1812f7:	fb                   	sti    
  1812f8:	f4                   	hlt    
  1812f9:	c3                   	ret    

001812fa <_SysFatalErrorHandler>:
{
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
  1812fa:	e8 dd 0c 00 00       	call   181fdc <k_is_in_isr>
  1812ff:	85 c0                	test   %eax,%eax
  181301:	75 09                	jne    18130c <_SysFatalErrorHandler+0x12>
  181303:	e8 e2 0c 00 00       	call   181fea <_is_thread_essential>
  181308:	85 c0                	test   %eax,%eax
  18130a:	74 25                	je     181331 <_SysFatalErrorHandler+0x37>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
  18130c:	e8 cb 0c 00 00       	call   181fdc <k_is_in_isr>
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
  181311:	85 c0                	test   %eax,%eax
  181313:	74 07                	je     18131c <_SysFatalErrorHandler+0x22>
  181315:	b8 d0 25 18 00       	mov    $0x1825d0,%eax
  18131a:	eb 05                	jmp    181321 <_SysFatalErrorHandler+0x27>
  18131c:	b8 d4 25 18 00       	mov    $0x1825d4,%eax
  181321:	50                   	push   %eax
  181322:	68 24 26 18 00       	push   $0x182624
  181327:	e8 59 f9 ff ff       	call   180c85 <printk>
  18132c:	83 c4 08             	add    $0x8,%esp
  18132f:	eb fe                	jmp    18132f <_SysFatalErrorHandler+0x35>
		       k_is_in_isr() ? "ISR" : "essential thread");
		for (;;)
			; /* spin forever */
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
  181331:	ff 35 48 01 28 00    	pushl  0x280148
  181337:	68 44 26 18 00       	push   $0x182644
  18133c:	e8 44 f9 ff ff       	call   180c85 <printk>
  181341:	83 c4 08             	add    $0x8,%esp
	k_thread_abort(_current);
  181344:	a1 48 01 28 00       	mov    0x280148,%eax
  181349:	e8 e6 0e 00 00       	call   182234 <k_thread_abort>

0018134e <_cache_line_size_get>:
	#define CPUID_CACHE_LINE_MASK (0xff << 8)

	GTEXT(_cache_line_size_get)

SECTION_FUNC(TEXT, _cache_line_size_get)
	pushl %ebx
  18134e:	53                   	push   %ebx
	movl $1, %eax
  18134f:	b8 01 00 00 00       	mov    $0x1,%eax
	cpuid
  181354:	0f a2                	cpuid  
	movl %ebx, %eax
  181356:	89 d8                	mov    %ebx,%eax
	andl $CPUID_CACHE_LINE_MASK, %eax
  181358:	25 00 ff 00 00       	and    $0xff00,%eax
	shrl $5,%eax	/* shift right 8 to get value, then multiple by 8
  18135d:	c1 e8 05             	shr    $0x5,%eax
					 * to get cache line size */
	popl %ebx
  181360:	5b                   	pop    %ebx
	ret
  181361:	c3                   	ret    

00181362 <init_cache_line_size>:

#if defined(CONFIG_CACHE_LINE_SIZE_DETECT)
size_t sys_cache_line_size;
static void init_cache_line_size(void)
{
	sys_cache_line_size = _cache_line_size_get();
  181362:	e8 e7 ff ff ff       	call   18134e <_cache_line_size_get>
  181367:	a3 6c 02 28 00       	mov    %eax,0x28026c
  18136c:	c3                   	ret    

0018136d <init_cache>:
static int init_cache(struct device *unused)
{
	ARG_UNUSED(unused);

	init_cache_flush();
	init_cache_line_size();
  18136d:	e8 f0 ff ff ff       	call   181362 <init_cache_line_size>

	return 0;
}
  181372:	b8 00 00 00 00       	mov    $0x0,%eax
  181377:	c3                   	ret    

00181378 <_exception_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * exception exits.
	 */

	cld
  181378:	fc                   	cld    


	/*
	 * Swap ecx and handler function on the current stack;
	 */
	xchgl	%ecx, (%esp)
  181379:	87 0c 24             	xchg   %ecx,(%esp)

	/*
	 * Push the remaining volatile registers on the existing stack.
	 */

	pushl	%eax
  18137c:	50                   	push   %eax
	pushl	%edx
  18137d:	52                   	push   %edx
	/*
	 * Push the cooperative registers on the existing stack as they are
	 * required by debug tools.
	 */

	pushl	%edi
  18137e:	57                   	push   %edi
	pushl	%esi
  18137f:	56                   	push   %esi
	pushl	%ebx
  181380:	53                   	push   %ebx
	pushl	%ebp
  181381:	55                   	push   %ebp

	leal	44(%esp), %eax   /* Calculate ESP before interrupt occurred */
  181382:	8d 44 24 2c          	lea    0x2c(%esp),%eax
	pushl	%eax             /* Save calculated ESP */
  181386:	50                   	push   %eax

	/* ESP is pointing to the ESF at this point */

#if defined(CONFIG_FP_SHARING) ||  defined(CONFIG_GDB_INFO)

	movl	_kernel + _kernel_offset_to_current, %edx
  181387:	8b 15 48 01 28 00    	mov    0x280148,%edx

	/* inc exception nest count */
	incl	_thread_offset_to_excNestCount(%edx)
  18138d:	ff 42 44             	incl   0x44(%edx)
     * the current execution context if this is the outermost exception.
     * The ESF pointer is used by debug tools to locate the volatile
     * registers and the stack of the preempted thread.
     */

	testb	$_EXC_ACTIVE, _thread_offset_to_thread_state(%edx)
  181390:	f6 42 09 40          	testb  $0x40,0x9(%edx)
	jne	alreadyInException
  181394:	75 03                	jne    181399 <alreadyInException>
	movl	%esp, _thread_offset_to_esf(%edx)
  181396:	89 62 40             	mov    %esp,0x40(%edx)

00181399 <alreadyInException>:
	 * (where needed) if the exception handler causes a context switch.
	 * It also indicates to debug tools that an exception is being
	 * handled in the event of a context switch.
	 */

	orb	$_EXC_ACTIVE, _thread_offset_to_thread_state(%edx)
  181399:	80 4a 09 40          	orb    $0x40,0x9(%edx)
	 * Test IF bit of saved EFLAGS and re-enable interrupts if IF=1.
	 */

	/* ESP is still pointing to the ESF at this point */

	testl	$0x200, __NANO_ESF_eflags_OFFSET(%esp)
  18139d:	f7 44 24 2c 00 02 00 	testl  $0x200,0x2c(%esp)
  1813a4:	00 
	je	allDone
  1813a5:	74 01                	je     1813a8 <allDone>
	sti
  1813a7:	fb                   	sti    

001813a8 <allDone>:

allDone:
#if CONFIG_X86_IAMCU
	movl	%esp, %eax		/* NANO_ESF * parameter */
  1813a8:	89 e0                	mov    %esp,%eax
#else
	pushl	%esp			/* push NANO_ESF * parameter */
#endif
	call	*%ecx			/* call exception handler */
  1813aa:	ff d1                	call   *%ecx
	addl	$0x4, %esp
#endif

#if defined(CONFIG_FP_SHARING) || defined(CONFIG_GDB_INFO)

	movl	_kernel + _kernel_offset_to_current, %ecx
  1813ac:	8b 0d 48 01 28 00    	mov    0x280148,%ecx
	 * Must lock interrupts to prevent outside interference.
	 * (Using "lock" prefix would be nicer, but this won't work
	 * on platforms that don't respect the CPU's bus lock signal.)
	 */

	cli
  1813b2:	fa                   	cli    

	/*
	 * Determine whether exiting from a nested interrupt.
	 */

	decl	_thread_offset_to_excNestCount(%ecx)
  1813b3:	ff 49 44             	decl   0x44(%ecx)

	cmpl	$0, _thread_offset_to_excNestCount(%ecx)
  1813b6:	83 79 44 00          	cmpl   $0x0,0x44(%ecx)
	jne	nestedException
  1813ba:	75 04                	jne    1813c0 <nestedException>
	 * Clear the _EXC_ACTIVE bit in the k_thread of the current execution
	 * context if we are not in a nested exception (ie, when we exit the
	 * outermost exception).
	 */

	andb	$~_EXC_ACTIVE, _thread_offset_to_thread_state(%ecx)
  1813bc:	80 61 09 bf          	andb   $0xbf,0x9(%ecx)

001813c0 <nestedException>:
	 * Pop the non-volatile registers from the stack.
	 * Note that debug tools may have altered the saved register values while
	 * the task was stopped, and we want to pick up the altered values.
	 */

	popl	%ebp		/* Discard saved ESP */
  1813c0:	5d                   	pop    %ebp
	popl	%ebp
  1813c1:	5d                   	pop    %ebp
	popl	%ebx
  1813c2:	5b                   	pop    %ebx
	popl	%esi
  1813c3:	5e                   	pop    %esi
	popl	%edi
  1813c4:	5f                   	pop    %edi

	/* restore edx and ecx which are always saved on the stack */

	popl	%edx
  1813c5:	5a                   	pop    %edx
	popl	%eax
  1813c6:	58                   	pop    %eax
	popl	%ecx
  1813c7:	59                   	pop    %ecx

	addl	$4, %esp	/* "pop" error code */
  1813c8:	83 c4 04             	add    $0x4,%esp

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  1813cb:	cf                   	iret   

001813cc <_interrupt_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * interrupt exits via the IRET instruction.
	 */

	cld
  1813cc:	fc                   	cld    

	/*
	 * Swap EAX with isr_param and EDX with isr.
	 * Push ECX onto the stack
	 */
	xchgl	%eax, 4(%esp)
  1813cd:	87 44 24 04          	xchg   %eax,0x4(%esp)
	xchgl	%edx, (%esp)
  1813d1:	87 14 24             	xchg   %edx,(%esp)
	pushl	%ecx
  1813d4:	51                   	push   %ecx

	/* Push EDI as we will use it for scratch space.
	 * Rest of the callee-saved regs get saved by invocation of C
	 * functions (isr handler, _Swap(), etc)
	 */
	pushl	%edi
  1813d5:	57                   	push   %edi
	popl	%eax
#endif

	/* load %ecx with &_kernel */

	movl	$_kernel, %ecx
  1813d6:	b9 40 01 28 00       	mov    $0x280140,%ecx

	/* switch to the interrupt stack for the non-nested case */

	incl	_kernel_offset_to_nested(%ecx)
  1813db:	ff 01                	incl   (%ecx)

	/* use interrupt stack if not nested */
	cmpl	$1, _kernel_offset_to_nested(%ecx)
  1813dd:	83 39 01             	cmpl   $0x1,(%ecx)
#ifdef CONFIG_DEBUG_INFO
	jne	nested_save_isf
#else
	jne	alreadyOnIntStack
  1813e0:	75 06                	jne    1813e8 <alreadyOnIntStack>
	/*
	 * switch to base of the interrupt stack: save esp in edi, then load
	 * irq_stack pointer
	 */

	movl	%esp, %edi
  1813e2:	89 e7                	mov    %esp,%edi
	movl	_kernel_offset_to_irq_stack(%ecx), %esp
  1813e4:	8b 61 04             	mov    0x4(%ecx),%esp


	/* save thread's stack pointer onto base of interrupt stack */

	pushl	%edi			/* Save stack pointer */
  1813e7:	57                   	push   %edi

001813e8 <alreadyOnIntStack>:
	 * stack for sys V calling convention
	 */
	push	%eax
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	sti			/* re-enable interrupts */
  1813e8:	fb                   	sti    
#endif
	/* Now call the interrupt handler */
	call	*%edx
  1813e9:	ff d2                	call   *%edx
#ifndef CONFIG_X86_IAMCU
	/* Discard ISR argument */
	addl	$0x4, %esp
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	cli			/* disable interrupts again */
  1813eb:	fa                   	cli    
#endif

	/* irq_controller.h interface */
	_irq_controller_eoi_macro
  1813ec:	31 c0                	xor    %eax,%eax
  1813ee:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_start
#endif

	/* determine whether exiting from a nested interrupt */
	movl	$_kernel, %ecx
  1813f3:	b9 40 01 28 00       	mov    $0x280140,%ecx
#ifdef CONFIG_DEBUG_INFO
	popl	_kernel_offset_to_isf(%ecx)    /* Restore old ISF */
#endif
	decl	_kernel_offset_to_nested(%ecx)	/* dec interrupt nest count */
  1813f8:	ff 09                	decl   (%ecx)
	jne	nestedInterrupt                 /* 'iret' if nested case */
  1813fa:	75 2b                	jne    181427 <nestedInterrupt>


#ifdef CONFIG_PREEMPT_ENABLED
	movl	_kernel_offset_to_current(%ecx), %edx
  1813fc:	8b 51 08             	mov    0x8(%ecx),%edx

	/*
	 * Non-preemptible thread ? Do not schedule (see explanation of
	 * preempt field in kernel_struct.h).
	 */
	cmpw	$_NON_PREEMPT_THRESHOLD, _thread_offset_to_preempt(%edx)
  1813ff:	66 81 7a 0a 80 00    	cmpw   $0x80,0xa(%edx)
	jae	noReschedule
  181405:	73 1f                	jae    181426 <noReschedule>


	/* reschedule only if the scheduler says that we must do so */
	cmpl	%edx, _kernel_offset_to_ready_q_cache(%ecx)
  181407:	39 51 14             	cmp    %edx,0x14(%ecx)
	je	noReschedule
  18140a:	74 1a                	je     181426 <noReschedule>
	 * preserved using the lazy save/restore algorithm, or to indicate to
	 * debug tools that a preemptive context switch has occurred.
	 */

#if defined(CONFIG_FP_SHARING) ||  defined(CONFIG_GDB_INFO)
	orb	$_INT_ACTIVE, _thread_offset_to_thread_state(%edx)
  18140c:	80 4a 09 80          	orb    $0x80,0x9(%edx)
	 * the existing _Swap() primitive to save the remaining
	 * thread's registers (including floating point) and perform
	 * a switch to the new thread.
	 */

	popl	%esp	/* switch back to outgoing thread's stack */
  181410:	5c                   	pop    %esp
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif

	pushfl			/* push KERNEL_LOCK_KEY argument */
  181411:	9c                   	pushf  
#ifdef CONFIG_X86_IAMCU
	/* IAMCU first argument goes into a register, not the stack.
	 */
	popl	%eax
  181412:	58                   	pop    %eax
#endif
	call	_Swap
  181413:	e8 30 00 00 00       	call   181448 <_Swap>
	 * _Swap() has restored the floating point registers, if needed.
	 * Clear the _INT_ACTIVE bit in the interrupted thread's state
	 * since it has served its purpose.
	 */

	movl	_kernel + _kernel_offset_to_current, %eax
  181418:	a1 48 01 28 00       	mov    0x280148,%eax
	andb	$~_INT_ACTIVE, _thread_offset_to_thread_state(%eax)
  18141d:	80 60 09 7f          	andb   $0x7f,0x9(%eax)

	/* Restore volatile registers and return to the interrupted thread */
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_stop
#endif
	popl	%edi
  181421:	5f                   	pop    %edi
	popl	%ecx
  181422:	59                   	pop    %ecx
	popl	%edx
  181423:	5a                   	pop    %edx
	popl	%eax
  181424:	58                   	pop    %eax

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  181425:	cf                   	iret   

00181426 <noReschedule>:
	/*
	 * A thread reschedule is not required; switch back to the
	 * interrupted thread's stack and restore volatile registers
	 */

	popl	%esp		/* pop thread stack pointer */
  181426:	5c                   	pop    %esp

00181427 <nestedInterrupt>:
	popl	%ebp        /* Discard saved ESP */
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif
	popl	%edi
  181427:	5f                   	pop    %edi
	popl	%ecx		/* pop volatile registers in reverse order */
  181428:	59                   	pop    %ecx
	popl	%edx
  181429:	5a                   	pop    %edx
	popl	%eax
  18142a:	58                   	pop    %eax
	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  18142b:	cf                   	iret   

0018142c <_SpuriousIntNoErrCodeHandler>:
 * thus _SpuriousIntNoErrCodeHandler()/_SpuriousIntHandler() shall be
 * invoked with interrupts disabled.
 */
SECTION_FUNC(TEXT, _SpuriousIntNoErrCodeHandler)

	pushl	$0			/* push dummy err code onto stk */
  18142c:	6a 00                	push   $0x0

0018142e <_SpuriousIntHandler>:
	/* fall through to _SpuriousIntHandler */


SECTION_FUNC(TEXT, _SpuriousIntHandler)

	cld				/* Clear direction flag */
  18142e:	fc                   	cld    

	/* Create the ESF */

	pushl %eax
  18142f:	50                   	push   %eax
	pushl %ecx
  181430:	51                   	push   %ecx
	pushl %edx
  181431:	52                   	push   %edx
	pushl %edi
  181432:	57                   	push   %edi
	pushl %esi
  181433:	56                   	push   %esi
	pushl %ebx
  181434:	53                   	push   %ebx
	pushl %ebp
  181435:	55                   	push   %ebp

	leal	44(%esp), %ecx   /* Calculate ESP before exception occurred */
  181436:	8d 4c 24 2c          	lea    0x2c(%esp),%ecx
	pushl	%ecx             /* Save calculated ESP */
  18143a:	51                   	push   %ecx

#ifndef CONFIG_X86_IAMCU
	pushl	%esp			/* push cur stack pointer: pEsf arg */
#else
	mov	%esp, %edx
  18143b:	89 e2                	mov    %esp,%edx
#endif

	/* re-enable interrupts */
	sti
  18143d:	fb                   	sti    

	/* push the 'unsigned int reason' parameter */
#ifndef CONFIG_X86_IAMCU
	pushl	$_NANO_ERR_SPURIOUS_INT
#else
	movl	$_NANO_ERR_SPURIOUS_INT, %eax
  18143e:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
	/* call the fatal error handler */
	call	_NanoFatalErrorHandler
  181443:	e8 d5 00 00 00       	call   18151d <_NanoFatalErrorHandler>

00181448 <_Swap>:
SECTION_FUNC(TEXT, _Swap)
#ifdef CONFIG_X86_IAMCU
	/* save EFLAGS on stack right before return address, just as SYSV would
	 * have done
	 */
	pushl	0(%esp)
  181448:	ff 34 24             	pushl  (%esp)
	movl	%eax, 4(%esp)
  18144b:	89 44 24 04          	mov    %eax,0x4(%esp)
	 * any of these registers into the k_thread.  Only the 'esp' register
	 * after all the pushes have been performed) will be stored in the
	 * k_thread.
	 */

	pushl	%edi
  18144f:	57                   	push   %edi

	movl	$_kernel, %edi
  181450:	bf 40 01 28 00       	mov    $0x280140,%edi

	pushl	%esi
  181455:	56                   	push   %esi
	pushl	%ebx
  181456:	53                   	push   %ebx
	pushl	%ebp
  181457:	55                   	push   %ebp
	 * -EAGAIN eliminates the need for the timeout code to set it.
	 * If another value is ever needed, it can be modified with
	 * _set_thread_return_value().
	 */

	pushl   _k_neg_eagain
  181458:	ff 35 24 28 18 00    	pushl  0x182824


	/* save esp into k_thread structure */

	movl	_kernel_offset_to_current(%edi), %ecx
  18145e:	8b 4f 08             	mov    0x8(%edi),%ecx
	movl	%esp, _thread_offset_to_esp(%ecx)
  181461:	89 61 28             	mov    %esp,0x28(%ecx)

#ifdef CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH
	/* Register the context switch */
	call	_sys_k_event_logger_context_switch
#endif
	movl	_kernel_offset_to_ready_q_cache(%edi), %eax
  181464:	8b 47 14             	mov    0x14(%edi),%eax

#endif /* CONFIG_FP_SHARING */

	/* update _kernel.current to reflect incoming thread */

	movl    %eax, _kernel_offset_to_current(%edi)
  181467:	89 47 08             	mov    %eax,0x8(%edi)

	/* recover task/fiber stack pointer from k_thread */

	movl	_thread_offset_to_esp(%eax), %esp
  18146a:	8b 60 28             	mov    0x28(%eax),%esp


	/* load return value from a possible _set_thread_return_value() */

	popl	%eax
  18146d:	58                   	pop    %eax

	/* pop the non-volatile registers from the stack */

	popl	%ebp
  18146e:	5d                   	pop    %ebp
	popl	%ebx
  18146f:	5b                   	pop    %ebx
	popl	%esi
  181470:	5e                   	pop    %esi
	popl	%edi
  181471:	5f                   	pop    %edi
	 * - in unified kernel, -EINVAL
	 */

	/* Utilize the 'eflags' parameter to _Swap() */

	pushl	4(%esp)
  181472:	ff 74 24 04          	pushl  0x4(%esp)
	/* restore _Swap's %eax */
	popl	%eax

skipIntLatencyStop:
#endif
	popfl
  181476:	9d                   	popf   
#if CONFIG_X86_IAMCU
	/* Remember that eflags we stuck into the stack before the return
	 * address? need to get it out of there since the calling convention
	 * will not do that for us.
	 */
	popl	%edx
  181477:	5a                   	pop    %edx
	movl	%edx, (%esp)
  181478:	89 14 24             	mov    %edx,(%esp)
#endif
	ret
  18147b:	c3                   	ret    

0018147c <_new_thread_internal>:
 * @return N/A
 */
static void _new_thread_internal(char *pStackMem, unsigned stackSize,
				 int priority,
				 unsigned options)
{
  18147c:	56                   	push   %esi
  18147d:	53                   	push   %ebx
  18147e:	89 c3                	mov    %eax,%ebx
  181480:	89 d6                	mov    %edx,%esi
  181482:	89 ca                	mov    %ecx,%edx
	unsigned long *pInitialCtx;
	/* ptr to the new task's k_thread */
	struct k_thread *thread = (struct k_thread *)pStackMem;

#if (defined(CONFIG_FP_SHARING) || defined(CONFIG_GDB_INFO))
	thread->arch.excNestCount = 0;
  181484:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
#endif /* CONFIG_FP_SHARING || CONFIG_GDB_INFO */

	_init_thread_base(&thread->base, priority, _THREAD_PRESTART, options);
  18148b:	ff 74 24 0c          	pushl  0xc(%esp)
  18148f:	b9 04 00 00 00       	mov    $0x4,%ecx
  181494:	e8 6b 0d 00 00       	call   182204 <_init_thread_base>
  181499:	83 c4 04             	add    $0x4,%esp

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
  18149c:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
	thread->fn_abort = NULL;
  1814a3:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
	 * the base address of the stack which is past the initial stack frame.
	 * Therefore some of the calculations done in the other routines that
	 * initialize the stack frame need to be repeated.
	 */

	pInitialCtx = (unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
  1814aa:	8d 14 33             	lea    (%ebx,%esi,1),%edx
  1814ad:	83 e2 fc             	and    $0xfffffffc,%edx
#ifdef CONFIG_THREAD_MONITOR
	/*
	 * In debug mode thread->entry give direct access to the thread entry
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitialCtx -
  1814b0:	8d 42 c0             	lea    -0x40(%edx),%eax
  1814b3:	89 43 34             	mov    %eax,0x34(%ebx)
	 *  - 4 thread entry routine parameters
	 *  - eflags
	 *  - eip (so that _Swap() "returns" to the entry point)
	 *  - edi, esi, ebx, ebp,  eax
	 */
	pInitialCtx -= 11;
  1814b6:	83 ea 2c             	sub    $0x2c,%edx

	thread->callee_saved.esp = (unsigned long)pInitialCtx;
  1814b9:	89 53 28             	mov    %edx,0x28(%ebx)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1814bc:	9c                   	pushf  
  1814bd:	fa                   	cli    
  1814be:	58                   	pop    %eax
static ALWAYS_INLINE void thread_monitor_init(struct k_thread *thread)
{
	unsigned int key;

	key = irq_lock();
	thread->next_thread = _kernel.threads;
  1814bf:	8b 15 5c 02 28 00    	mov    0x28025c,%edx
  1814c5:	89 53 38             	mov    %edx,0x38(%ebx)
	_kernel.threads = thread;
  1814c8:	89 1d 5c 02 28 00    	mov    %ebx,0x28025c
  1814ce:	f6 c4 02             	test   $0x2,%ah
  1814d1:	74 01                	je     1814d4 <_new_thread_internal+0x58>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1814d3:	fb                   	sti    
	PRINTK("\nInitial context ESP = 0x%x\n", thread->coopReg.esp);

	PRINTK("\nstruct thread * = 0x%x", thread);

	thread_monitor_init(thread);
}
  1814d4:	5b                   	pop    %ebx
  1814d5:	5e                   	pop    %esi
  1814d6:	c3                   	ret    

001814d7 <_new_thread>:
 */
void _new_thread(char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
  1814d7:	56                   	push   %esi
  1814d8:	53                   	push   %ebx
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitialThread =
		(unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
  1814d9:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  1814dc:	83 e3 fc             	and    $0xfffffffc,%ebx
	 * primitive.
	 */

	/* push arguments required by _thread_entry() */

	*--pInitialThread = (unsigned long)parameter3;
  1814df:	8b 74 24 14          	mov    0x14(%esp),%esi
  1814e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
	*--pInitialThread = (unsigned long)parameter2;
  1814e6:	8b 74 24 10          	mov    0x10(%esp),%esi
  1814ea:	89 73 f8             	mov    %esi,-0x8(%ebx)
	*--pInitialThread = (unsigned long)parameter1;
  1814ed:	8b 74 24 0c          	mov    0xc(%esp),%esi
  1814f1:	89 73 f4             	mov    %esi,-0xc(%ebx)
	*--pInitialThread = (unsigned long)pEntry;
  1814f4:	89 4b f0             	mov    %ecx,-0x10(%ebx)
 */
static inline unsigned int EflagsGet(void)
{
	unsigned int eflags; /* EFLAGS register contents */

	__asm__ volatile(
  1814f7:	9c                   	pushf  
  1814f8:	59                   	pop    %ecx

	/* push initial EFLAGS; only modify IF and IOPL bits */

	*--pInitialThread = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
  1814f9:	80 e5 cd             	and    $0xcd,%ch
  1814fc:	80 cd 02             	or     $0x2,%ch
  1814ff:	89 4b ec             	mov    %ecx,-0x14(%ebx)
	/*
	 * Arrange for the _thread_entry_wrapper() function to be called
	 * to adjust the stack before _thread_entry() is invoked.
	 */

	*--pInitialThread = (unsigned long)_thread_entry_wrapper;
  181502:	c7 43 e8 60 00 18 00 	movl   $0x180060,-0x18(%ebx)
	/*
	 * The k_thread structure is located at the "low end" of memory set
	 * aside for the thread's stack.
	 */

	_new_thread_internal(pStackMem, stackSize, priority, options);
  181509:	ff 74 24 1c          	pushl  0x1c(%esp)
  18150d:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  181511:	e8 66 ff ff ff       	call   18147c <_new_thread_internal>
  181516:	83 c4 04             	add    $0x4,%esp
}
  181519:	5b                   	pop    %ebx
  18151a:	5e                   	pop    %esi
  18151b:	c3                   	ret    

0018151c <_debug_fatal_hook>:
#include <misc/printk.h>
#include <arch/x86/irq_controller.h>
#include <arch/x86/segmentation.h>
#include <exception.h>

__weak void _debug_fatal_hook(const NANO_ESF *esf) { ARG_UNUSED(esf); }
  18151c:	c3                   	ret    

0018151d <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
  18151d:	55                   	push   %ebp
  18151e:	57                   	push   %edi
  18151f:	56                   	push   %esi
  181520:	53                   	push   %ebx
  181521:	83 ec 24             	sub    $0x24,%esp
  181524:	89 c6                	mov    %eax,%esi
  181526:	89 d7                	mov    %edx,%edi
	_debug_fatal_hook(pEsf);
  181528:	89 d0                	mov    %edx,%eax
  18152a:	e8 ed ff ff ff       	call   18151c <_debug_fatal_hook>

#ifdef CONFIG_PRINTK

	/* Display diagnostic information about the error */

	switch (reason) {
  18152f:	83 fe 03             	cmp    $0x3,%esi
  181532:	74 4c                	je     181580 <_NanoFatalErrorHandler+0x63>
  181534:	83 fe 03             	cmp    $0x3,%esi
  181537:	77 06                	ja     18153f <_NanoFatalErrorHandler+0x22>
  181539:	85 f6                	test   %esi,%esi
  18153b:	74 0e                	je     18154b <_NanoFatalErrorHandler+0x2e>
  18153d:	eb 5f                	jmp    18159e <_NanoFatalErrorHandler+0x81>
  18153f:	83 fe 05             	cmp    $0x5,%esi
  181542:	74 4b                	je     18158f <_NanoFatalErrorHandler+0x72>
  181544:	83 fe 06             	cmp    $0x6,%esi
  181547:	74 63                	je     1815ac <_NanoFatalErrorHandler+0x8f>
  181549:	eb 53                	jmp    18159e <_NanoFatalErrorHandler+0x81>
 * @return the vector of the interrupt that is currently being processed, or
 * -1 if this can't be determined
 */
static inline int _irq_controller_isr_vector_get(void)
{
	return __irq_controller_isr_vector_get();
  18154b:	e8 2d ef ff ff       	call   18047d <__irq_controller_isr_vector_get>
  181550:	89 c3                	mov    %eax,%ebx
		break;

	case _NANO_ERR_SPURIOUS_INT: {
		int vector = _irq_controller_isr_vector_get();

		printk("***** Unhandled interrupt vector ");
  181552:	68 6c 26 18 00       	push   $0x18266c
  181557:	e8 29 f7 ff ff       	call   180c85 <printk>
  18155c:	83 c4 04             	add    $0x4,%esp
		if (vector >= 0) {
  18155f:	85 db                	test   %ebx,%ebx
  181561:	78 0e                	js     181571 <_NanoFatalErrorHandler+0x54>
			printk("%d ", vector);
  181563:	53                   	push   %ebx
  181564:	68 e5 25 18 00       	push   $0x1825e5
  181569:	e8 17 f7 ff ff       	call   180c85 <printk>
  18156e:	83 c4 08             	add    $0x8,%esp
		}
		printk("*****\n");
  181571:	68 e9 25 18 00       	push   $0x1825e9
  181576:	e8 0a f7 ff ff       	call   180c85 <printk>
  18157b:	83 c4 04             	add    $0x4,%esp
		break;
  18157e:	eb 2c                	jmp    1815ac <_NanoFatalErrorHandler+0x8f>
	}
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
  181580:	68 90 26 18 00       	push   $0x182690
  181585:	e8 fb f6 ff ff       	call   180c85 <printk>
  18158a:	83 c4 04             	add    $0x4,%esp
		break;
  18158d:	eb 1d                	jmp    1815ac <_NanoFatalErrorHandler+0x8f>
		break;
#endif /* CONFIG_STACK_CANARIES */


	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
  18158f:	68 bc 26 18 00       	push   $0x1826bc
  181594:	e8 ec f6 ff ff       	call   180c85 <printk>
  181599:	83 c4 04             	add    $0x4,%esp
		break;
  18159c:	eb 0e                	jmp    1815ac <_NanoFatalErrorHandler+0x8f>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
  18159e:	56                   	push   %esi
  18159f:	68 e4 26 18 00       	push   $0x1826e4
  1815a4:	e8 dc f6 ff ff       	call   180c85 <printk>
  1815a9:	83 c4 08             	add    $0x8,%esp
		break;
	}

	printk("Current thread ID = %p\n"
  1815ac:	8b 6f 2c             	mov    0x2c(%edi),%ebp
  1815af:	8b 07                	mov    (%edi),%eax
  1815b1:	89 04 24             	mov    %eax,(%esp)
  1815b4:	8b 4f 04             	mov    0x4(%edi),%ecx
  1815b7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1815bb:	8b 5f 10             	mov    0x10(%edi),%ebx
  1815be:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  1815c2:	8b 57 0c             	mov    0xc(%edi),%edx
  1815c5:	89 54 24 0c          	mov    %edx,0xc(%esp)
  1815c9:	8b 47 14             	mov    0x14(%edi),%eax
  1815cc:	89 44 24 10          	mov    %eax,0x10(%esp)
  1815d0:	8b 4f 1c             	mov    0x1c(%edi),%ecx
  1815d3:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  1815d7:	8b 5f 08             	mov    0x8(%edi),%ebx
  1815da:	89 5c 24 18          	mov    %ebx,0x18(%esp)
  1815de:	8b 57 18             	mov    0x18(%edi),%edx
  1815e1:	89 54 24 1c          	mov    %edx,0x1c(%esp)
  1815e5:	8b 47 24             	mov    0x24(%edi),%eax
  1815e8:	89 44 24 20          	mov    %eax,0x20(%esp)
	       "Faulting segment:address = 0x%x:0x%x\n"
	       "eax: 0x%x, ebx: 0x%x, ecx: 0x%x, edx: 0x%x\n"
	       "esi: 0x%x, edi: 0x%x, ebp: 0%x, esp: 0x%x\n"
	       "eflags: 0x%x\n",
	       k_current_get(),
	       pEsf->cs & 0xFFFF, pEsf->eip,
  1815ec:	8b 5f 28             	mov    0x28(%edi),%ebx
	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}

	printk("Current thread ID = %p\n"
  1815ef:	e8 0d 06 00 00       	call   181c01 <k_current_get>
  1815f4:	55                   	push   %ebp
  1815f5:	ff 74 24 04          	pushl  0x4(%esp)
  1815f9:	ff 74 24 0c          	pushl  0xc(%esp)
  1815fd:	ff 74 24 14          	pushl  0x14(%esp)
  181601:	ff 74 24 1c          	pushl  0x1c(%esp)
  181605:	ff 74 24 24          	pushl  0x24(%esp)
  181609:	ff 74 24 2c          	pushl  0x2c(%esp)
  18160d:	ff 74 24 34          	pushl  0x34(%esp)
  181611:	ff 74 24 3c          	pushl  0x3c(%esp)
  181615:	ff 74 24 44          	pushl  0x44(%esp)
  181619:	0f b7 d3             	movzwl %bx,%edx
  18161c:	52                   	push   %edx
  18161d:	50                   	push   %eax
  18161e:	68 08 27 18 00       	push   $0x182708
  181623:	e8 5d f6 ff ff       	call   180c85 <printk>
  181628:	83 c4 34             	add    $0x34,%esp
	/*
	 * Error was fatal to a kernel task or a fiber; invoke the system
	 * fatal error handling policy defined for the platform.
	 */

	_SysFatalErrorHandler(reason, pEsf);
  18162b:	89 fa                	mov    %edi,%edx
  18162d:	89 f0                	mov    %esi,%eax
  18162f:	e8 c6 fc ff ff       	call   1812fa <_SysFatalErrorHandler>

00181634 <generic_exc_handle>:

#if CONFIG_EXCEPTION_DEBUG

static FUNC_NORETURN void generic_exc_handle(unsigned int vector,
					     const NANO_ESF *pEsf)
{
  181634:	56                   	push   %esi
  181635:	53                   	push   %ebx
  181636:	89 c3                	mov    %eax,%ebx
  181638:	89 d6                	mov    %edx,%esi
	printk("***** CPU exception %d\n", vector);
  18163a:	50                   	push   %eax
  18163b:	68 f0 25 18 00       	push   $0x1825f0
  181640:	e8 40 f6 ff ff       	call   180c85 <printk>
  181645:	83 c4 08             	add    $0x8,%esp
	if ((1 << vector) & _EXC_ERROR_CODE_FAULTS) {
  181648:	b8 00 7d 02 00       	mov    $0x27d00,%eax
  18164d:	88 d9                	mov    %bl,%cl
  18164f:	d3 f8                	sar    %cl,%eax
  181651:	a8 01                	test   $0x1,%al
  181653:	74 10                	je     181665 <generic_exc_handle+0x31>
		printk("***** Exception code: 0x%x\n", pEsf->errorCode);
  181655:	ff 76 20             	pushl  0x20(%esi)
  181658:	68 08 26 18 00       	push   $0x182608
  18165d:	e8 23 f6 ff ff       	call   180c85 <printk>
  181662:	83 c4 08             	add    $0x8,%esp
	}
	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
  181665:	89 f2                	mov    %esi,%edx
  181667:	b8 06 00 00 00       	mov    $0x6,%eax
  18166c:	e8 ac fe ff ff       	call   18151d <_NanoFatalErrorHandler>

00181671 <handle_exc_0>:
	_EXC_FUNC_NOCODE(vector)

#define EXC_FUNC_CODE(vector) \
	_EXC_FUNC_CODE(vector)

EXC_FUNC_NOCODE(IV_DIVIDE_ERROR);
  181671:	89 c2                	mov    %eax,%edx
  181673:	b8 00 00 00 00       	mov    $0x0,%eax
  181678:	e8 b7 ff ff ff       	call   181634 <generic_exc_handle>

0018167d <handle_exc_2>:
EXC_FUNC_NOCODE(IV_NON_MASKABLE_INTERRUPT);
  18167d:	89 c2                	mov    %eax,%edx
  18167f:	b8 02 00 00 00       	mov    $0x2,%eax
  181684:	e8 ab ff ff ff       	call   181634 <generic_exc_handle>

00181689 <handle_exc_4>:
EXC_FUNC_NOCODE(IV_OVERFLOW);
  181689:	89 c2                	mov    %eax,%edx
  18168b:	b8 04 00 00 00       	mov    $0x4,%eax
  181690:	e8 9f ff ff ff       	call   181634 <generic_exc_handle>

00181695 <handle_exc_5>:
EXC_FUNC_NOCODE(IV_BOUND_RANGE);
  181695:	89 c2                	mov    %eax,%edx
  181697:	b8 05 00 00 00       	mov    $0x5,%eax
  18169c:	e8 93 ff ff ff       	call   181634 <generic_exc_handle>

001816a1 <handle_exc_6>:
EXC_FUNC_NOCODE(IV_INVALID_OPCODE);
  1816a1:	89 c2                	mov    %eax,%edx
  1816a3:	b8 06 00 00 00       	mov    $0x6,%eax
  1816a8:	e8 87 ff ff ff       	call   181634 <generic_exc_handle>

001816ad <handle_exc_7>:
EXC_FUNC_NOCODE(IV_DEVICE_NOT_AVAILABLE);
  1816ad:	89 c2                	mov    %eax,%edx
  1816af:	b8 07 00 00 00       	mov    $0x7,%eax
  1816b4:	e8 7b ff ff ff       	call   181634 <generic_exc_handle>

001816b9 <handle_exc_8>:
EXC_FUNC_CODE(IV_DOUBLE_FAULT);
  1816b9:	89 c2                	mov    %eax,%edx
  1816bb:	b8 08 00 00 00       	mov    $0x8,%eax
  1816c0:	e8 6f ff ff ff       	call   181634 <generic_exc_handle>

001816c5 <handle_exc_10>:
EXC_FUNC_CODE(IV_INVALID_TSS);
  1816c5:	89 c2                	mov    %eax,%edx
  1816c7:	b8 0a 00 00 00       	mov    $0xa,%eax
  1816cc:	e8 63 ff ff ff       	call   181634 <generic_exc_handle>

001816d1 <handle_exc_11>:
EXC_FUNC_CODE(IV_SEGMENT_NOT_PRESENT);
  1816d1:	89 c2                	mov    %eax,%edx
  1816d3:	b8 0b 00 00 00       	mov    $0xb,%eax
  1816d8:	e8 57 ff ff ff       	call   181634 <generic_exc_handle>

001816dd <handle_exc_12>:
EXC_FUNC_CODE(IV_STACK_FAULT);
  1816dd:	89 c2                	mov    %eax,%edx
  1816df:	b8 0c 00 00 00       	mov    $0xc,%eax
  1816e4:	e8 4b ff ff ff       	call   181634 <generic_exc_handle>

001816e9 <handle_exc_13>:
EXC_FUNC_CODE(IV_GENERAL_PROTECTION);
  1816e9:	89 c2                	mov    %eax,%edx
  1816eb:	b8 0d 00 00 00       	mov    $0xd,%eax
  1816f0:	e8 3f ff ff ff       	call   181634 <generic_exc_handle>

001816f5 <handle_exc_14>:
EXC_FUNC_CODE(IV_PAGE_FAULT);
  1816f5:	89 c2                	mov    %eax,%edx
  1816f7:	b8 0e 00 00 00       	mov    $0xe,%eax
  1816fc:	e8 33 ff ff ff       	call   181634 <generic_exc_handle>

00181701 <handle_exc_16>:
EXC_FUNC_NOCODE(IV_X87_FPU_FP_ERROR);
  181701:	89 c2                	mov    %eax,%edx
  181703:	b8 10 00 00 00       	mov    $0x10,%eax
  181708:	e8 27 ff ff ff       	call   181634 <generic_exc_handle>

0018170d <handle_exc_17>:
EXC_FUNC_CODE(IV_ALIGNMENT_CHECK);
  18170d:	89 c2                	mov    %eax,%edx
  18170f:	b8 11 00 00 00       	mov    $0x11,%eax
  181714:	e8 1b ff ff ff       	call   181634 <generic_exc_handle>

00181719 <handle_exc_18>:
EXC_FUNC_NOCODE(IV_MACHINE_CHECK);
  181719:	89 c2                	mov    %eax,%edx
  18171b:	b8 12 00 00 00       	mov    $0x12,%eax
  181720:	e8 0f ff ff ff       	call   181634 <generic_exc_handle>

00181725 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
  181725:	56                   	push   %esi
  181726:	53                   	push   %ebx
  181727:	89 c6                	mov    %eax,%esi
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
  181729:	8b 1c 85 00 28 18 00 	mov    0x182800(,%eax,4),%ebx
  181730:	eb 0a                	jmp    18173c <_sys_device_do_config_level+0x17>
		struct device_config *device = info->config;
  181732:	8b 13                	mov    (%ebx),%edx

		device->init(info);
  181734:	89 d8                	mov    %ebx,%eax
  181736:	ff 52 04             	call   *0x4(%edx)
 */
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
  181739:	83 c3 0c             	add    $0xc,%ebx
  18173c:	3b 1c b5 04 28 18 00 	cmp    0x182804(,%esi,4),%ebx
  181743:	72 ed                	jb     181732 <_sys_device_do_config_level+0xd>
		struct device_config *device = info->config;

		device->init(info);
	}
}
  181745:	5b                   	pop    %ebx
  181746:	5e                   	pop    %esi
  181747:	c3                   	ret    

00181748 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
  181748:	56                   	push   %esi
  181749:	53                   	push   %ebx
  18174a:	89 c6                	mov    %eax,%esi
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
  18174c:	bb 2c 00 28 00       	mov    $0x28002c,%ebx
  181751:	eb 18                	jmp    18176b <device_get_binding+0x23>
		if (info->driver_api && !strcmp(name, info->config->name)) {
  181753:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  181757:	74 0f                	je     181768 <device_get_binding+0x20>
  181759:	8b 03                	mov    (%ebx),%eax
  18175b:	8b 10                	mov    (%eax),%edx
  18175d:	89 f0                	mov    %esi,%eax
  18175f:	e8 c0 f1 ff ff       	call   180924 <strcmp>
  181764:	85 c0                	test   %eax,%eax
  181766:	74 12                	je     18177a <device_get_binding+0x32>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
  181768:	83 c3 0c             	add    $0xc,%ebx
  18176b:	81 fb 98 00 28 00    	cmp    $0x280098,%ebx
  181771:	75 e0                	jne    181753 <device_get_binding+0xb>
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
  181773:	b8 00 00 00 00       	mov    $0x0,%eax
  181778:	eb 02                	jmp    18177c <device_get_binding+0x34>
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
  18177a:	89 d8                	mov    %ebx,%eax
		}
	}

	return NULL;
}
  18177c:	5b                   	pop    %ebx
  18177d:	5e                   	pop    %esi
  18177e:	c3                   	ret    

0018177f <prepare_multithreading>:
	 * initialization.  However, don't waste effort initializing the
	 * fields of the dummy thread beyond those needed to identify it as a
	 * dummy thread.
	 */

	_current = dummy_thread;
  18177f:	a3 48 01 28 00       	mov    %eax,0x280148

	dummy_thread->base.user_options = K_ESSENTIAL;
  181784:	c6 40 08 01          	movb   $0x1,0x8(%eax)

	_IntLibInit();

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
  181788:	b8 00 00 00 00       	mov    $0x0,%eax
  18178d:	eb 1a                	jmp    1817a9 <prepare_multithreading+0x2a>
		sys_dlist_init(&_ready_q.q[ii]);
  18178f:	8d 50 01             	lea    0x1(%eax),%edx
  181792:	8d 0c d5 54 01 28 00 	lea    0x280154(,%edx,8),%ecx
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  181799:	89 0c d5 54 01 28 00 	mov    %ecx,0x280154(,%edx,8)
	list->tail = (sys_dnode_t *)list;
  1817a0:	89 0c c5 60 01 28 00 	mov    %ecx,0x280160(,%eax,8)

	_IntLibInit();

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
  1817a7:	89 d0                	mov    %edx,%eax
  1817a9:	83 f8 1f             	cmp    $0x1f,%eax
  1817ac:	7e e1                	jle    18178f <prepare_multithreading+0x10>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
  1817ae:	c7 05 54 01 28 00 84 	movl   $0x280484,0x280154
  1817b5:	04 28 00 

	_new_thread(_main_stack, MAIN_STACK_SIZE,
  1817b8:	6a 01                	push   $0x1
  1817ba:	6a 00                	push   $0x0
  1817bc:	6a 00                	push   $0x0
  1817be:	6a 00                	push   $0x0
  1817c0:	6a 00                	push   $0x0
  1817c2:	b9 6e 18 18 00       	mov    $0x18186e,%ecx
  1817c7:	ba 00 02 00 00       	mov    $0x200,%edx
  1817cc:	b8 84 04 28 00       	mov    $0x280484,%eax
  1817d1:	e8 01 fd ff ff       	call   1814d7 <_new_thread>
  1817d6:	83 c4 14             	add    $0x14,%esp
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  1817d9:	a0 8d 04 28 00       	mov    0x28048d,%al
  1817de:	83 e0 fb             	and    $0xfffffffb,%eax
  1817e1:	a2 8d 04 28 00       	mov    %al,0x28048d
		    _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
  1817e6:	b8 84 04 28 00       	mov    $0x280484,%eax
  1817eb:	e8 3b 01 00 00       	call   18192b <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_stack, IDLE_STACK_SIZE,
  1817f0:	6a 01                	push   $0x1
  1817f2:	6a 0f                	push   $0xf
  1817f4:	6a 00                	push   $0x0
  1817f6:	6a 00                	push   $0x0
  1817f8:	6a 00                	push   $0x0
  1817fa:	b9 66 22 18 00       	mov    $0x182266,%ecx
  1817ff:	ba 00 01 00 00       	mov    $0x100,%edx
  181804:	b8 84 03 28 00       	mov    $0x280384,%eax
  181809:	e8 c9 fc ff ff       	call   1814d7 <_new_thread>
  18180e:	83 c4 14             	add    $0x14,%esp
  181811:	a0 8d 03 28 00       	mov    0x28038d,%al
  181816:	83 e0 fb             	and    $0xfffffffb,%eax
  181819:	a2 8d 03 28 00       	mov    %al,0x28038d
		    idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
  18181e:	b8 84 03 28 00       	mov    $0x280384,%eax
  181823:	e8 03 01 00 00       	call   18192b <_add_thread_to_ready_q>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  181828:	c7 05 4c 01 28 00 4c 	movl   $0x28014c,0x28014c
  18182f:	01 28 00 
	list->tail = (sys_dnode_t *)list;
  181832:	c7 05 50 01 28 00 4c 	movl   $0x28014c,0x280150
  181839:	01 28 00 
	extern void *_dummy_exception_vector_stub;
	extern char _interrupt_stack[CONFIG_ISR_STACK_SIZE];

	extern void _exception_enter(void);

	_kernel.nested = 0;
  18183c:	c7 05 40 01 28 00 00 	movl   $0x0,0x280140
  181843:	00 00 00 

	_kernel.irq_stack = _interrupt_stack + CONFIG_ISR_STACK_SIZE;
  181846:	c7 05 44 01 28 00 84 	movl   $0x280384,0x280144
  18184d:	03 28 00 
	 * Forces the inclusion of the spurious interrupt handlers. If a
	 * reference isn't made then intconnect.o is never pulled in by the
	 * linker.
	 */

	_dummy_spurious_interrupt = &__isr___SpuriousIntHandler;
  181850:	c7 05 70 02 28 00 00 	movl   $0x200,0x280270
  181857:	02 00 00 
	 * Forces the inclusion of the exception vector stub code. If a
	 * reference isn't made then excstubs.o is never pulled in by the
	 * linker.
	 */

	_dummy_exception_vector_stub = &_exception_enter;
  18185a:	c7 05 68 02 28 00 78 	movl   $0x181378,0x280268
  181861:	13 18 00 
  181864:	c3                   	ret    

00181865 <switch_to_main_thread>:

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181865:	9c                   	pushf  
  181866:	fa                   	cli    
  181867:	58                   	pop    %eax
	 * Context switch to main task (entry function is _main()): the
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */

	_Swap(irq_lock());
  181868:	e8 db fb ff ff       	call   181448 <_Swap>
  18186d:	c3                   	ret    

0018186e <_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
  18186e:	b8 02 00 00 00       	mov    $0x2,%eax
  181873:	e8 ad fe ff ff       	call   181725 <_sys_device_do_config_level>

	/* These 3 are deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_SECONDARY);
  181878:	b8 05 00 00 00       	mov    $0x5,%eax
  18187d:	e8 a3 fe ff ff       	call   181725 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_NANOKERNEL);
  181882:	b8 06 00 00 00       	mov    $0x6,%eax
  181887:	e8 99 fe ff ff       	call   181725 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_MICROKERNEL);
  18188c:	b8 07 00 00 00       	mov    $0x7,%eax
  181891:	e8 8f fe ff ff       	call   181725 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
  181896:	b8 03 00 00 00       	mov    $0x3,%eax
  18189b:	e8 85 fe ff ff       	call   181725 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
  1818a0:	e8 d6 08 00 00       	call   18217b <_init_static_threads>
	 */
#if defined(MDEF_MAIN_THREAD_PRIORITY) && \
		(MDEF_MAIN_THREAD_PRIORITY != CONFIG_MAIN_THREAD_PRIORITY)
	k_thread_priority_set(_main_thread, MDEF_MAIN_THREAD_PRIORITY);
#endif
	main();
  1818a5:	e8 74 e8 ff ff       	call   18011e <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
  1818aa:	a0 8c 04 28 00       	mov    0x28048c,%al
  1818af:	83 e0 fe             	and    $0xfffffffe,%eax
  1818b2:	a2 8c 04 28 00       	mov    %al,0x28048c
  1818b7:	c3                   	ret    

001818b8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
  1818b8:	83 ec 48             	sub    $0x48,%esp
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
  1818bb:	89 e0                	mov    %esp,%eax
  1818bd:	e8 bd fe ff ff       	call   18177f <prepare_multithreading>

	/* Deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRIMARY);
  1818c2:	b8 04 00 00 00       	mov    $0x4,%eax
  1818c7:	e8 59 fe ff ff       	call   181725 <_sys_device_do_config_level>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
  1818cc:	b8 00 00 00 00       	mov    $0x0,%eax
  1818d1:	e8 4f fe ff ff       	call   181725 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
  1818d6:	b8 01 00 00 00       	mov    $0x1,%eax
  1818db:	e8 45 fe ff ff       	call   181725 <_sys_device_do_config_level>

	/* display boot banner */

	PRINT_BOOT_BANNER();

	switch_to_main_thread();
  1818e0:	e8 80 ff ff ff       	call   181865 <switch_to_main_thread>

001818e5 <_set_ready_q_prio_bit>:
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
  1818e5:	8d 48 10             	lea    0x10(%eax),%ecx
  1818e8:	89 ca                	mov    %ecx,%edx
  1818ea:	c1 fa 05             	sar    $0x5,%edx
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  1818ed:	b8 01 00 00 00       	mov    $0x1,%eax
  1818f2:	d3 e0                	shl    %cl,%eax
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
  1818f4:	09 04 95 58 01 28 00 	or     %eax,0x280158(,%edx,4)
  1818fb:	c3                   	ret    

001818fc <_clear_ready_q_prio_bit>:
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
  1818fc:	8d 48 10             	lea    0x10(%eax),%ecx
  1818ff:	89 c8                	mov    %ecx,%eax
  181901:	c1 f8 05             	sar    $0x5,%eax
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  181904:	ba 01 00 00 00       	mov    $0x1,%edx
  181909:	d3 e2                	shl    %cl,%edx
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
  18190b:	f7 d2                	not    %edx
  18190d:	21 14 85 58 01 28 00 	and    %edx,0x280158(,%eax,4)
  181914:	c3                   	ret    

00181915 <_get_ready_q_head>:

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	unsigned int bitpos;

	__asm__ volatile (
  181915:	0f bc 05 58 01 28 00 	bsf    0x280158,%eax
  18191c:	75 05                	jne    181923 <_get_ready_q_head+0xe>
  18191e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 * @return a pointer to the head element
 */

static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
	return list->head;
  181923:	8b 04 c5 5c 01 28 00 	mov    0x28015c(,%eax,8),%eax

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
  18192a:	c3                   	ret    

0018192b <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
  18192b:	57                   	push   %edi
  18192c:	56                   	push   %esi
  18192d:	53                   	push   %ebx
  18192e:	89 c6                	mov    %eax,%esi
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  181930:	0f be 58 0a          	movsbl 0xa(%eax),%ebx
	sys_dlist_t *q = &_ready_q.q[q_index];
  181934:	8d 3c dd dc 01 28 00 	lea    0x2801dc(,%ebx,8),%edi

	_set_ready_q_prio_bit(thread->base.prio);
  18193b:	89 d8                	mov    %ebx,%eax
  18193d:	e8 a3 ff ff ff       	call   1818e5 <_set_ready_q_prio_bit>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181942:	89 3e                	mov    %edi,(%esi)
	node->prev = list->tail;
  181944:	83 c3 14             	add    $0x14,%ebx
  181947:	8b 04 dd 40 01 28 00 	mov    0x280140(,%ebx,8),%eax
  18194e:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  181951:	8b 04 dd 40 01 28 00 	mov    0x280140(,%ebx,8),%eax
  181958:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  18195a:	89 34 dd 40 01 28 00 	mov    %esi,0x280140(,%ebx,8)
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
  181961:	a1 54 01 28 00       	mov    0x280154,%eax
  181966:	8a 50 0a             	mov    0xa(%eax),%dl
  181969:	38 56 0a             	cmp    %dl,0xa(%esi)
  18196c:	7d 02                	jge    181970 <_add_thread_to_ready_q+0x45>
  18196e:	89 f0                	mov    %esi,%eax
  181970:	a3 54 01 28 00       	mov    %eax,0x280154
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
  181975:	5b                   	pop    %ebx
  181976:	5e                   	pop    %esi
  181977:	5f                   	pop    %edi
  181978:	c3                   	ret    

00181979 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
  181979:	56                   	push   %esi
  18197a:	53                   	push   %ebx
  18197b:	89 c3                	mov    %eax,%ebx
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  18197d:	0f be 40 0a          	movsbl 0xa(%eax),%eax
	sys_dlist_t *q = &_ready_q.q[q_index];
  181981:	83 c0 11             	add    $0x11,%eax
  181984:	8d 14 c5 54 01 28 00 	lea    0x280154(,%eax,8),%edx
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  18198b:	8b 4b 04             	mov    0x4(%ebx),%ecx
  18198e:	8b 33                	mov    (%ebx),%esi
  181990:	89 31                	mov    %esi,(%ecx)
	node->next->prev = node->prev;
  181992:	8b 0b                	mov    (%ebx),%ecx
  181994:	8b 73 04             	mov    0x4(%ebx),%esi
  181997:	89 71 04             	mov    %esi,0x4(%ecx)

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
  18199a:	3b 14 c5 54 01 28 00 	cmp    0x280154(,%eax,8),%edx
  1819a1:	75 09                	jne    1819ac <_remove_thread_from_ready_q+0x33>
		_clear_ready_q_prio_bit(thread->base.prio);
  1819a3:	0f be 43 0a          	movsbl 0xa(%ebx),%eax
  1819a7:	e8 50 ff ff ff       	call   1818fc <_clear_ready_q_prio_bit>
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  1819ac:	a1 54 01 28 00       	mov    0x280154,%eax
  1819b1:	39 c3                	cmp    %eax,%ebx
  1819b3:	75 05                	jne    1819ba <_remove_thread_from_ready_q+0x41>
  1819b5:	e8 5b ff ff ff       	call   181915 <_get_ready_q_head>
  1819ba:	a3 54 01 28 00       	mov    %eax,0x280154
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
  1819bf:	5b                   	pop    %ebx
  1819c0:	5e                   	pop    %esi
  1819c1:	c3                   	ret    

001819c2 <__must_switch_threads>:
		_current->base.prio, _get_highest_ready_prio());

	extern void _dump_ready_q(void);
	_dump_ready_q();

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
  1819c2:	a1 48 01 28 00       	mov    0x280148,%eax
  1819c7:	0f be 50 0a          	movsbl 0xa(%eax),%edx
  1819cb:	0f bc 05 58 01 28 00 	bsf    0x280158,%eax
  1819d2:	75 05                	jne    1819d9 <__must_switch_threads+0x17>
  1819d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

	int abs_prio = (find_lsb_set(ready_range) - 1) + (bitmap << 5);

	__ASSERT(abs_prio < K_NUM_PRIORITIES, "prio out-of-range\n");

	return abs_prio - _NUM_COOP_PRIO;
  1819d9:	83 e8 10             	sub    $0x10,%eax
	return _is_prio1_higher_than_or_equal_to_prio2(prio1, prio2);
}

static inline int _is_prio1_higher_than_prio2(int prio1, int prio2)
{
	return prio1 < prio2;
  1819dc:	39 c2                	cmp    %eax,%edx
  1819de:	0f 9f c0             	setg   %al
  1819e1:	0f b6 c0             	movzbl %al,%eax
#else
	return 0;
#endif
}
  1819e4:	c3                   	ret    

001819e5 <_reschedule_threads>:

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
  1819e5:	53                   	push   %ebx
  1819e6:	89 c3                	mov    %eax,%ebx
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
  1819e8:	a1 48 01 28 00       	mov    0x280148,%eax
  1819ed:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  1819f2:	77 10                	ja     181a04 <_reschedule_threads+0x1f>
  1819f4:	e8 c9 ff ff ff       	call   1819c2 <__must_switch_threads>
  1819f9:	85 c0                	test   %eax,%eax
  1819fb:	74 0c                	je     181a09 <_reschedule_threads+0x24>
  1819fd:	b8 01 00 00 00       	mov    $0x1,%eax
  181a02:	eb 05                	jmp    181a09 <_reschedule_threads+0x24>
  181a04:	b8 00 00 00 00       	mov    $0x0,%eax
#ifdef CONFIG_PREEMPT_ENABLED
	K_DEBUG("rescheduling threads\n");

	if (_must_switch_threads()) {
  181a09:	85 c0                	test   %eax,%eax
  181a0b:	74 09                	je     181a16 <_reschedule_threads+0x31>
		K_DEBUG("context-switching out %p\n", _current);
		_Swap(key);
  181a0d:	89 d8                	mov    %ebx,%eax
  181a0f:	e8 34 fa ff ff       	call   181448 <_Swap>
  181a14:	eb 06                	jmp    181a1c <_reschedule_threads+0x37>
  181a16:	f6 c7 02             	test   $0x2,%bh
  181a19:	74 01                	je     181a1c <_reschedule_threads+0x37>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181a1b:	fb                   	sti    
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
  181a1c:	5b                   	pop    %ebx
  181a1d:	c3                   	ret    

00181a1e <k_sched_unlock>:

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181a1e:	9c                   	pushf  
  181a1f:	fa                   	cli    
  181a20:	58                   	pop    %eax

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
  181a21:	8b 0d 48 01 28 00    	mov    0x280148,%ecx
  181a27:	8a 51 0b             	mov    0xb(%ecx),%dl
  181a2a:	42                   	inc    %edx
  181a2b:	88 51 0b             	mov    %dl,0xb(%ecx)

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
  181a2e:	e8 b2 ff ff ff       	call   1819e5 <_reschedule_threads>
  181a33:	c3                   	ret    

00181a34 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  181a34:	0f be 48 0a          	movsbl 0xa(%eax),%ecx
	sys_dlist_t *q = &_ready_q.q[q_index];

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
  181a38:	3b 04 cd e0 01 28 00 	cmp    0x2801e0(,%ecx,8),%eax
  181a3f:	74 53                	je     181a94 <_move_thread_to_end_of_prio_q+0x60>
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
  181a41:	56                   	push   %esi
  181a42:	53                   	push   %ebx
  181a43:	8d 51 10             	lea    0x10(%ecx),%edx
  181a46:	8d 1c cd dc 01 28 00 	lea    0x2801dc(,%ecx,8),%ebx
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  181a4d:	8b 48 04             	mov    0x4(%eax),%ecx
  181a50:	8b 30                	mov    (%eax),%esi
  181a52:	89 31                	mov    %esi,(%ecx)
	node->next->prev = node->prev;
  181a54:	8b 08                	mov    (%eax),%ecx
  181a56:	8b 70 04             	mov    0x4(%eax),%esi
  181a59:	89 71 04             	mov    %esi,0x4(%ecx)
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181a5c:	89 18                	mov    %ebx,(%eax)
	node->prev = list->tail;
  181a5e:	83 c2 04             	add    $0x4,%edx
  181a61:	8b 0c d5 40 01 28 00 	mov    0x280140(,%edx,8),%ecx
  181a68:	89 48 04             	mov    %ecx,0x4(%eax)

	list->tail->next = node;
  181a6b:	8b 0c d5 40 01 28 00 	mov    0x280140(,%edx,8),%ecx
  181a72:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
  181a74:	89 04 d5 40 01 28 00 	mov    %eax,0x280140(,%edx,8)
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  181a7b:	8b 15 54 01 28 00    	mov    0x280154,%edx
  181a81:	39 d0                	cmp    %edx,%eax
  181a83:	75 07                	jne    181a8c <_move_thread_to_end_of_prio_q+0x58>
  181a85:	e8 8b fe ff ff       	call   181915 <_get_ready_q_head>
  181a8a:	89 c2                	mov    %eax,%edx
  181a8c:	89 15 54 01 28 00    	mov    %edx,0x280154
#endif
}
  181a92:	5b                   	pop    %ebx
  181a93:	5e                   	pop    %esi
  181a94:	c3                   	ret    

00181a95 <k_yield>:

void k_yield(void)
{
  181a95:	53                   	push   %ebx
  181a96:	9c                   	pushf  
  181a97:	fa                   	cli    
  181a98:	5b                   	pop    %ebx
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
  181a99:	a1 48 01 28 00       	mov    0x280148,%eax
  181a9e:	e8 91 ff ff ff       	call   181a34 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
  181aa3:	a1 54 01 28 00       	mov    0x280154,%eax
  181aa8:	39 05 48 01 28 00    	cmp    %eax,0x280148
  181aae:	75 08                	jne    181ab8 <k_yield+0x23>
  181ab0:	f6 c7 02             	test   $0x2,%bh
  181ab3:	74 0a                	je     181abf <k_yield+0x2a>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181ab5:	fb                   	sti    
  181ab6:	eb 07                	jmp    181abf <k_yield+0x2a>
		irq_unlock(key);
	} else {
		_Swap(key);
  181ab8:	89 d8                	mov    %ebx,%eax
  181aba:	e8 89 f9 ff ff       	call   181448 <_Swap>
	}
}
  181abf:	5b                   	pop    %ebx
  181ac0:	c3                   	ret    

00181ac1 <k_sleep>:

void k_sleep(int32_t duration)
{
  181ac1:	57                   	push   %edi
  181ac2:	56                   	push   %esi
  181ac3:	53                   	push   %ebx
  181ac4:	83 ec 04             	sub    $0x4,%esp
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
  181ac7:	85 c0                	test   %eax,%eax
  181ac9:	75 0a                	jne    181ad5 <k_sleep+0x14>
		k_yield();
  181acb:	e8 c5 ff ff ff       	call   181a95 <k_yield>
		return;
  181ad0:	e9 25 01 00 00       	jmp    181bfa <k_sleep+0x139>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern int32_t _ms_to_ticks(int32_t ms);
#else
static ALWAYS_INLINE int32_t _ms_to_ticks(int32_t ms)
{
	return (int32_t)ceiling_fraction((uint32_t)ms, _ms_per_tick);
  181ad5:	83 c0 09             	add    $0x9,%eax
  181ad8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  181add:	f7 e2                	mul    %edx
  181adf:	c1 ea 03             	shr    $0x3,%edx
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
  181ae2:	42                   	inc    %edx
  181ae3:	89 14 24             	mov    %edx,(%esp)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181ae6:	9c                   	pushf  
  181ae7:	fa                   	cli    
  181ae8:	5b                   	pop    %ebx
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
  181ae9:	a1 48 01 28 00       	mov    0x280148,%eax
  181aee:	e8 86 fe ff ff       	call   181979 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
  181af3:	8b 04 24             	mov    (%esp),%eax
  181af6:	8b 3d 48 01 28 00    	mov    0x280148,%edi

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  181afc:	8d 77 10             	lea    0x10(%edi),%esi
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
  181aff:	89 46 10             	mov    %eax,0x10(%esi)
	timeout->thread = thread;
  181b02:	89 7e 08             	mov    %edi,0x8(%esi)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  181b05:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  181b0c:	a1 4c 01 28 00       	mov    0x28014c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  181b11:	3d 4c 01 28 00       	cmp    $0x28014c,%eax
  181b16:	75 07                	jne    181b1f <k_sleep+0x5e>
  181b18:	ba 00 00 00 00       	mov    $0x0,%edx
  181b1d:	eb 02                	jmp    181b21 <k_sleep+0x60>
  181b1f:	89 c2                	mov    %eax,%edx
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  181b21:	85 d2                	test   %edx,%edx
  181b23:	74 15                	je     181b3a <k_sleep+0x79>
  181b25:	3d 4c 01 28 00       	cmp    $0x28014c,%eax
  181b2a:	0f 85 9f 00 00 00    	jne    181bcf <k_sleep+0x10e>
  181b30:	b8 00 00 00 00       	mov    $0x0,%eax
  181b35:	e9 95 00 00 00       	jmp    181bcf <k_sleep+0x10e>
  181b3a:	b8 00 00 00 00       	mov    $0x0,%eax
  181b3f:	e9 8b 00 00 00       	jmp    181bcf <k_sleep+0x10e>
		if (*delta <= in_q->delta_ticks_from_prev) {
  181b44:	8b 56 10             	mov    0x10(%esi),%edx
  181b47:	8b 48 10             	mov    0x10(%eax),%ecx
  181b4a:	39 ca                	cmp    %ecx,%edx
  181b4c:	7f 3a                	jg     181b88 <k_sleep+0xc7>
			in_q->delta_ticks_from_prev -= *delta;
  181b4e:	29 d1                	sub    %edx,%ecx
  181b50:	89 48 10             	mov    %ecx,0x10(%eax)
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  181b53:	85 c0                	test   %eax,%eax
  181b55:	75 1e                	jne    181b75 <k_sleep+0xb4>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181b57:	c7 47 10 4c 01 28 00 	movl   $0x28014c,0x10(%edi)
	node->prev = list->tail;
  181b5e:	a1 50 01 28 00       	mov    0x280150,%eax
  181b63:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  181b66:	a1 50 01 28 00       	mov    0x280150,%eax
  181b6b:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  181b6d:	89 35 50 01 28 00    	mov    %esi,0x280150
  181b73:	eb 7e                	jmp    181bf3 <k_sleep+0x132>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  181b75:	8b 50 04             	mov    0x4(%eax),%edx
  181b78:	89 56 04             	mov    %edx,0x4(%esi)
		node->next = insert_point;
  181b7b:	89 47 10             	mov    %eax,0x10(%edi)
		insert_point->prev->next = node;
  181b7e:	8b 50 04             	mov    0x4(%eax),%edx
  181b81:	89 32                	mov    %esi,(%edx)
		insert_point->prev = node;
  181b83:	89 70 04             	mov    %esi,0x4(%eax)
  181b86:	eb 6b                	jmp    181bf3 <k_sleep+0x132>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
  181b88:	29 ca                	sub    %ecx,%edx
  181b8a:	89 56 10             	mov    %edx,0x10(%esi)
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  181b8d:	89 c2                	mov    %eax,%edx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181b8f:	85 c0                	test   %eax,%eax
  181b91:	74 0c                	je     181b9f <k_sleep+0xde>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181b93:	3b 05 50 01 28 00    	cmp    0x280150,%eax
  181b99:	74 08                	je     181ba3 <k_sleep+0xe2>
  181b9b:	8b 08                	mov    (%eax),%ecx
  181b9d:	eb 09                	jmp    181ba8 <k_sleep+0xe7>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181b9f:	89 c1                	mov    %eax,%ecx
  181ba1:	eb 05                	jmp    181ba8 <k_sleep+0xe7>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181ba3:	b9 00 00 00 00       	mov    $0x0,%ecx
  181ba8:	85 c9                	test   %ecx,%ecx
  181baa:	74 1e                	je     181bca <k_sleep+0x109>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181bac:	85 d2                	test   %edx,%edx
  181bae:	74 0c                	je     181bbc <k_sleep+0xfb>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181bb0:	3b 15 50 01 28 00    	cmp    0x280150,%edx
  181bb6:	74 0b                	je     181bc3 <k_sleep+0x102>
  181bb8:	8b 00                	mov    (%eax),%eax
  181bba:	eb 13                	jmp    181bcf <k_sleep+0x10e>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181bbc:	b8 00 00 00 00       	mov    $0x0,%eax
  181bc1:	eb 0c                	jmp    181bcf <k_sleep+0x10e>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181bc3:	b8 00 00 00 00       	mov    $0x0,%eax
  181bc8:	eb 05                	jmp    181bcf <k_sleep+0x10e>
  181bca:	b8 00 00 00 00       	mov    $0x0,%eax
  181bcf:	85 c0                	test   %eax,%eax
  181bd1:	0f 85 6d ff ff ff    	jne    181b44 <k_sleep+0x83>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181bd7:	c7 47 10 4c 01 28 00 	movl   $0x28014c,0x10(%edi)
	node->prev = list->tail;
  181bde:	a1 50 01 28 00       	mov    0x280150,%eax
  181be3:	89 46 04             	mov    %eax,0x4(%esi)

	list->tail->next = node;
  181be6:	a1 50 01 28 00       	mov    0x280150,%eax
  181beb:	89 30                	mov    %esi,(%eax)
	list->tail = node;
  181bed:	89 35 50 01 28 00    	mov    %esi,0x280150

	_Swap(key);
  181bf3:	89 d8                	mov    %ebx,%eax
  181bf5:	e8 4e f8 ff ff       	call   181448 <_Swap>
#endif
}
  181bfa:	83 c4 04             	add    $0x4,%esp
  181bfd:	5b                   	pop    %ebx
  181bfe:	5e                   	pop    %esi
  181bff:	5f                   	pop    %edi
  181c00:	c3                   	ret    

00181c01 <k_current_get>:
}

k_tid_t k_current_get(void)
{
	return _current;
}
  181c01:	a1 48 01 28 00       	mov    0x280148,%eax
  181c06:	c3                   	ret    

00181c07 <handle_time_slicing>:
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(int32_t ticks)
{
	if (_time_slice_duration == 0) {
  181c07:	8b 15 64 02 28 00    	mov    0x280264,%edx
  181c0d:	85 d2                	test   %edx,%edx
  181c0f:	74 50                	je     181c61 <handle_time_slicing+0x5a>
		return;
	}

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
  181c11:	8b 0d 48 01 28 00    	mov    0x280148,%ecx
  181c17:	0f be 49 0a          	movsbl 0xa(%ecx),%ecx
  181c1b:	39 0d 60 02 28 00    	cmp    %ecx,0x280260
  181c21:	7f 3e                	jg     181c61 <handle_time_slicing+0x5a>
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(int32_t ticks)
{
  181c23:	57                   	push   %edi
  181c24:	56                   	push   %esi
  181c25:	53                   	push   %ebx
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (uint64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (uint64_t)ticks * _ms_per_tick;
  181c26:	89 c1                	mov    %eax,%ecx
  181c28:	89 c6                	mov    %eax,%esi
  181c2a:	01 c6                	add    %eax,%esi
  181c2c:	c1 e1 03             	shl    $0x3,%ecx
  181c2f:	01 f1                	add    %esi,%ecx

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
  181c31:	03 0d 78 02 28 00    	add    0x280278,%ecx
  181c37:	89 0d 78 02 28 00    	mov    %ecx,0x280278
	if (_time_slice_elapsed >= _time_slice_duration) {
  181c3d:	39 ca                	cmp    %ecx,%edx
  181c3f:	7f 1d                	jg     181c5e <handle_time_slicing+0x57>

		unsigned int key;

		_time_slice_elapsed = 0;
  181c41:	c7 05 78 02 28 00 00 	movl   $0x0,0x280278
  181c48:	00 00 00 
  181c4b:	9c                   	pushf  
  181c4c:	fa                   	cli    
  181c4d:	5b                   	pop    %ebx

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
  181c4e:	a1 48 01 28 00       	mov    0x280148,%eax
  181c53:	e8 dc fd ff ff       	call   181a34 <_move_thread_to_end_of_prio_q>
  181c58:	f6 c7 02             	test   $0x2,%bh
  181c5b:	74 01                	je     181c5e <handle_time_slicing+0x57>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181c5d:	fb                   	sti    
		irq_unlock(key);
	}
}
  181c5e:	5b                   	pop    %ebx
  181c5f:	5e                   	pop    %esi
  181c60:	5f                   	pop    %edi
  181c61:	c3                   	ret    

00181c62 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(int32_t ticks)
{
  181c62:	57                   	push   %edi
  181c63:	56                   	push   %esi
  181c64:	53                   	push   %ebx
  181c65:	83 ec 08             	sub    $0x8,%esp
  181c68:	89 c6                	mov    %eax,%esi

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181c6a:	9c                   	pushf  
  181c6b:	fa                   	cli    
  181c6c:	58                   	pop    %eax

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
  181c6d:	89 f3                	mov    %esi,%ebx
  181c6f:	c1 fb 1f             	sar    $0x1f,%ebx
  181c72:	01 35 7c 02 28 00    	add    %esi,0x28027c
  181c78:	11 1d 80 02 28 00    	adc    %ebx,0x280280
  181c7e:	f6 c4 02             	test   $0x2,%ah
  181c81:	74 01                	je     181c84 <_nano_sys_clock_tick_announce+0x22>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181c83:	fb                   	sti    
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  181c84:	89 24 24             	mov    %esp,(%esp)
	list->tail = (sys_dnode_t *)list;
  181c87:	89 64 24 04          	mov    %esp,0x4(%esp)

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181c8b:	9c                   	pushf  
  181c8c:	fa                   	cli    
  181c8d:	59                   	pop    %ecx
  181c8e:	89 ca                	mov    %ecx,%edx
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  181c90:	a1 4c 01 28 00       	mov    0x28014c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  181c95:	3d 4c 01 28 00       	cmp    $0x28014c,%eax
  181c9a:	75 05                	jne    181ca1 <_nano_sys_clock_tick_announce+0x3f>
  181c9c:	b8 00 00 00 00       	mov    $0x0,%eax
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
  181ca1:	85 c0                	test   %eax,%eax
  181ca3:	75 0f                	jne    181cb4 <_nano_sys_clock_tick_announce+0x52>
  181ca5:	f6 c5 02             	test   $0x2,%ch
  181ca8:	0f 84 52 01 00 00    	je     181e00 <_nano_sys_clock_tick_announce+0x19e>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181cae:	fb                   	sti    
  181caf:	e9 4c 01 00 00       	jmp    181e00 <_nano_sys_clock_tick_announce+0x19e>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
  181cb4:	29 70 10             	sub    %esi,0x10(%eax)
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
  181cb7:	c7 05 74 02 28 00 01 	movl   $0x1,0x280274
  181cbe:	00 00 00 
  181cc1:	eb 41                	jmp    181d04 <_nano_sys_clock_tick_announce+0xa2>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  181cc3:	8b 48 04             	mov    0x4(%eax),%ecx
  181cc6:	8b 18                	mov    (%eax),%ebx
  181cc8:	89 19                	mov    %ebx,(%ecx)
	node->next->prev = node->prev;
  181cca:	8b 08                	mov    (%eax),%ecx
  181ccc:	8b 58 04             	mov    0x4(%eax),%ebx
  181ccf:	89 59 04             	mov    %ebx,0x4(%ecx)
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
  181cd2:	8b 0c 24             	mov    (%esp),%ecx
  181cd5:	89 08                	mov    %ecx,(%eax)
	node->prev = list;
  181cd7:	89 60 04             	mov    %esp,0x4(%eax)

	list->head->prev = node;
  181cda:	8b 0c 24             	mov    (%esp),%ecx
  181cdd:	89 41 04             	mov    %eax,0x4(%ecx)
	list->head = node;
  181ce0:	89 04 24             	mov    %eax,(%esp)
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
  181ce3:	c7 40 10 fe ff ff ff 	movl   $0xfffffffe,0x10(%eax)
  181cea:	f6 c6 02             	test   $0x2,%dh
  181ced:	74 01                	je     181cf0 <_nano_sys_clock_tick_announce+0x8e>
  181cef:	fb                   	sti    

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181cf0:	9c                   	pushf  
  181cf1:	fa                   	cli    
  181cf2:	5a                   	pop    %edx
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  181cf3:	a1 4c 01 28 00       	mov    0x28014c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  181cf8:	3d 4c 01 28 00       	cmp    $0x28014c,%eax
  181cfd:	75 05                	jne    181d04 <_nano_sys_clock_tick_announce+0xa2>
  181cff:	b8 00 00 00 00       	mov    $0x0,%eax
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
  181d04:	85 c0                	test   %eax,%eax
  181d06:	74 06                	je     181d0e <_nano_sys_clock_tick_announce+0xac>
  181d08:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  181d0c:	74 b5                	je     181cc3 <_nano_sys_clock_tick_announce+0x61>
  181d0e:	f6 c6 02             	test   $0x2,%dh
  181d11:	74 01                	je     181d14 <_nano_sys_clock_tick_announce+0xb2>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181d13:	fb                   	sti    
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  181d14:	8b 14 24             	mov    (%esp),%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  181d17:	39 e2                	cmp    %esp,%edx
  181d19:	75 05                	jne    181d20 <_nano_sys_clock_tick_announce+0xbe>
  181d1b:	ba 00 00 00 00       	mov    $0x0,%edx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181d20:	85 d2                	test   %edx,%edx
  181d22:	74 0d                	je     181d31 <_nano_sys_clock_tick_announce+0xcf>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181d24:	3b 54 24 04          	cmp    0x4(%esp),%edx
  181d28:	74 0e                	je     181d38 <_nano_sys_clock_tick_announce+0xd6>
  181d2a:	8b 1a                	mov    (%edx),%ebx
  181d2c:	e9 bd 00 00 00       	jmp    181dee <_nano_sys_clock_tick_announce+0x18c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181d31:	89 d3                	mov    %edx,%ebx
  181d33:	e9 b6 00 00 00       	jmp    181dee <_nano_sys_clock_tick_announce+0x18c>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181d38:	bb 00 00 00 00       	mov    $0x0,%ebx
  181d3d:	e9 ac 00 00 00       	jmp    181dee <_nano_sys_clock_tick_announce+0x18c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  181d42:	8b 42 04             	mov    0x4(%edx),%eax
  181d45:	8b 0a                	mov    (%edx),%ecx
  181d47:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
  181d49:	8b 02                	mov    (%edx),%eax
  181d4b:	8b 4a 04             	mov    0x4(%edx),%ecx
  181d4e:	89 48 04             	mov    %ecx,0x4(%eax)
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
  181d51:	8b 42 08             	mov    0x8(%edx),%eax

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181d54:	9c                   	pushf  
  181d55:	fa                   	cli    
  181d56:	5f                   	pop    %edi
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
  181d57:	c7 42 10 ff ff ff ff 	movl   $0xffffffff,0x10(%edx)

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
  181d5e:	85 c0                	test   %eax,%eax
  181d60:	74 5d                	je     181dbf <_nano_sys_clock_tick_announce+0x15d>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
  181d62:	83 7a 0c 00          	cmpl   $0x0,0xc(%edx)
  181d66:	74 1a                	je     181d82 <_nano_sys_clock_tick_announce+0x120>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  181d68:	8b 50 04             	mov    0x4(%eax),%edx
  181d6b:	8b 08                	mov    (%eax),%ecx
  181d6d:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  181d6f:	8b 10                	mov    (%eax),%edx
  181d71:	8b 48 04             	mov    0x4(%eax),%ecx
  181d74:	89 4a 04             	mov    %ecx,0x4(%edx)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  181d77:	80 60 09 fd          	andb   $0xfd,0x9(%eax)
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
  181d7b:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  181d82:	8a 50 09             	mov    0x9(%eax),%dl
  181d85:	88 d1                	mov    %dl,%cl
  181d87:	83 e1 fb             	and    $0xfffffffb,%ecx
  181d8a:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  181d8d:	f6 c2 1b             	test   $0x1b,%dl
  181d90:	75 0d                	jne    181d9f <_nano_sys_clock_tick_announce+0x13d>
  181d92:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  181d96:	75 0e                	jne    181da6 <_nano_sys_clock_tick_announce+0x144>
  181d98:	ba 01 00 00 00       	mov    $0x1,%edx
  181d9d:	eb 0c                	jmp    181dab <_nano_sys_clock_tick_announce+0x149>
  181d9f:	ba 00 00 00 00       	mov    $0x0,%edx
  181da4:	eb 05                	jmp    181dab <_nano_sys_clock_tick_announce+0x149>
  181da6:	ba 00 00 00 00       	mov    $0x0,%edx
		 thread, thread->base.prio, K_HIGHEST_THREAD_PRIO);

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  181dab:	85 d2                	test   %edx,%edx
  181dad:	74 05                	je     181db4 <_nano_sys_clock_tick_announce+0x152>
		_add_thread_to_ready_q(thread);
  181daf:	e8 77 fb ff ff       	call   18192b <_add_thread_to_ready_q>
  181db4:	f7 c7 00 02 00 00    	test   $0x200,%edi
  181dba:	74 17                	je     181dd3 <_nano_sys_clock_tick_announce+0x171>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181dbc:	fb                   	sti    
  181dbd:	eb 14                	jmp    181dd3 <_nano_sys_clock_tick_announce+0x171>
  181dbf:	f7 c7 00 02 00 00    	test   $0x200,%edi
  181dc5:	74 01                	je     181dc8 <_nano_sys_clock_tick_announce+0x166>
  181dc7:	fb                   	sti    
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
  181dc8:	8b 4a 14             	mov    0x14(%edx),%ecx
  181dcb:	85 c9                	test   %ecx,%ecx
  181dcd:	74 04                	je     181dd3 <_nano_sys_clock_tick_announce+0x171>
			timeout->func(timeout);
  181dcf:	89 d0                	mov    %edx,%eax
  181dd1:	ff d1                	call   *%ecx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181dd3:	85 db                	test   %ebx,%ebx
  181dd5:	74 0a                	je     181de1 <_nano_sys_clock_tick_announce+0x17f>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181dd7:	3b 5c 24 04          	cmp    0x4(%esp),%ebx
  181ddb:	74 08                	je     181de5 <_nano_sys_clock_tick_announce+0x183>
  181ddd:	8b 03                	mov    (%ebx),%eax
  181ddf:	eb 09                	jmp    181dea <_nano_sys_clock_tick_announce+0x188>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181de1:	89 d8                	mov    %ebx,%eax
  181de3:	eb 05                	jmp    181dea <_nano_sys_clock_tick_announce+0x188>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181de5:	b8 00 00 00 00       	mov    $0x0,%eax

static inline void _handle_expired_timeouts(sys_dlist_t *expired)
{
	sys_dnode_t *timeout, *next;

	SYS_DLIST_FOR_EACH_NODE_SAFE(expired, timeout, next) {
  181dea:	89 da                	mov    %ebx,%edx
  181dec:	89 c3                	mov    %eax,%ebx
  181dee:	85 d2                	test   %edx,%edx
  181df0:	0f 85 4c ff ff ff    	jne    181d42 <_nano_sys_clock_tick_announce+0xe0>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
  181df6:	c7 05 74 02 28 00 00 	movl   $0x0,0x280274
  181dfd:	00 00 00 
	irq_unlock(key);

	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
  181e00:	89 f0                	mov    %esi,%eax
  181e02:	e8 00 fe ff ff       	call   181c07 <handle_time_slicing>
}
  181e07:	83 c4 08             	add    $0x8,%esp
  181e0a:	5b                   	pop    %ebx
  181e0b:	5e                   	pop    %esi
  181e0c:	5f                   	pop    %edi
  181e0d:	c3                   	ret    

00181e0e <_k_thread_single_start>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  181e0e:	8a 50 09             	mov    0x9(%eax),%dl
  181e11:	88 d1                	mov    %dl,%cl
  181e13:	83 e1 fb             	and    $0xfffffffb,%ecx
  181e16:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  181e19:	f6 c2 1b             	test   $0x1b,%dl
  181e1c:	75 0d                	jne    181e2b <_k_thread_single_start+0x1d>
  181e1e:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  181e22:	75 0e                	jne    181e32 <_k_thread_single_start+0x24>
  181e24:	ba 01 00 00 00       	mov    $0x1,%edx
  181e29:	eb 0c                	jmp    181e37 <_k_thread_single_start+0x29>
  181e2b:	ba 00 00 00 00       	mov    $0x0,%edx
  181e30:	eb 05                	jmp    181e37 <_k_thread_single_start+0x29>
  181e32:	ba 00 00 00 00       	mov    $0x0,%edx

void _k_thread_single_start(struct k_thread *thread)
{
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  181e37:	85 d2                	test   %edx,%edx
  181e39:	74 05                	je     181e40 <_k_thread_single_start+0x32>
		_add_thread_to_ready_q(thread);
  181e3b:	e8 eb fa ff ff       	call   18192b <_add_thread_to_ready_q>
  181e40:	c3                   	ret    

00181e41 <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
  181e41:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181e42:	9c                   	pushf  
  181e43:	fa                   	cli    
  181e44:	5b                   	pop    %ebx
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  181e45:	8a 50 09             	mov    0x9(%eax),%dl
  181e48:	88 d1                	mov    %dl,%cl
  181e4a:	83 e1 fb             	and    $0xfffffffb,%ecx
  181e4d:	88 48 09             	mov    %cl,0x9(%eax)
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  181e50:	f6 c2 1b             	test   $0x1b,%dl
  181e53:	75 0d                	jne    181e62 <start_thread+0x21>
  181e55:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  181e59:	75 0e                	jne    181e69 <start_thread+0x28>
  181e5b:	ba 01 00 00 00       	mov    $0x1,%edx
  181e60:	eb 0c                	jmp    181e6e <start_thread+0x2d>
  181e62:	ba 00 00 00 00       	mov    $0x0,%edx
  181e67:	eb 05                	jmp    181e6e <start_thread+0x2d>
  181e69:	ba 00 00 00 00       	mov    $0x0,%edx
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  181e6e:	85 d2                	test   %edx,%edx
  181e70:	74 33                	je     181ea5 <start_thread+0x64>
		_add_thread_to_ready_q(thread);
  181e72:	e8 b4 fa ff ff       	call   18192b <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
  181e77:	a1 48 01 28 00       	mov    0x280148,%eax
  181e7c:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  181e81:	77 10                	ja     181e93 <start_thread+0x52>
  181e83:	e8 3a fb ff ff       	call   1819c2 <__must_switch_threads>
  181e88:	85 c0                	test   %eax,%eax
  181e8a:	74 0c                	je     181e98 <start_thread+0x57>
  181e8c:	b8 01 00 00 00       	mov    $0x1,%eax
  181e91:	eb 05                	jmp    181e98 <start_thread+0x57>
  181e93:	b8 00 00 00 00       	mov    $0x0,%eax
		if (_must_switch_threads()) {
  181e98:	85 c0                	test   %eax,%eax
  181e9a:	74 09                	je     181ea5 <start_thread+0x64>
			_Swap(key);
  181e9c:	89 d8                	mov    %ebx,%eax
  181e9e:	e8 a5 f5 ff ff       	call   181448 <_Swap>
			return;
  181ea3:	eb 06                	jmp    181eab <start_thread+0x6a>
  181ea5:	f6 c7 02             	test   $0x2,%bh
  181ea8:	74 01                	je     181eab <start_thread+0x6a>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181eaa:	fb                   	sti    
		}
	}

	irq_unlock(key);
}
  181eab:	5b                   	pop    %ebx
  181eac:	c3                   	ret    

00181ead <schedule_new_thread>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, int32_t delay)
{
  181ead:	57                   	push   %edi
  181eae:	56                   	push   %esi
  181eaf:	53                   	push   %ebx
  181eb0:	89 c6                	mov    %eax,%esi
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
  181eb2:	85 d2                	test   %edx,%edx
  181eb4:	75 0a                	jne    181ec0 <schedule_new_thread+0x13>
		start_thread(thread);
  181eb6:	e8 86 ff ff ff       	call   181e41 <start_thread>
  181ebb:	e9 18 01 00 00       	jmp    181fd8 <schedule_new_thread+0x12b>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern int32_t _ms_to_ticks(int32_t ms);
#else
static ALWAYS_INLINE int32_t _ms_to_ticks(int32_t ms)
{
	return (int32_t)ceiling_fraction((uint32_t)ms, _ms_per_tick);
  181ec0:	83 c2 09             	add    $0x9,%edx
  181ec3:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
  181ec8:	89 d0                	mov    %edx,%eax
  181eca:	f7 e1                	mul    %ecx
  181ecc:	c1 ea 03             	shr    $0x3,%edx
	} else {
		int32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
  181ecf:	42                   	inc    %edx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181ed0:	9c                   	pushf  
  181ed1:	fa                   	cli    
  181ed2:	5f                   	pop    %edi

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  181ed3:	8d 46 10             	lea    0x10(%esi),%eax
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
  181ed6:	89 50 10             	mov    %edx,0x10(%eax)
	timeout->thread = thread;
  181ed9:	89 70 08             	mov    %esi,0x8(%eax)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  181edc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  181ee3:	8b 15 4c 01 28 00    	mov    0x28014c,%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  181ee9:	81 fa 4c 01 28 00    	cmp    $0x28014c,%edx
  181eef:	75 07                	jne    181ef8 <schedule_new_thread+0x4b>
  181ef1:	b9 00 00 00 00       	mov    $0x0,%ecx
  181ef6:	eb 02                	jmp    181efa <schedule_new_thread+0x4d>
  181ef8:	89 d1                	mov    %edx,%ecx
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  181efa:	85 c9                	test   %ecx,%ecx
  181efc:	74 16                	je     181f14 <schedule_new_thread+0x67>
  181efe:	81 fa 4c 01 28 00    	cmp    $0x28014c,%edx
  181f04:	0f 85 a0 00 00 00    	jne    181faa <schedule_new_thread+0xfd>
  181f0a:	ba 00 00 00 00       	mov    $0x0,%edx
  181f0f:	e9 96 00 00 00       	jmp    181faa <schedule_new_thread+0xfd>
  181f14:	ba 00 00 00 00       	mov    $0x0,%edx
  181f19:	e9 8c 00 00 00       	jmp    181faa <schedule_new_thread+0xfd>
		if (*delta <= in_q->delta_ticks_from_prev) {
  181f1e:	8b 48 10             	mov    0x10(%eax),%ecx
  181f21:	8b 5a 10             	mov    0x10(%edx),%ebx
  181f24:	39 d9                	cmp    %ebx,%ecx
  181f26:	7f 3b                	jg     181f63 <schedule_new_thread+0xb6>
			in_q->delta_ticks_from_prev -= *delta;
  181f28:	29 cb                	sub    %ecx,%ebx
  181f2a:	89 5a 10             	mov    %ebx,0x10(%edx)
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
  181f2d:	85 d2                	test   %edx,%edx
  181f2f:	75 1f                	jne    181f50 <schedule_new_thread+0xa3>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181f31:	c7 46 10 4c 01 28 00 	movl   $0x28014c,0x10(%esi)
	node->prev = list->tail;
  181f38:	8b 15 50 01 28 00    	mov    0x280150,%edx
  181f3e:	89 50 04             	mov    %edx,0x4(%eax)

	list->tail->next = node;
  181f41:	8b 15 50 01 28 00    	mov    0x280150,%edx
  181f47:	89 02                	mov    %eax,(%edx)
	list->tail = node;
  181f49:	a3 50 01 28 00       	mov    %eax,0x280150
  181f4e:	eb 7f                	jmp    181fcf <schedule_new_thread+0x122>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
  181f50:	8b 4a 04             	mov    0x4(%edx),%ecx
  181f53:	89 48 04             	mov    %ecx,0x4(%eax)
		node->next = insert_point;
  181f56:	89 56 10             	mov    %edx,0x10(%esi)
		insert_point->prev->next = node;
  181f59:	8b 4a 04             	mov    0x4(%edx),%ecx
  181f5c:	89 01                	mov    %eax,(%ecx)
		insert_point->prev = node;
  181f5e:	89 42 04             	mov    %eax,0x4(%edx)
  181f61:	eb 6c                	jmp    181fcf <schedule_new_thread+0x122>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
  181f63:	29 d9                	sub    %ebx,%ecx
  181f65:	89 48 10             	mov    %ecx,0x10(%eax)
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	struct _timeout *in_q;

	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  181f68:	89 d1                	mov    %edx,%ecx
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181f6a:	85 d2                	test   %edx,%edx
  181f6c:	74 0c                	je     181f7a <schedule_new_thread+0xcd>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181f6e:	3b 15 50 01 28 00    	cmp    0x280150,%edx
  181f74:	74 08                	je     181f7e <schedule_new_thread+0xd1>
  181f76:	8b 1a                	mov    (%edx),%ebx
  181f78:	eb 09                	jmp    181f83 <schedule_new_thread+0xd6>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181f7a:	89 d3                	mov    %edx,%ebx
  181f7c:	eb 05                	jmp    181f83 <schedule_new_thread+0xd6>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181f7e:	bb 00 00 00 00       	mov    $0x0,%ebx
  181f83:	85 db                	test   %ebx,%ebx
  181f85:	74 1e                	je     181fa5 <schedule_new_thread+0xf8>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181f87:	85 c9                	test   %ecx,%ecx
  181f89:	74 0c                	je     181f97 <schedule_new_thread+0xea>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181f8b:	3b 0d 50 01 28 00    	cmp    0x280150,%ecx
  181f91:	74 0b                	je     181f9e <schedule_new_thread+0xf1>
  181f93:	8b 12                	mov    (%edx),%edx
  181f95:	eb 13                	jmp    181faa <schedule_new_thread+0xfd>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  181f97:	ba 00 00 00 00       	mov    $0x0,%edx
  181f9c:	eb 0c                	jmp    181faa <schedule_new_thread+0xfd>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  181f9e:	ba 00 00 00 00       	mov    $0x0,%edx
  181fa3:	eb 05                	jmp    181faa <schedule_new_thread+0xfd>
  181fa5:	ba 00 00 00 00       	mov    $0x0,%edx
  181faa:	85 d2                	test   %edx,%edx
  181fac:	0f 85 6c ff ff ff    	jne    181f1e <schedule_new_thread+0x71>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
  181fb2:	c7 46 10 4c 01 28 00 	movl   $0x28014c,0x10(%esi)
	node->prev = list->tail;
  181fb9:	8b 15 50 01 28 00    	mov    0x280150,%edx
  181fbf:	89 50 04             	mov    %edx,0x4(%eax)

	list->tail->next = node;
  181fc2:	8b 15 50 01 28 00    	mov    0x280150,%edx
  181fc8:	89 02                	mov    %eax,(%edx)
	list->tail = node;
  181fca:	a3 50 01 28 00       	mov    %eax,0x280150
  181fcf:	f7 c7 00 02 00 00    	test   $0x200,%edi
  181fd5:	74 01                	je     181fd8 <schedule_new_thread+0x12b>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  181fd7:	fb                   	sti    
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
  181fd8:	5b                   	pop    %ebx
  181fd9:	5e                   	pop    %esi
  181fda:	5f                   	pop    %edi
  181fdb:	c3                   	ret    

00181fdc <k_is_in_isr>:
}
#endif

int k_is_in_isr(void)
{
	return _is_in_isr();
  181fdc:	83 3d 40 01 28 00 00 	cmpl   $0x0,0x280140
  181fe3:	0f 95 c0             	setne  %al
  181fe6:	0f b6 c0             	movzbl %al,%eax
}
  181fe9:	c3                   	ret    

00181fea <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
  181fea:	a1 48 01 28 00       	mov    0x280148,%eax
  181fef:	8a 40 08             	mov    0x8(%eax),%al
  181ff2:	83 e0 01             	and    $0x1,%eax
}
  181ff5:	c3                   	ret    

00181ff6 <_thread_monitor_exit>:
#if defined(CONFIG_THREAD_MONITOR)
/*
 * Remove a thread from the kernel's list of active threads.
 */
void _thread_monitor_exit(struct k_thread *thread)
{
  181ff6:	53                   	push   %ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  181ff7:	9c                   	pushf  
  181ff8:	fa                   	cli    
  181ff9:	5b                   	pop    %ebx
	unsigned int key = irq_lock();

	if (thread == _kernel.threads) {
  181ffa:	8b 0d 5c 02 28 00    	mov    0x28025c,%ecx
  182000:	39 c1                	cmp    %eax,%ecx
  182002:	75 0c                	jne    182010 <_thread_monitor_exit+0x1a>
		_kernel.threads = _kernel.threads->next_thread;
  182004:	8b 41 38             	mov    0x38(%ecx),%eax
  182007:	a3 5c 02 28 00       	mov    %eax,0x28025c
  18200c:	eb 0f                	jmp    18201d <_thread_monitor_exit+0x27>
	} else {
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while (thread != prev_thread->next_thread) {
			prev_thread = prev_thread->next_thread;
  18200e:	89 d1                	mov    %edx,%ecx
		_kernel.threads = _kernel.threads->next_thread;
	} else {
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while (thread != prev_thread->next_thread) {
  182010:	8b 51 38             	mov    0x38(%ecx),%edx
  182013:	39 d0                	cmp    %edx,%eax
  182015:	75 f7                	jne    18200e <_thread_monitor_exit+0x18>
			prev_thread = prev_thread->next_thread;
		}
		prev_thread->next_thread = thread->next_thread;
  182017:	8b 40 38             	mov    0x38(%eax),%eax
  18201a:	89 41 38             	mov    %eax,0x38(%ecx)
  18201d:	f6 c7 02             	test   $0x2,%bh
  182020:	74 01                	je     182023 <_thread_monitor_exit+0x2d>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  182022:	fb                   	sti    
	}

	irq_unlock(key);
}
  182023:	5b                   	pop    %ebx
  182024:	c3                   	ret    

00182025 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
  182025:	53                   	push   %ebx
  182026:	89 c3                	mov    %eax,%ebx
  182028:	89 d0                	mov    %edx,%eax
  18202a:	89 ca                	mov    %ecx,%edx
	entry(p1, p2, p3);
  18202c:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  182030:	ff d3                	call   *%ebx

#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
  182032:	e8 b3 ff ff ff       	call   181fea <_is_thread_essential>
  182037:	85 c0                	test   %eax,%eax
  182039:	74 0f                	je     18204a <_thread_entry+0x25>
		_NanoFatalErrorHandler(_NANO_ERR_INVALID_TASK_EXIT,
  18203b:	ba c0 27 18 00       	mov    $0x1827c0,%edx
  182040:	b8 03 00 00 00       	mov    $0x3,%eax
  182045:	e8 d3 f4 ff ff       	call   18151d <_NanoFatalErrorHandler>
				       &_default_esf);
	}

	k_thread_abort(_current);
  18204a:	a1 48 01 28 00       	mov    0x280148,%eax
  18204f:	e8 e0 01 00 00       	call   182234 <k_thread_abort>

00182054 <_k_thread_group_op>:
{
	return !!(thread_data->init_groups & groups);
}

void _k_thread_group_op(uint32_t groups, void (*func)(struct k_thread *))
{
  182054:	55                   	push   %ebp
  182055:	57                   	push   %edi
  182056:	56                   	push   %esi
  182057:	53                   	push   %ebx
  182058:	89 c6                	mov    %eax,%esi
  18205a:	89 d5                	mov    %edx,%ebp
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
  18205c:	8b 15 48 01 28 00    	mov    0x280148,%edx
  182062:	8a 42 0b             	mov    0xb(%edx),%al
  182065:	48                   	dec    %eax
  182066:	88 42 0b             	mov    %al,0xb(%edx)

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
  182069:	bb 98 00 28 00       	mov    $0x280098,%ebx
  18206e:	eb 18                	jmp    182088 <_k_thread_group_op+0x34>
		if (is_in_any_group(thread_data, groups)) {
  182070:	85 73 28             	test   %esi,0x28(%ebx)
  182073:	74 10                	je     182085 <_k_thread_group_op+0x31>

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  182075:	9c                   	pushf  
  182076:	fa                   	cli    
  182077:	5f                   	pop    %edi
			key = irq_lock();
			func(thread_data->thread);
  182078:	8b 03                	mov    (%ebx),%eax
  18207a:	ff d5                	call   *%ebp
  18207c:	f7 c7 00 02 00 00    	test   $0x200,%edi
  182082:	74 01                	je     182085 <_k_thread_group_op+0x31>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  182084:	fb                   	sti    

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
  182085:	83 c3 2c             	add    $0x2c,%ebx
  182088:	81 fb 98 00 28 00    	cmp    $0x280098,%ebx
  18208e:	72 e0                	jb     182070 <_k_thread_group_op+0x1c>

	/*
	 * If the current thread is still in a ready state, then let the
	 * "unlock scheduler" code determine if any rescheduling is needed.
	 */
	if (_is_thread_ready(_current)) {
  182090:	a1 48 01 28 00       	mov    0x280148,%eax
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  182095:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
  182099:	75 0d                	jne    1820a8 <_k_thread_group_op+0x54>
  18209b:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  18209f:	75 0e                	jne    1820af <_k_thread_group_op+0x5b>
  1820a1:	b8 01 00 00 00       	mov    $0x1,%eax
  1820a6:	eb 0c                	jmp    1820b4 <_k_thread_group_op+0x60>
  1820a8:	b8 00 00 00 00       	mov    $0x0,%eax
  1820ad:	eb 05                	jmp    1820b4 <_k_thread_group_op+0x60>
  1820af:	b8 00 00 00 00       	mov    $0x0,%eax
  1820b4:	85 c0                	test   %eax,%eax
  1820b6:	74 07                	je     1820bf <_k_thread_group_op+0x6b>
		k_sched_unlock();
  1820b8:	e8 61 f9 ff ff       	call   181a1e <k_sched_unlock>
		return;
  1820bd:	eb 15                	jmp    1820d4 <_k_thread_group_op+0x80>

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  1820bf:	9c                   	pushf  
  1820c0:	fa                   	cli    
  1820c1:	58                   	pop    %eax
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 0, "");

	compiler_barrier();

	++_current->base.sched_locked;
  1820c2:	8b 0d 48 01 28 00    	mov    0x280148,%ecx
  1820c8:	8a 51 0b             	mov    0xb(%ecx),%dl
  1820cb:	42                   	inc    %edx
  1820cc:	88 51 0b             	mov    %dl,0xb(%ecx)
	}

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
  1820cf:	e8 74 f3 ff ff       	call   181448 <_Swap>
}
  1820d4:	5b                   	pop    %ebx
  1820d5:	5e                   	pop    %esi
  1820d6:	5f                   	pop    %edi
  1820d7:	5d                   	pop    %ebp
  1820d8:	c3                   	ret    

001820d9 <_k_thread_single_abort>:

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
  1820d9:	56                   	push   %esi
  1820da:	53                   	push   %ebx
  1820db:	89 c3                	mov    %eax,%ebx
	if (thread->fn_abort != NULL) {
  1820dd:	8b 40 30             	mov    0x30(%eax),%eax
  1820e0:	85 c0                	test   %eax,%eax
  1820e2:	74 02                	je     1820e6 <_k_thread_single_abort+0xd>
		thread->fn_abort();
  1820e4:	ff d0                	call   *%eax
	return !(thread->base.thread_state & _THREAD_PRESTART);
}

static inline int _is_thread_prevented_from_running(struct k_thread *thread)
{
	uint8_t state = thread->base.thread_state;
  1820e6:	8a 43 09             	mov    0x9(%ebx),%al
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
  1820e9:	a8 1f                	test   $0x1f,%al
  1820eb:	75 0d                	jne    1820fa <_k_thread_single_abort+0x21>
  1820ed:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  1820f1:	75 0e                	jne    182101 <_k_thread_single_abort+0x28>
  1820f3:	ba 01 00 00 00       	mov    $0x1,%edx
  1820f8:	eb 0c                	jmp    182106 <_k_thread_single_abort+0x2d>
  1820fa:	ba 00 00 00 00       	mov    $0x0,%edx
  1820ff:	eb 05                	jmp    182106 <_k_thread_single_abort+0x2d>
  182101:	ba 00 00 00 00       	mov    $0x0,%edx
	}

	if (_is_thread_ready(thread)) {
  182106:	85 d2                	test   %edx,%edx
  182108:	74 09                	je     182113 <_k_thread_single_abort+0x3a>
		_remove_thread_from_ready_q(thread);
  18210a:	89 d8                	mov    %ebx,%eax
  18210c:	e8 68 f8 ff ff       	call   181979 <_remove_thread_from_ready_q>
  182111:	eb 61                	jmp    182174 <_k_thread_single_abort+0x9b>
	} else {
		if (_is_thread_pending(thread)) {
  182113:	a8 02                	test   $0x2,%al
  182115:	74 13                	je     18212a <_k_thread_single_abort+0x51>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  182117:	8b 43 04             	mov    0x4(%ebx),%eax
  18211a:	8b 13                	mov    (%ebx),%edx
  18211c:	89 10                	mov    %edx,(%eax)
	node->next->prev = node->prev;
  18211e:	8b 03                	mov    (%ebx),%eax
  182120:	8b 53 04             	mov    0x4(%ebx),%edx
  182123:	89 50 04             	mov    %edx,0x4(%eax)
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
  182126:	80 63 09 fd          	andb   $0xfd,0x9(%ebx)
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
  18212a:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  18212e:	74 44                	je     182174 <_k_thread_single_abort+0x9b>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
  182130:	8d 43 10             	lea    0x10(%ebx),%eax
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  182133:	8b 48 10             	mov    0x10(%eax),%ecx
  182136:	83 f9 ff             	cmp    $0xffffffff,%ecx
  182139:	74 39                	je     182174 <_k_thread_single_abort+0x9b>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  18213b:	89 c2                	mov    %eax,%edx
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
  18213d:	8b 35 50 01 28 00    	mov    0x280150,%esi
  182143:	39 f0                	cmp    %esi,%eax
  182145:	74 15                	je     18215c <_k_thread_single_abort+0x83>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  182147:	85 c0                	test   %eax,%eax
  182149:	74 0e                	je     182159 <_k_thread_single_abort+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  18214b:	39 f0                	cmp    %esi,%eax
  18214d:	74 05                	je     182154 <_k_thread_single_abort+0x7b>
  18214f:	8b 53 10             	mov    0x10(%ebx),%edx
  182152:	eb 05                	jmp    182159 <_k_thread_single_abort+0x80>
  182154:	ba 00 00 00 00       	mov    $0x0,%edx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  182159:	01 4a 10             	add    %ecx,0x10(%edx)
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  18215c:	8b 50 04             	mov    0x4(%eax),%edx
  18215f:	8b 4b 10             	mov    0x10(%ebx),%ecx
  182162:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  182164:	8b 53 10             	mov    0x10(%ebx),%edx
  182167:	8b 48 04             	mov    0x4(%eax),%ecx
  18216a:	89 4a 04             	mov    %ecx,0x4(%edx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  18216d:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
  182174:	80 4b 09 08          	orb    $0x8,0x9(%ebx)
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
  182178:	5b                   	pop    %ebx
  182179:	5e                   	pop    %esi
  18217a:	c3                   	ret    

0018217b <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
  18217b:	56                   	push   %esi
  18217c:	53                   	push   %ebx
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
  18217d:	bb 98 00 28 00       	mov    $0x280098,%ebx
  182182:	eb 27                	jmp    1821ab <_init_static_threads+0x30>
		_task_group_adjust(thread_data);
		_new_thread(
  182184:	8b 4b 08             	mov    0x8(%ebx),%ecx
  182187:	8b 53 04             	mov    0x4(%ebx),%edx
  18218a:	ff 73 1c             	pushl  0x1c(%ebx)
  18218d:	ff 73 18             	pushl  0x18(%ebx)
  182190:	ff 73 14             	pushl  0x14(%ebx)
  182193:	ff 73 10             	pushl  0x10(%ebx)
  182196:	ff 73 0c             	pushl  0xc(%ebx)
  182199:	8b 03                	mov    (%ebx),%eax
  18219b:	e8 37 f3 ff ff       	call   1814d7 <_new_thread>
  1821a0:	83 c4 14             	add    $0x14,%esp
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->thread->init_data = thread_data;
  1821a3:	8b 03                	mov    (%ebx),%eax
  1821a5:	89 58 2c             	mov    %ebx,0x2c(%eax)
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
  1821a8:	83 c3 2c             	add    $0x2c,%ebx
  1821ab:	81 fb 98 00 28 00    	cmp    $0x280098,%ebx
  1821b1:	72 d1                	jb     182184 <_init_static_threads+0x9>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
  1821b3:	8b 15 48 01 28 00    	mov    0x280148,%edx
  1821b9:	8a 42 0b             	mov    0xb(%edx),%al
  1821bc:	48                   	dec    %eax
  1821bd:	88 42 0b             	mov    %al,0xb(%edx)
	}

	_sched_lock();
#if defined(CONFIG_LEGACY_KERNEL)
	/* Start all (legacy) threads that are part of the EXE task group */
	_k_thread_group_op(K_TASK_GROUP_EXE, _k_thread_single_start);
  1821c0:	ba 0e 1e 18 00       	mov    $0x181e0e,%edx
  1821c5:	b8 01 00 00 00       	mov    $0x1,%eax
  1821ca:	e8 85 fe ff ff       	call   182054 <_k_thread_group_op>
  1821cf:	9c                   	pushf  
  1821d0:	fa                   	cli    
  1821d1:	5e                   	pop    %esi
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
  1821d2:	bb 98 00 28 00       	mov    $0x280098,%ebx
  1821d7:	eb 12                	jmp    1821eb <_init_static_threads+0x70>
		if (thread_data->init_delay != K_FOREVER) {
  1821d9:	8b 53 20             	mov    0x20(%ebx),%edx
  1821dc:	83 fa ff             	cmp    $0xffffffff,%edx
  1821df:	74 07                	je     1821e8 <_init_static_threads+0x6d>
			schedule_new_thread(thread_data->thread,
  1821e1:	8b 03                	mov    (%ebx),%eax
  1821e3:	e8 c5 fc ff ff       	call   181ead <schedule_new_thread>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
  1821e8:	83 c3 2c             	add    $0x2c,%ebx
  1821eb:	81 fb 98 00 28 00    	cmp    $0x280098,%ebx
  1821f1:	72 e6                	jb     1821d9 <_init_static_threads+0x5e>
  1821f3:	f7 c6 00 02 00 00    	test   $0x200,%esi
  1821f9:	74 01                	je     1821fc <_init_static_threads+0x81>
 * @return N/A
 */

static ALWAYS_INLINE void _do_irq_unlock(void)
{
	__asm__ volatile (
  1821fb:	fb                   	sti    
			schedule_new_thread(thread_data->thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
  1821fc:	e8 1d f8 ff ff       	call   181a1e <k_sched_unlock>
}
  182201:	5b                   	pop    %ebx
  182202:	5e                   	pop    %esi
  182203:	c3                   	ret    

00182204 <_init_thread_base>:
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
  182204:	53                   	push   %ebx
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
  182205:	8a 5c 24 08          	mov    0x8(%esp),%bl
  182209:	88 58 08             	mov    %bl,0x8(%eax)
	thread_base->thread_state = (uint8_t)initial_state;
  18220c:	88 48 09             	mov    %cl,0x9(%eax)

	thread_base->prio = priority;
  18220f:	88 50 0a             	mov    %dl,0xa(%eax)

	thread_base->sched_locked = 0;
  182212:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
  182216:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%eax)

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
  18221d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
  182224:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
  18222b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
  182232:	5b                   	pop    %ebx
  182233:	c3                   	ret    

00182234 <k_thread_abort>:

extern void _k_thread_single_abort(struct k_thread *thread);

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void k_thread_abort(k_tid_t thread)
{
  182234:	56                   	push   %esi
  182235:	53                   	push   %ebx
  182236:	89 c3                	mov    %eax,%ebx

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
  182238:	9c                   	pushf  
  182239:	fa                   	cli    
  18223a:	5e                   	pop    %esi
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
  18223b:	e8 99 fe ff ff       	call   1820d9 <_k_thread_single_abort>
	_thread_monitor_exit(thread);
  182240:	89 d8                	mov    %ebx,%eax
  182242:	e8 af fd ff ff       	call   181ff6 <_thread_monitor_exit>

	if (_current == thread) {
  182247:	3b 1d 48 01 28 00    	cmp    0x280148,%ebx
  18224d:	75 07                	jne    182256 <k_thread_abort+0x22>
		_Swap(key);
  18224f:	89 f0                	mov    %esi,%eax
  182251:	e8 f2 f1 ff ff       	call   181448 <_Swap>
		CODE_UNREACHABLE;
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
  182256:	89 f0                	mov    %esi,%eax
  182258:	e8 88 f7 ff ff       	call   1819e5 <_reschedule_threads>
}
  18225d:	5b                   	pop    %ebx
  18225e:	5e                   	pop    %esi
  18225f:	c3                   	ret    

00182260 <_sys_power_save_idle>:
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
  182260:	e8 92 f0 ff ff       	call   1812f7 <k_cpu_idle>
  182265:	c3                   	ret    

00182266 <idle>:
  182266:	9c                   	pushf  
  182267:	fa                   	cli    
  182268:	58                   	pop    %eax
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  182269:	a1 4c 01 28 00       	mov    0x28014c,%eax
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  18226e:	3d 4c 01 28 00       	cmp    $0x28014c,%eax
  182273:	75 05                	jne    18227a <idle+0x14>
  182275:	b8 00 00 00 00       	mov    $0x0,%eax
static inline int32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
  18227a:	85 c0                	test   %eax,%eax
  18227c:	74 05                	je     182283 <idle+0x1d>
  18227e:	8b 40 10             	mov    0x10(%eax),%eax
  182281:	eb 05                	jmp    182288 <idle+0x22>
  182283:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	__idle_tsc = _tsc_read();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
  182288:	e8 d3 ff ff ff       	call   182260 <_sys_power_save_idle>

		IDLE_YIELD_IF_COOP();
	}
  18228d:	eb d7                	jmp    182266 <idle>

0018228f <_OffsetAbsSyms>:
/* tTaskStateSegment structure member offsets */


/* size of the ISR_LIST structure. Used by linker scripts */

GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(ISR_LIST));
  18228f:	c3                   	ret    

00182290 <_handle_exc_0_vector_0_stub>:
  182290:	6a 00                	push   $0x0
  182292:	68 71 16 18 00       	push   $0x181671
  182297:	e9 dc f0 ff ff       	jmp    181378 <_exception_enter>

0018229c <_handle_exc_2_vector_2_stub>:
  18229c:	6a 00                	push   $0x0
  18229e:	68 7d 16 18 00       	push   $0x18167d
  1822a3:	e9 d0 f0 ff ff       	jmp    181378 <_exception_enter>

001822a8 <_handle_exc_4_vector_4_stub>:
  1822a8:	6a 00                	push   $0x0
  1822aa:	68 89 16 18 00       	push   $0x181689
  1822af:	e9 c4 f0 ff ff       	jmp    181378 <_exception_enter>

001822b4 <_handle_exc_5_vector_5_stub>:
  1822b4:	6a 00                	push   $0x0
  1822b6:	68 95 16 18 00       	push   $0x181695
  1822bb:	e9 b8 f0 ff ff       	jmp    181378 <_exception_enter>

001822c0 <_handle_exc_6_vector_6_stub>:
  1822c0:	6a 00                	push   $0x0
  1822c2:	68 a1 16 18 00       	push   $0x1816a1
  1822c7:	e9 ac f0 ff ff       	jmp    181378 <_exception_enter>

001822cc <_handle_exc_7_vector_7_stub>:
  1822cc:	6a 00                	push   $0x0
  1822ce:	68 ad 16 18 00       	push   $0x1816ad
  1822d3:	e9 a0 f0 ff ff       	jmp    181378 <_exception_enter>

001822d8 <_handle_exc_8_vector_8_stub>:
  1822d8:	68 b9 16 18 00       	push   $0x1816b9
  1822dd:	e9 96 f0 ff ff       	jmp    181378 <_exception_enter>

001822e2 <_handle_exc_10_vector_10_stub>:
  1822e2:	68 c5 16 18 00       	push   $0x1816c5
  1822e7:	e9 8c f0 ff ff       	jmp    181378 <_exception_enter>

001822ec <_handle_exc_11_vector_11_stub>:
  1822ec:	68 d1 16 18 00       	push   $0x1816d1
  1822f1:	e9 82 f0 ff ff       	jmp    181378 <_exception_enter>

001822f6 <_handle_exc_12_vector_12_stub>:
  1822f6:	68 dd 16 18 00       	push   $0x1816dd
  1822fb:	e9 78 f0 ff ff       	jmp    181378 <_exception_enter>

00182300 <_handle_exc_13_vector_13_stub>:
  182300:	68 e9 16 18 00       	push   $0x1816e9
  182305:	e9 6e f0 ff ff       	jmp    181378 <_exception_enter>

0018230a <_handle_exc_14_vector_14_stub>:
  18230a:	68 f5 16 18 00       	push   $0x1816f5
  18230f:	e9 64 f0 ff ff       	jmp    181378 <_exception_enter>

00182314 <_handle_exc_16_vector_16_stub>:
  182314:	6a 00                	push   $0x0
  182316:	68 01 17 18 00       	push   $0x181701
  18231b:	e9 58 f0 ff ff       	jmp    181378 <_exception_enter>

00182320 <_handle_exc_17_vector_17_stub>:
  182320:	68 0d 17 18 00       	push   $0x18170d
  182325:	e9 4e f0 ff ff       	jmp    181378 <_exception_enter>

0018232a <_handle_exc_18_vector_18_stub>:
  18232a:	6a 00                	push   $0x0
  18232c:	68 19 17 18 00       	push   $0x181719
  182331:	e9 42 f0 ff ff       	jmp    181378 <_exception_enter>
